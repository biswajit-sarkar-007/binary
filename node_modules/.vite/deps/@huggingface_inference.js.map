{
  "version": 3,
  "sources": ["../../@huggingface/tasks/dist/esm/library-to-tasks.js", "../../@huggingface/tasks/dist/esm/default-widget-inputs.js", "../../@huggingface/tasks/dist/esm/pipelines.js", "../../@huggingface/tasks/dist/esm/tasks/audio-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/audio-to-audio/data.js", "../../@huggingface/tasks/dist/esm/tasks/automatic-speech-recognition/data.js", "../../@huggingface/tasks/dist/esm/tasks/document-question-answering/data.js", "../../@huggingface/tasks/dist/esm/tasks/feature-extraction/data.js", "../../@huggingface/tasks/dist/esm/tasks/fill-mask/data.js", "../../@huggingface/tasks/dist/esm/tasks/image-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/image-feature-extraction/data.js", "../../@huggingface/tasks/dist/esm/tasks/image-to-image/data.js", "../../@huggingface/tasks/dist/esm/tasks/image-to-text/data.js", "../../@huggingface/tasks/dist/esm/tasks/image-text-to-text/data.js", "../../@huggingface/tasks/dist/esm/tasks/image-segmentation/data.js", "../../@huggingface/tasks/dist/esm/tasks/mask-generation/data.js", "../../@huggingface/tasks/dist/esm/tasks/object-detection/data.js", "../../@huggingface/tasks/dist/esm/tasks/depth-estimation/data.js", "../../@huggingface/tasks/dist/esm/tasks/placeholder/data.js", "../../@huggingface/tasks/dist/esm/tasks/reinforcement-learning/data.js", "../../@huggingface/tasks/dist/esm/tasks/question-answering/data.js", "../../@huggingface/tasks/dist/esm/tasks/sentence-similarity/data.js", "../../@huggingface/tasks/dist/esm/tasks/summarization/data.js", "../../@huggingface/tasks/dist/esm/tasks/table-question-answering/data.js", "../../@huggingface/tasks/dist/esm/tasks/tabular-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/tabular-regression/data.js", "../../@huggingface/tasks/dist/esm/tasks/text-to-image/data.js", "../../@huggingface/tasks/dist/esm/tasks/text-to-speech/data.js", "../../@huggingface/tasks/dist/esm/tasks/token-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/translation/data.js", "../../@huggingface/tasks/dist/esm/tasks/text-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/text-generation/data.js", "../../@huggingface/tasks/dist/esm/tasks/text-ranking/data.js", "../../@huggingface/tasks/dist/esm/tasks/text-to-video/data.js", "../../@huggingface/tasks/dist/esm/tasks/unconditional-image-generation/data.js", "../../@huggingface/tasks/dist/esm/tasks/video-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/visual-question-answering/data.js", "../../@huggingface/tasks/dist/esm/tasks/zero-shot-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/zero-shot-image-classification/data.js", "../../@huggingface/tasks/dist/esm/tasks/zero-shot-object-detection/data.js", "../../@huggingface/tasks/dist/esm/tasks/image-to-3d/data.js", "../../@huggingface/tasks/dist/esm/tasks/text-to-3d/data.js", "../../@huggingface/tasks/dist/esm/tasks/keypoint-detection/data.js", "../../@huggingface/tasks/dist/esm/tasks/video-text-to-text/data.js", "../../@huggingface/tasks/dist/esm/tasks/index.js", "../../@huggingface/tasks/dist/esm/snippets/inputs.js", "../../@huggingface/tasks/dist/esm/snippets/common.js", "../../@huggingface/tasks/dist/esm/model-libraries-snippets.js", "../../@huggingface/tasks/dist/esm/model-libraries.js", "../../@huggingface/tasks/dist/esm/gguf.js", "../../@huggingface/tasks/dist/esm/snippets/types.js", "../../@huggingface/tasks/dist/esm/hardware.js", "../../@huggingface/jinja/dist/index.js", "../../@huggingface/inference/dist/index.js"],
  "sourcesContent": ["/**\n * Mapping from library name to its supported tasks.\n * HF-Inference API (serverless) should be disabled for all other (library, task) pairs beyond this mapping.\n * This mapping is partially generated automatically by \"python-api-export-tasks\" action in\n * huggingface/api-inference-community repo upon merge. For transformers, the mapping is manually\n * based on api-inference (hf_types.rs).\n */\nexport const LIBRARY_TASK_MAPPING = {\n    \"adapter-transformers\": [\"question-answering\", \"text-classification\", \"token-classification\"],\n    allennlp: [\"question-answering\"],\n    asteroid: [\n        // \"audio-source-separation\",\n        \"audio-to-audio\",\n    ],\n    bertopic: [\"text-classification\"],\n    diffusers: [\"image-to-image\", \"text-to-image\"],\n    doctr: [\"object-detection\"],\n    espnet: [\"text-to-speech\", \"automatic-speech-recognition\"],\n    fairseq: [\"text-to-speech\", \"audio-to-audio\"],\n    fastai: [\"image-classification\"],\n    fasttext: [\"feature-extraction\", \"text-classification\"],\n    flair: [\"token-classification\"],\n    k2: [\"automatic-speech-recognition\"],\n    keras: [\"image-classification\"],\n    nemo: [\"automatic-speech-recognition\"],\n    open_clip: [\"zero-shot-classification\", \"zero-shot-image-classification\"],\n    paddlenlp: [\"fill-mask\", \"summarization\", \"zero-shot-classification\"],\n    peft: [\"text-generation\"],\n    \"pyannote-audio\": [\"automatic-speech-recognition\"],\n    \"sentence-transformers\": [\"feature-extraction\", \"sentence-similarity\"],\n    setfit: [\"text-classification\"],\n    sklearn: [\"tabular-classification\", \"tabular-regression\", \"text-classification\"],\n    spacy: [\"token-classification\", \"text-classification\", \"sentence-similarity\"],\n    \"span-marker\": [\"token-classification\"],\n    speechbrain: [\n        \"audio-classification\",\n        \"audio-to-audio\",\n        \"automatic-speech-recognition\",\n        \"text-to-speech\",\n        \"text2text-generation\",\n    ],\n    stanza: [\"token-classification\"],\n    timm: [\"image-classification\", \"image-feature-extraction\"],\n    transformers: [\n        \"audio-classification\",\n        \"automatic-speech-recognition\",\n        \"depth-estimation\",\n        \"document-question-answering\",\n        \"feature-extraction\",\n        \"fill-mask\",\n        \"image-classification\",\n        \"image-feature-extraction\",\n        \"image-segmentation\",\n        \"image-to-image\",\n        \"image-to-text\",\n        \"image-text-to-text\",\n        \"mask-generation\",\n        \"object-detection\",\n        \"question-answering\",\n        \"summarization\",\n        \"table-question-answering\",\n        \"text2text-generation\",\n        \"text-classification\",\n        \"text-generation\",\n        \"text-to-audio\",\n        \"text-to-speech\",\n        \"token-classification\",\n        \"translation\",\n        \"video-classification\",\n        \"visual-question-answering\",\n        \"zero-shot-classification\",\n        \"zero-shot-image-classification\",\n        \"zero-shot-object-detection\",\n    ],\n    mindspore: [\"image-classification\"],\n};\n", "/// NOTE TO CONTRIBUTORS:\n///\n/// When adding sample inputs for a new language, you don't\n/// necessarily have to translate the inputs from existing languages.\n/// (which were quite random to begin with)\n///\n/// i.e. Feel free to be creative and provide better samples.\n//\n/// The <mask> placeholder will be replaced by the correct mask token\n/// in the following examples, depending on the model type\n///\n/// see [INTERNAL] github.com/huggingface/moon-landing/blob/c5c3d45fe0ab27347b3ab27bdad646ef20732351/server/lib/App.ts#L254\n//\nconst MAPPING_EN = new Map([\n    [\"text-classification\", [`I like you. I love you`]],\n    [\n        \"token-classification\",\n        [\n            `My name is Wolfgang and I live in Berlin`,\n            `My name is Sarah and I live in London`,\n            `My name is Clara and I live in Berkeley, California.`,\n        ],\n    ],\n    [\n        \"table-question-answering\",\n        [\n            {\n                text: `How many stars does the transformers repository have?`,\n                table: {\n                    Repository: [\"Transformers\", \"Datasets\", \"Tokenizers\"],\n                    Stars: [36542, 4512, 3934],\n                    Contributors: [651, 77, 34],\n                    \"Programming language\": [\"Python\", \"Python\", \"Rust, Python and NodeJS\"],\n                },\n            },\n        ],\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Where do I live?`,\n                context: `My name is Wolfgang and I live in Berlin`,\n            },\n            {\n                text: `Where do I live?`,\n                context: `My name is Sarah and I live in London`,\n            },\n            {\n                text: `What's my name?`,\n                context: `My name is Clara and I live in Berkeley.`,\n            },\n            {\n                text: `Which name is also used to describe the Amazon rainforest in English?`,\n                context: `The Amazon rainforest (Portuguese: Floresta Amazônica or Amazônia; Spanish: Selva Amazónica, Amazonía or usually Amazonia; French: Forêt amazonienne; Dutch: Amazoneregenwoud), also known in English as Amazonia or the Amazon Jungle, is a moist broadleaf forest that covers most of the Amazon basin of South America. This basin encompasses 7,000,000 square kilometres (2,700,000 sq mi), of which 5,500,000 square kilometres (2,100,000 sq mi) are covered by the rainforest. This region includes territory belonging to nine nations. The majority of the forest is contained within Brazil, with 60% of the rainforest, followed by Peru with 13%, Colombia with 10%, and with minor amounts in Venezuela, Ecuador, Bolivia, Guyana, Suriname and French Guiana. States or departments in four nations contain \"Amazonas\" in their names. The Amazon represents over half of the planet's remaining rainforests, and comprises the largest and most biodiverse tract of tropical rainforest in the world, with an estimated 390 billion individual trees divided into 16,000 species.`,\n            },\n        ],\n    ],\n    [\n        \"zero-shot-classification\",\n        [\n            {\n                text: \"I have a problem with my iphone that needs to be resolved asap!\",\n                candidate_labels: \"urgent, not urgent, phone, tablet, computer\",\n                multi_class: true,\n            },\n            {\n                text: \"Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.\",\n                candidate_labels: \"mobile, website, billing, account access\",\n                multi_class: false,\n            },\n            {\n                text: \"A new model offers an explanation for how the Galilean satellites formed around the solar system’s largest world. Konstantin Batygin did not set out to solve one of the solar system’s most puzzling mysteries when he went for a run up a hill in Nice, France. Dr. Batygin, a Caltech researcher, best known for his contributions to the search for the solar system’s missing “Planet Nine,” spotted a beer bottle. At a steep, 20 degree grade, he wondered why it wasn’t rolling down the hill. He realized there was a breeze at his back holding the bottle in place. Then he had a thought that would only pop into the mind of a theoretical astrophysicist: “Oh! This is how Europa formed.” Europa is one of Jupiter’s four large Galilean moons. And in a paper published Monday in the Astrophysical Journal, Dr. Batygin and a co-author, Alessandro Morbidelli, a planetary scientist at the Côte d’Azur Observatory in France, present a theory explaining how some moons form around gas giants like Jupiter and Saturn, suggesting that millimeter-sized grains of hail produced during the solar system’s formation became trapped around these massive worlds, taking shape one at a time into the potentially habitable moons we know today.\",\n                candidate_labels: \"space & cosmos, scientific discovery, microbiology, robots, archeology\",\n                multi_class: true,\n            },\n        ],\n    ],\n    [\"translation\", [`My name is Wolfgang and I live in Berlin`, `My name is Sarah and I live in London`]],\n    [\n        \"summarization\",\n        [\n            `The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.`,\n        ],\n    ],\n    [\n        \"conversational\",\n        [\n            `Hi, what can you help me with?`,\n            `What is 84 * 3 / 2?`,\n            `Tell me an interesting fact about the universe!`,\n            `Explain quantum computing in simple terms.`,\n        ],\n    ],\n    [\n        \"text-generation\",\n        [\n            `My name is Julien and I like to`,\n            `I like traveling by train because`,\n            `Paris is an amazing place to visit,`,\n            `Once upon a time,`,\n        ],\n    ],\n    [\"fill-mask\", [`Paris is the <mask> of France.`, `The goal of life is <mask>.`]],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"That is a happy person\",\n                sentences: [\"That is a happy dog\", \"That is a very happy person\", \"Today is a sunny day\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_ZH = new Map([\n    [\"text-classification\", [`我喜欢你。 我爱你`]],\n    [\"token-classification\", [`我叫沃尔夫冈，我住在柏林。`, `我叫萨拉，我住在伦敦。`, `我叫克拉拉，我住在加州伯克利。`]],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `我住在哪里？`,\n                context: `我叫沃尔夫冈，我住在柏林。`,\n            },\n            {\n                text: `我住在哪里？`,\n                context: `我叫萨拉，我住在伦敦。`,\n            },\n            {\n                text: `我的名字是什么？`,\n                context: `我叫克拉拉，我住在伯克利。`,\n            },\n        ],\n    ],\n    [\"translation\", [`我叫沃尔夫冈，我住在柏林。`, `我叫萨拉，我住在伦敦。`]],\n    [\n        \"zero-shot-classification\",\n        [\n            {\n                text: \"房间干净明亮，非常不错\",\n                candidate_labels: \"这是一条差评, 这是一条好评\",\n            },\n        ],\n    ],\n    [\n        \"summarization\",\n        [\n            `该塔高324米（1063英尺），与一幢81层的建筑物一样高，是巴黎最高的建筑物。 它的底座是方形的，每边长125米（410英尺）。 在建造过程中，艾菲尔铁塔超过了华盛顿纪念碑，成为世界上最高的人造结构，它保持了41年的头衔，直到1930年纽约市的克莱斯勒大楼竣工。这是第一个到达300米高度的结构。 由于1957年在塔顶增加了广播天线，因此它现在比克莱斯勒大厦高5.2米（17英尺）。 除发射器外，艾菲尔铁塔是法国第二高的独立式建筑，仅次于米劳高架桥。`,\n        ],\n    ],\n    [\n        \"text-generation\",\n        [`我叫朱利安，我喜欢`, `我叫托马斯，我的主要`, `我叫玛丽亚，我最喜欢的`, `我叫克拉拉，我是`, `从前，`],\n    ],\n    [\"fill-mask\", [`巴黎是<mask>国的首都。`, `生活的真谛是<mask>。`]],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"那是 個快樂的人\",\n                sentences: [\"那是 條快樂的狗\", \"那是 個非常幸福的人\", \"今天是晴天\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_FR = new Map([\n    [\"text-classification\", [`Je t'apprécie beaucoup. Je t'aime.`]],\n    [\"token-classification\", [`Mon nom est Wolfgang et je vis à Berlin`]],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Où est-ce que je vis?`,\n                context: `Mon nom est Wolfgang et je vis à Berlin`,\n            },\n        ],\n    ],\n    [\"translation\", [`Mon nom est Wolfgang et je vis à Berlin`]],\n    [\n        \"summarization\",\n        [\n            `La tour fait 324 mètres (1,063 pieds) de haut, environ la même hauteur qu'un immeuble de 81 étages, et est la plus haute structure de Paris. Sa base est carrée, mesurant 125 mètres (410 pieds) sur chaque côté. Durant sa construction, la tour Eiffel surpassa le Washington Monument pour devenir la plus haute structure construite par l'homme dans le monde, un titre qu'elle conserva pendant 41 ans jusqu'à l'achèvement du Chrysler Building à New-York City en 1930. Ce fut la première structure à atteindre une hauteur de 300 mètres. Avec l'ajout d'une antenne de radiodiffusion au sommet de la tour Eiffel en 1957, celle-ci redevint plus haute que le Chrysler Building de 5,2 mètres (17 pieds). En excluant les transmetteurs, elle est la seconde plus haute stucture autoportante de France après le viaduc de Millau.`,\n        ],\n    ],\n    [\"text-generation\", [`Mon nom est Julien et j'aime`, `Mon nom est Thomas et mon principal`, `Il était une fois`]],\n    [\"fill-mask\", [`Paris est la <mask> de la France.`]],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"C'est une personne heureuse\",\n                sentences: [\n                    \"C'est un chien heureux\",\n                    \"C'est une personne très heureuse\",\n                    \"Aujourd'hui est une journée ensoleillée\",\n                ],\n            },\n        ],\n    ],\n]);\nconst MAPPING_ES = new Map([\n    [\"text-classification\", [`Te quiero. Te amo.`]],\n    [\"token-classification\", [`Me llamo Wolfgang y vivo en Berlin`]],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `¿Dónde vivo?`,\n                context: `Me llamo Wolfgang y vivo en Berlin`,\n            },\n            {\n                text: `¿Quién inventó el submarino?`,\n                context: `Isaac Peral fue un murciano que inventó el submarino`,\n            },\n            {\n                text: `¿Cuántas personas hablan español?`,\n                context: `El español es el segundo idioma más hablado del mundo con más de 442 millones de hablantes`,\n            },\n        ],\n    ],\n    [\n        \"translation\",\n        [\n            `Me llamo Wolfgang y vivo en Berlin`,\n            `Los ingredientes de una tortilla de patatas son: huevos, patatas y cebolla`,\n        ],\n    ],\n    [\n        \"summarization\",\n        [\n            `La torre tiene 324 metros (1.063 pies) de altura, aproximadamente la misma altura que un edificio de 81 pisos y la estructura más alta de París. Su base es cuadrada, mide 125 metros (410 pies) a cada lado. Durante su construcción, la Torre Eiffel superó al Washington Monument para convertirse en la estructura artificial más alta del mundo, un título que mantuvo durante 41 años hasta que el Chrysler Building en la ciudad de Nueva York se terminó en 1930. Fue la primera estructura en llegar Una altura de 300 metros. Debido a la adición de una antena de transmisión en la parte superior de la torre en 1957, ahora es más alta que el Chrysler Building en 5,2 metros (17 pies). Excluyendo los transmisores, la Torre Eiffel es la segunda estructura independiente más alta de Francia después del Viaducto de Millau.`,\n        ],\n    ],\n    [\n        \"text-generation\",\n        [\n            `Me llamo Julien y me gusta`,\n            `Me llamo Thomas y mi principal`,\n            `Me llamo Manuel y trabajo en`,\n            `Érase una vez,`,\n            `Si tú me dices ven, `,\n        ],\n    ],\n    [\"fill-mask\", [`Mi nombre es <mask> y vivo en Nueva York.`, `El español es un idioma muy <mask> en el mundo.`]],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Esa es una persona feliz\",\n                sentences: [\"Ese es un perro feliz\", \"Esa es una persona muy feliz\", \"Hoy es un día soleado\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_RU = new Map([\n    [\"text-classification\", [`Ты мне нравишься. Я тебя люблю`]],\n    [\"token-classification\", [`Меня зовут Вольфганг и я живу в Берлине`]],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Где живу?`,\n                context: `Меня зовут Вольфганг и я живу в Берлине`,\n            },\n        ],\n    ],\n    [\"translation\", [`Меня зовут Вольфганг и я живу в Берлине`]],\n    [\n        \"summarization\",\n        [\n            `Высота башни составляет 324 метра (1063 фута), примерно такая же высота, как у 81-этажного здания, и самое высокое сооружение в Париже. Его основание квадратно, размером 125 метров (410 футов) с любой стороны. Во время строительства Эйфелева башня превзошла монумент Вашингтона, став самым высоким искусственным сооружением в мире, и этот титул она удерживала в течение 41 года до завершения строительство здания Крайслер в Нью-Йорке в 1930 году. Это первое сооружение которое достигло высоты 300 метров. Из-за добавления вещательной антенны на вершине башни в 1957 году она сейчас выше здания Крайслер на 5,2 метра (17 футов). За исключением передатчиков, Эйфелева башня является второй самой высокой отдельно стоящей структурой во Франции после виадука Мийо.`,\n        ],\n    ],\n    [\"text-generation\", [`Меня зовут Жюльен и`, `Меня зовут Томас и мой основной`, `Однажды`]],\n    [\"fill-mask\", [`Меня зовут <mask> и я инженер живущий в Нью-Йорке.`]],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Это счастливый человек\",\n                sentences: [\"Это счастливая собака\", \"Это очень счастливый человек\", \"Сегодня солнечный день\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_UK = new Map([\n    [\"translation\", [`Мене звати Вольфґанґ і я живу в Берліні.`]],\n    [\"fill-mask\", [`Мене звати <mask>.`]],\n]);\nconst MAPPING_IT = new Map([\n    [\"text-classification\", [`Mi piaci. Ti amo`]],\n    [\n        \"token-classification\",\n        [\n            `Mi chiamo Wolfgang e vivo a Berlino`,\n            `Mi chiamo Sarah e vivo a Londra`,\n            `Mi chiamo Clara e vivo a Berkeley in California.`,\n        ],\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Dove vivo?`,\n                context: `Mi chiamo Wolfgang e vivo a Berlino`,\n            },\n            {\n                text: `Dove vivo?`,\n                context: `Mi chiamo Sarah e vivo a Londra`,\n            },\n            {\n                text: `Come mio chiamo?`,\n                context: `Mi chiamo Clara e vivo a Berkeley.`,\n            },\n        ],\n    ],\n    [\"translation\", [`Mi chiamo Wolfgang e vivo a Berlino`, `Mi chiamo Sarah e vivo a Londra`]],\n    [\n        \"summarization\",\n        [\n            `La torre degli Asinelli è una delle cosiddette due torri di Bologna, simbolo della città, situate in piazza di porta Ravegnana, all'incrocio tra le antiche strade San Donato (ora via Zamboni), San Vitale, Maggiore e Castiglione. Eretta, secondo la tradizione, fra il 1109 e il 1119 dal nobile Gherardo Asinelli, la torre è alta 97,20 metri, pende verso ovest per 2,23 metri e presenta all'interno una scalinata composta da 498 gradini. Ancora non si può dire con certezza quando e da chi fu costruita la torre degli Asinelli. Si presume che la torre debba il proprio nome a Gherardo Asinelli, il nobile cavaliere di fazione ghibellina al quale se ne attribuisce la costruzione, iniziata secondo una consolidata tradizione l'11 ottobre 1109 e terminata dieci anni dopo, nel 1119.`,\n        ],\n    ],\n    [\n        \"text-generation\",\n        [\n            `Mi chiamo Loreto e mi piace`,\n            `Mi chiamo Thomas e il mio principale`,\n            `Mi chiamo Marianna, la mia cosa preferita`,\n            `Mi chiamo Clara e sono`,\n            `C'era una volta`,\n        ],\n    ],\n    [\"fill-mask\", [`Roma è la <mask> d'Italia.`, `Lo scopo della vita è <mask>.`]],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Questa è una persona felice\",\n                sentences: [\"Questo è un cane felice\", \"Questa è una persona molto felice\", \"Oggi è una giornata di sole\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_FA = new Map([\n    [\n        \"text-classification\",\n        [`پروژه به موقع تحویل شد و همه چیز خوب بود.`, `سیب‌زمینی بی‌کیفیت بود.`, `قیمت و کیفیت عالی`, `خوب نبود اصلا`],\n    ],\n    [\n        \"token-classification\",\n        [\n            `این سریال به صورت رسمی در تاریخ دهم می ۲۰۱۱ توسط شبکه فاکس برای پخش رزرو شد.`,\n            `دفتر مرکزی شرکت پارس‌مینو در شهر اراک در استان مرکزی قرار دارد.`,\n            `وی در سال ۲۰۱۳ درگذشت و مسئول خاکسپاری و اقوامش برای او مراسم یادبود گرفتند.`,\n        ],\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `من کجا زندگی میکنم؟`,\n                context: `نام من پژمان است و در گرگان زندگی میکنم.`,\n            },\n            {\n                text: `نامم چیست و کجا زندگی می‌کنم؟`,\n                context: `اسمم سارا است و در آفریقای جنوبی زندگی میکنم.`,\n            },\n            {\n                text: `نام من چیست؟`,\n                context: `من مریم هستم و در تبریز زندگی می‌کنم.`,\n            },\n            {\n                text: `بیشترین مساحت جنگل آمازون در کدام کشور است؟`,\n                context: [\n                    \"آمازون نام بزرگ‌ترین جنگل بارانی جهان است که در شمال آمریکای جنوبی قرار گرفته و بیشتر آن در خاک برزیل و پرو\",\n                    \"جای دارد. بیش از نیمی از همه جنگل‌های بارانی باقی‌مانده در جهان در آمازون قرار دارد.\",\n                    \"مساحت جنگل‌های آمازون ۵٫۵ میلیون کیلومتر مربع است که بین ۹ کشور تقسیم شده‌است.\",\n                ].join(\"\\n\"),\n            },\n        ],\n    ],\n    [\n        \"translation\",\n        [\n            \"بیشتر مساحت جنگل‌های آمازون در حوضه آبریز رود آمازون و ۱۱۰۰ شاخه آن واقع شده‌است.\",\n            \"مردمان نَبَطی از هزاره‌های یکم و دوم پیش از میلاد در این منطقه زندگی می‌کردند.\",\n        ],\n    ],\n    [\n        \"summarization\",\n        [\n            [\n                \"شاهنامه اثر حکیم ابوالقاسم فردوسی توسی، حماسه‌ای منظوم، بر حسب دست نوشته‌های \",\n                \"موجود دربرگیرنده نزدیک به ۵۰٬۰۰۰ بیت تا نزدیک به ۶۱٬۰۰۰ بیت و یکی از \",\n                \"بزرگ‌ترین و برجسته‌ترین سروده‌های حماسی جهان است که سرایش آن دست‌آوردِ \",\n                \"دست‌کم سی سال کارِ پیوستهٔ این سخن‌سرای نامدار ایرانی است. موضوع این شاهکار ادبی،\",\n                \" افسانه‌ها و تاریخ ایران از آغاز تا حملهٔ عرب‌ها به ایران در سدهٔ هفتم میلادی است\",\n                \"  (شاهنامه از سه بخش اسطوره، پهلوانی و تاریخی تشکیل شده‌است) که در چهار\",\n                \"   دودمان پادشاهیِ پیشدادیان، کیانیان، اشکانیان و ساسانیان گنجانده می‌شود.\",\n                \"    شاهنامه بر وزن «فَعولُن فعولن فعولن فَعَلْ»، در بحرِ مُتَقارِبِ مثمَّنِ محذوف نگاشته شده‌است.\",\n                \"هنگامی که زبان دانش و ادبیات در ایران زبان عربی بود، فردوسی، با سرودن شاهنامه\",\n                \" با ویژگی‌های هدف‌مندی که داشت، زبان پارسی را زنده و پایدار کرد. یکی از \",\n                \" بن‌مایه‌های مهمی که فردوسی برای سرودن شاهنامه از آن استفاده کرد،\",\n                \"  شاهنامهٔ ابومنصوری بود. شاهنامه نفوذ بسیاری در جهت‌گیری \",\n                \"  فرهنگ فارسی و نیز بازتاب‌های شکوه‌مندی در ادبیات جهان داشته‌است و شاعران \",\n                \"  بزرگی مانند گوته و ویکتور هوگو از آن به نیکی یاد کرده‌اند.\",\n            ].join(\"\\n\"),\n        ],\n    ],\n    [\"text-generation\", [\"اسم من نازنین است و من\", \"روزی روزگاری\"]],\n    [\n        \"fill-mask\",\n        [\n            `زندگی یک سوال است و این که چگونه <mask> کنیم پاسخ این سوال!`,\n            `زندگی از مرگ پرسید: چرا همه من را <mask> دارند اما از تو متنفرند؟`,\n        ],\n    ],\n]);\nconst MAPPING_AR = new Map([\n    [\"text-classification\", [`أحبك. أهواك`]],\n    [\n        \"token-classification\",\n        [`إسمي محمد وأسكن في برلين`, `إسمي ساره وأسكن في لندن`, `إسمي سامي وأسكن في القدس في فلسطين.`],\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `أين أسكن؟`,\n                context: `إسمي محمد وأسكن في بيروت`,\n            },\n            {\n                text: `أين أسكن؟`,\n                context: `إسمي ساره وأسكن في لندن`,\n            },\n            {\n                text: `ما اسمي؟`,\n                context: `اسمي سعيد وأسكن في حيفا.`,\n            },\n            {\n                text: `ما لقب خالد بن الوليد بالعربية؟`,\n                context: `خالد بن الوليد من أبطال وقادة الفتح الإسلامي وقد تحدثت عنه اللغات الإنجليزية والفرنسية والإسبانية ولقب بسيف الله المسلول.`,\n            },\n        ],\n    ],\n    [\"translation\", [`إسمي محمد وأسكن في برلين`, `إسمي ساره وأسكن في لندن`]],\n    [\n        \"summarization\",\n        [\n            `تقع الأهرامات في الجيزة قرب القاهرة في مصر وقد بنيت منذ عدة قرون، وقيل إنها كانت قبورا للفراعنة وتم بناؤها بعملية هندسية رائعة واستقدمت حجارتها من جبل المقطم وتم نقلها بالسفن أو على الرمل، وما تزال شامخة ويقصدها السياح من كافة أرجاء المعمورة.`,\n        ],\n    ],\n    [\n        \"text-generation\",\n        [\n            `إسمي محمد وأحب أن`,\n            `دع المكارم لا ترحل لبغيتها - واقعد فإنك أنت الطاعم الكاسي.`,\n            `لماذا نحن هنا؟`,\n            `القدس مدينة تاريخية، بناها الكنعانيون في`,\n            `كان يا ما كان في قديم الزمان`,\n        ],\n    ],\n    [\"fill-mask\", [`باريس <mask> فرنسا.`, `فلسفة الحياة هي <mask>.`]],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"هذا شخص سعيد\",\n                sentences: [\"هذا كلب سعيد\", \"هذا شخص سعيد جدا\", \"اليوم هو يوم مشمس\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_BN = new Map([\n    [\"text-classification\", [`বাঙালির ঘরে ঘরে আজ নবান্ন উৎসব।`]],\n    [\n        \"token-classification\",\n        [`আমার নাম জাহিদ এবং আমি ঢাকায় বাস করি।`, `তিনি গুগলে চাকরী করেন।`, `আমার নাম সুস্মিতা এবং আমি কলকাতায় বাস করি।`],\n    ],\n    [\"translation\", [`আমার নাম জাহিদ, আমি রংপুরে বাস করি।`, `আপনি কী আজকে বাসায় আসবেন?`]],\n    [\n        \"summarization\",\n        [\n            `‘ইকোনমিস্ট’ লিখেছে, অ্যান্টিবডির চার মাস স্থায়ী হওয়ার খবরটি দুই কারণে আনন্দের। অ্যান্টিবডি যত দিন পর্যন্ত শরীরে টিকবে, তত দিন সংক্রমণ থেকে সুরক্ষিত থাকা সম্ভব। অর্থাৎ, এমন এক টিকার প্রয়োজন হবে, যা অ্যান্টিবডির উত্পাদনকে প্ররোচিত করতে পারে এবং দীর্ঘস্থায়ী সুরক্ষা দিতে পারে। এগুলো খুঁজে বের করাও সহজ। এটি আভাস দেয়, ব্যাপক হারে অ্যান্টিবডি শনাক্তকরণ ফলাফল মোটামুটি নির্ভুল হওয়া উচিত। দ্বিতীয় আরেকটি গবেষণার নেতৃত্ব দিয়েছেন যুক্তরাজ্যের মেডিকেল রিসার্চ কাউন্সিলের (এমআরসি) ইমিউনোলজিস্ট তাও দং। তিনি টি-সেল শনাক্তকরণে কাজ করেছেন। টি-সেল শনাক্তকরণের প্রক্রিয়া অবশ্য অ্যান্টিবডির মতো এত আলোচিত নয়। তবে সংক্রমণের বিরুদ্ধে লড়াই এবং দীর্ঘমেয়াদি সুরক্ষায় সমান গুরুত্বপূর্ণ ভূমিকা পালন করে। গবেষণাসংক্রান্ত নিবন্ধ প্রকাশিত হয়েছে ‘নেচার ইমিউনোলজি’ সাময়িকীতে। তাঁরা বলছেন, গবেষণার ক্ষেত্রে কোভিড-১৯ মৃদু সংক্রমণের শিকার ২৮ ব্যক্তির রক্তের নমুনা, ১৪ জন গুরুতর অসুস্থ ও ১৬ জন সুস্থ ব্যক্তির রক্তের নমুনা পরীক্ষা করেছেন। গবেষণা নিবন্ধে বলা হয়, সংক্রমিত ব্যক্তিদের ক্ষেত্রে টি-সেলের তীব্র প্রতিক্রিয়া তাঁরা দেখেছেন। এ ক্ষেত্রে মৃদু ও গুরুতর অসুস্থ ব্যক্তিদের ক্ষেত্রে প্রতিক্রিয়ার ভিন্নতা পাওয়া গেছে।`,\n        ],\n    ],\n    [\"text-generation\", [`আমি রতন এবং আমি`, `তুমি যদি চাও তবে`, `মিথিলা আজকে বড্ড`]],\n    [\"fill-mask\", [`আমি বাংলায় <mask> গাই।`, `আমি <mask> খুব ভালোবাসি। `]],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `প্রথম এশিয়া কাপ ক্রিকেট টুর্নামেন্ট কোথায় অনুষ্ঠিত হয় ?`,\n                context: `প্রথম টুর্নামেন্ট অনুষ্ঠিত হয় ১৯৮৪ সালে সংযুক্ত আরব আমিরাত এর শারজাহ তে যেখানে কাউন্সিলের মূল অফিস ছিল (১৯৯৫ পর্যন্ত)। ভারত শ্রীলঙ্কার সাথে আন্তরিকতাহীন ক্রিকেট সম্পর্কের কারণে ১৯৮৬ সালের টুর্নামেন্ট বর্জন করে। ১৯৯৩ সালে ভারত ও পাকিস্তান এর মধ্যে রাজনৈতিক অস্থিরতার কারণে এটি বাতিল হয়ে যায়। শ্রীলঙ্কা এশিয়া কাপ শুরু থেকে অংশ গ্রহণ করে আসছে। আন্তর্জাতিক ক্রিকেট কাউন্সিল নিয়ম করে দিয়েছে যে এশিয়া কাপের সকল খেলা অনুষ্ঠিত হবে অফিসিয়াল একদিনের আন্তর্জাতিক ক্রিকেট হিসেবে। এসিসি ঘোষনা অনুযায়ী প্রতি দুই বছর পর পর টুর্নামেন্ট অনুষ্ঠিত হয় ২০০৮ সাল থেকে।`,\n            },\n            {\n                text: `ভারতীয় বাঙালি কথাসাহিত্যিক মহাশ্বেতা দেবীর মৃত্যু কবে হয় ?`,\n                context: `২০১৬ সালের ২৩ জুলাই হৃদরোগে আক্রান্ত হয়ে মহাশ্বেতা দেবী কলকাতার বেল ভিউ ক্লিনিকে ভর্তি হন। সেই বছরই ২৮ জুলাই একাধিক অঙ্গ বিকল হয়ে তাঁর মৃত্যু ঘটে। তিনি মধুমেহ, সেপ্টিসেমিয়া ও মূত্র সংক্রমণ রোগেও ভুগছিলেন।`,\n            },\n            {\n                text: `মাস্টারদা সূর্যকুমার সেনের বাবার নাম কী ছিল ?`,\n                context: `সূর্য সেন ১৮৯৪ সালের ২২ মার্চ চট্টগ্রামের রাউজান থানার নোয়াপাড়ায় অর্থনৈতিক ভাবে অস্বচ্ছল পরিবারে জন্মগ্রহণ করেন। তাঁর পিতার নাম রাজমনি সেন এবং মাতার নাম শশী বালা সেন। রাজমনি সেনের দুই ছেলে আর চার মেয়ে। সূর্য সেন তাঁদের পরিবারের চতুর্থ সন্তান। দুই ছেলের নাম সূর্য ও কমল। চার মেয়ের নাম বরদাসুন্দরী, সাবিত্রী, ভানুমতী ও প্রমিলা। শৈশবে পিতা মাতাকে হারানো সূর্য সেন কাকা গৌরমনি সেনের কাছে মানুষ হয়েছেন। সূর্য সেন ছেলেবেলা থেকেই খুব মনোযোগী ভাল ছাত্র ছিলেন এবং ধর্মভাবাপন্ন গম্ভীর প্রকৃতির ছিলেন।`,\n            },\n        ],\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"সে একজন সুখী ব্যক্তি\",\n                sentences: [\"সে হ্যাপি কুকুর\", \"সে খুব সুখী মানুষ\", \"আজ একটি রৌদ্রোজ্জ্বল দিন\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_MN = new Map([\n    [\"text-classification\", [`Би чамд хайртай`]],\n    [\n        \"token-classification\",\n        [\n            `Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`,\n            `Намайг Ганбат гэдэг. Би Увс аймагт төрсөн.`,\n            `Манай улс таван хошуу малтай.`,\n        ],\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Та хаана амьдардаг вэ?`,\n                context: `Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`,\n            },\n            {\n                text: `Таныг хэн гэдэг вэ?`,\n                context: `Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`,\n            },\n            {\n                text: `Миний нэрийг хэн гэдэг вэ?`,\n                context: `Намайг Ганбат гэдэг. Би Увс аймагт төрсөн.`,\n            },\n        ],\n    ],\n    [\"translation\", [`Намайг Дорж гэдэг. Би Улаанбаатарт амьдардаг.`, `Намайг Ганбат гэдэг. Би Увс аймагт төрсөн.`]],\n    [\n        \"summarization\",\n        [\n            `Монгол Улс (1992 оноос хойш) — дорно болон төв Азид оршдог бүрэн эрхт улс. Хойд талаараа Орос, бусад талаараа Хятад улстай хиллэдэг далайд гарцгүй орон. Нийслэл — Улаанбаатар хот. Алтайн нуруунаас Хянган, Соёноос Говь хүрсэн 1 сая 566 мянган км2 уудам нутагтай, дэлхийд нутаг дэвсгэрийн хэмжээгээр 19-рт жагсдаг. 2015 оны эхэнд Монгол Улсын хүн ам 3 сая хүрсэн (135-р олон). Үндсэндээ монгол үндэстэн (95 хувь), мөн хасаг, тува хүн байна. 16-р зуунаас хойш буддын шашин, 20-р зуунаас шашингүй байдал дэлгэрсэн ба албан хэрэгт монгол хэлээр харилцана.`,\n        ],\n    ],\n    [\n        \"text-generation\",\n        [`Намайг Дорж гэдэг. Би`, `Хамгийн сайн дуучин бол`, `Миний дуртай хамтлаг бол`, `Эрт урьдын цагт`],\n    ],\n    [\"fill-mask\", [`Монгол улсын <mask> Улаанбаатар хотоос ярьж байна.`, `Миний амьдралын зорилго бол <mask>.`]],\n    [\n        \"automatic-speech-recognition\",\n        [\n            {\n                label: `Common Voice Train Example`,\n                src: `https://cdn-media.huggingface.co/common_voice/train/common_voice_mn_18577472.wav`,\n            },\n            {\n                label: `Common Voice Test Example`,\n                src: `https://cdn-media.huggingface.co/common_voice/test/common_voice_mn_18577346.wav`,\n            },\n        ],\n    ],\n    [\n        \"text-to-speech\",\n        [\n            `Би Монгол улсын иргэн.`,\n            `Энэхүү жишээ нь цаанаа ямар ч утга агуулаагүй болно`,\n            `Сар шинэдээ сайхан шинэлэж байна уу?`,\n        ],\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Энэ бол аз жаргалтай хүн юм\",\n                sentences: [\"Энэ бол аз жаргалтай нохой юм\", \"Энэ бол маш их аз жаргалтай хүн юм\", \"Өнөөдөр нарлаг өдөр байна\"],\n            },\n        ],\n    ],\n]);\nconst MAPPING_SI = new Map([\n    [\"translation\", [`සිංහල ඉතා අලංකාර භාෂාවකි.`, `මෙම තාක්ෂණය භාවිතා කරන ඔබට ස්තූතියි.`]],\n    [\"fill-mask\", [`මම ගෙදර <mask>.`, `<mask> ඉගෙනීමට ගියාය.`]],\n]);\nconst MAPPING_DE = new Map([\n    [\n        \"question-answering\",\n        [\n            {\n                text: `Wo wohne ich?`,\n                context: `Mein Name ist Wolfgang und ich lebe in Berlin`,\n            },\n            {\n                text: `Welcher Name wird auch verwendet, um den Amazonas-Regenwald auf Englisch zu beschreiben?`,\n                context: `Der Amazonas-Regenwald, auf Englisch auch als Amazonien oder Amazonas-Dschungel bekannt, ist ein feuchter Laubwald, der den größten Teil des Amazonas-Beckens Südamerikas bedeckt. Dieses Becken umfasst 7.000.000 Quadratkilometer (2.700.000 Quadratmeilen), von denen 5.500.000 Quadratkilometer (2.100.000 Quadratmeilen) vom Regenwald bedeckt sind. Diese Region umfasst Gebiete von neun Nationen. Der größte Teil des Waldes befindet sich in Brasilien mit 60% des Regenwaldes, gefolgt von Peru mit 13%, Kolumbien mit 10% und geringen Mengen in Venezuela, Ecuador, Bolivien, Guyana, Suriname und Französisch-Guayana. Staaten oder Abteilungen in vier Nationen enthalten \"Amazonas\" in ihren Namen. Der Amazonas repräsentiert mehr als die Hälfte der verbleibenden Regenwälder des Planeten und umfasst den größten und artenreichsten tropischen Regenwald der Welt mit geschätzten 390 Milliarden Einzelbäumen, die in 16.000 Arten unterteilt sind.`,\n            },\n        ],\n    ],\n    [\n        \"sentence-similarity\",\n        [\n            {\n                source_sentence: \"Das ist eine glückliche Person\",\n                sentences: [\n                    \"Das ist ein glücklicher Hund\",\n                    \"Das ist eine sehr glückliche Person\",\n                    \"Heute ist ein sonniger Tag\",\n                ],\n            },\n        ],\n    ],\n]);\nconst MAPPING_DV = new Map([\n    [\"text-classification\", [`އަހަރެން ގަޔާވޭ. އަހަރެން ލޯބިވޭ`]],\n    [\n        \"token-classification\",\n        [\n            `އަހަރެންގެ ނަމަކީ އަހުމަދު އަދި އަހަރެން ދިރިއުޅެނީ މާލޭގަ`,\n            `އަހަރެންގެ ނަމަކީ ސާރާ އަދި އަހަރެން ދިރިއުޅެނީ އުތީމުގަ`,\n            `އަހަރެންގެ ނަމަކީ އައިޝާ އަދި އަހަރެން ދިރިއުޅެނީ ފޭދޫ، އައްޑޫގަ`,\n        ],\n    ],\n    [\n        \"question-answering\",\n        [\n            {\n                text: `އަހަރެން ދިރިއުޅެނީ ކޮންތާކު؟`,\n                context: `އަހަރެންގެ ނަމަކީ އަހުމަދު އަދި އަހަރެން ދިރިއުޅެނީ މާލޭގަ`,\n            },\n            {\n                text: `އަހަރެން ދިރިއުޅެނީ ކޮންތާކު؟`,\n                context: `އަހަރެންގެ ނަމަކީ ސާރާ އަދި އަހަރެން ދިރިއުޅެނީ އުތީމުގަ`,\n            },\n            {\n                text: `އަހަރެންގެ ނަމަކީ ކޮބާ؟`,\n                context: `އަހަރެންގެ ނަމަކީ އައިޝާ އަދި އަހަރެން ދިރިއުޅެނީ ފޭދޫގަ`,\n            },\n            {\n                text: `އެމޭޒަން ރެއިންފޮރެސްޓް ސިފަކޮށްދިނުމަށް އިނގިރޭސި ބަހުން ބޭނުންކުރާނީ ކޮންނަމެއް؟`,\n                context: `އެމޭޒަން ރެއިންފޮރެސްޓް (ޕޯޗުޖީޒް: ފްލޮރެސްޓާ އެމަސޮނިކާ ނުވަތަ އެމަސޮނިއާ؛ ސްޕެނިޝް: ސެލްވާ އެމަސޮނިކާ, އެމަސޮނިއާ ނޫނީ އާންމުކޮށް އެމަޒޯނިއާ؛ ފްރެންޗް: ފޮރޭ އެމެޒޮނިއެން؛ ޑަޗް: އެމެޒޯންރޭގެވައުޑް)، އިގިރޭސި ބަހުން ބުނާ އެމެޒޯނިއާ ނުވަތަ ދަ އެމޭޒަން ޖަންގަލް އަކީ, ސައުތު އެމެރިކާގެ އެމޭޒަން ބޭސިން ސަރަހައްދުގެ ބޮޑުބައެއްގައި ހިމެނޭ މޮއިސްޓް ބޮރޯޑްލީފް ފޮރެސްޓެއެކެވެ. އެމޭޒަން ބޭސިން ސަރަހައްދުގެ ބޮޑު މިނަކީ 7 މިލިއަން އަކަ ކިލޯމީޓަރ (2.7 މިލިއަން އަކަ މައިލް(. މީގެ ތެރެއިން 5.5 މިލިއަން އަކަ ކިލޯމީޓަރ (2.1 މިލިއަން އަކަ މައިލް) އަކީ މި ފޮރެސްޓެވެ. މި ސަރަހައްދުގައި 9 ގައުމަކަށް ނިސްބަތްވާ ޓެރިޓަރީ ހިމެނެއެވެ.  60% އާއިއެކެ އެންމެ ބޮޑު ބައެއް ނިސްބަތްވަނީ ބްރެޒިލްއަށެވެ. އޭގެ ފަހުތުން 13% އާއެކު ޕެރޫ އާއި 10% އާއެކު ކޮލަމްބިއާ އަދި ކުޑަ ބައެއް ހިމެނޭ ގޮތުން ވެނެޒުއެލާ, އެކްއަޑޯ, ބޮލިވިއާ, ގުޔާނާ, ސުރިނާމް އަދި ފްރެންޗް ގްއާނާ އަށް ވެސް ނިސްބަތްވެއެވެ. މީގެ ތެރެއިން 4 ގައުމެއްގައި \"އެމެޒޮނާސް\" ހިމަނައިގެން ސްޓޭޓް ނުވަތަ ޑިޕާޓްމަންޓް އަކަށް ނަންދީފައިވެއެވެ. މުޅި ދުނިޔޭގައި ބާކީ ހުރި ރެއިންފޮރެސްޓްގެ ތެރެއިން ދެބައިކުޅަ އެއްބަޔަށްވުރެބޮޑުވަރެއް އެމޭޒޮން ރެއިންފޮރެސްޓް ހިއްސާކުރެއެވެ. މިއީ މުޅި ދުނިޔެއިން އެންމޮ ބޮޑު އަދި އެންމެ ބައޮޑައިވަރސް ރެއިންފޮރެސްޓް ޓްރެކްޓެވެ. ލަފާކުރެވޭ ގޮތުން 16 ހާސް ސްޕީޝީސްއަށް ބެހިގެންވާ 390 މިލިއަން ވައްތަރުގެ ގަސް މިތާގައި ހިމެނެއެވެ`,\n            },\n        ],\n    ],\n    [\n        \"translation\",\n        [\n            `އަހަރެންގެ ނަމަކީ އަހުމަދު އަދި އަހަރެން ދިރިއުޅެނީ މާލޭގަ`,\n            `އަހަރެންގެ ނަމަކީ ސާރާ އަދި އަހަރެން ދިރިއުޅެނީ އުތީމުގަ`,\n        ],\n    ],\n    [\n        \"summarization\",\n        [\n            `ޓަވަރުގެ އުސްމިނަކީ 324 މީޓަރު، އެއީ ގާތްގަނޑަކަށް 81 ބުރީގެ އިމާރާތަކާއި އެއްވަރެވެ. އެއީ ޕެރިސްގައި ހުރި އެންމެ އުސް އިމާރާތެވެ. އޭގެ ހަތަރެސްކަނަށް ހުރި ބުޑުގެ ދިގުމިނަކީ ކޮންމެ ފަރާތަކުން 125 މީޓަރެވެ. (410 ފޫޓު) އައިފިލް ޓަވަރު ބިނާކުރި އިރު، ވޮޝިންގްޓަން މޮނިއުމެންޓްގެ އުސްމިން ފަހަނައަޅާ ގޮސް، ދުނިޔޭގައި މީހުން އުފެއްދި ތަންތަނުގެ ތެރެއިން އެންމެ އުސް ތަނުގެ ލަގަބު ލިބުނެވެ. އަދި 1930 ގައި ނިއު ޔޯކްގެ ކްރައިސްލަރ ބިލްޑިންގް ބިނާކުރުމާއި ހަމައަށް 41 އަހަރު ވަންދެން މިލަގަބު ހިފެހެއްޓިއެވެ. މިއީ 300 މީޓަރަށް ވުރެ އުސްކޮށް އިމާރާތްކުރެވުނު ފުރަތަމަ ތަނެވެ. 1957 ގައި ޓަވަރުގެ އެންމެ މަތީގައި ހަރުކުރެވުނު ބްރޯޑްކާސްޓިންގ އޭރިއަލްގެ ސަބަބުން މިހާރު މި ޓަވަރު ކްރައިސްލަރ ބިލްޑިންގއަށް ވުރެ 5.2 މީޓަރ (17 ފޫޓު) އުހެވެ. މި ޓްރާންސްމިޓަރު ނުލާ، އައިފިލް ޓަވަރަކީ، މިލާއު ވިއާޑަކްޓަށް ފަހު ފްރާންސްގައި ހުރި 2 ވަނައަށް އެންމެ އުސް ފްރީސްޓޭންޑިންގ އިމާރާތެވެ`,\n        ],\n    ],\n    [\n        \"text-generation\",\n        [\n            `އަހަރެންގެ ނަމަކީ ޔޫސުފް އަދި އަހަރެންގެ މައިގަނޑު`,\n            `އަހަރެންގެ ނަމަކީ މަރިއަމް، އަހަރެން އެންމެ ގަޔާވާ`,\n            `އަހަރެންގެ ނަމަކީ ފާތުމަތު އަދި އަހަރެން`,\n            `،އެއް ޒަމާނެއްގައި`,\n        ],\n    ],\n    [\"fill-mask\", [`.<mask> މާލެ އަކީ ދިވެހިރާއްޖޭގެ`, `ގަރުދިޔައަކީ ދިވެހިންގެ މެދުގައި <mask> ކެއުމެއް.`]],\n]);\nexport const MAPPING_DEFAULT_WIDGET = new Map([\n    [\"en\", MAPPING_EN],\n    [\"zh\", MAPPING_ZH],\n    [\"fr\", MAPPING_FR],\n    [\"es\", MAPPING_ES],\n    [\"ru\", MAPPING_RU],\n    [\"uk\", MAPPING_UK],\n    [\"it\", MAPPING_IT],\n    [\"fa\", MAPPING_FA],\n    [\"ar\", MAPPING_AR],\n    [\"bn\", MAPPING_BN],\n    [\"mn\", MAPPING_MN],\n    [\"si\", MAPPING_SI],\n    [\"de\", MAPPING_DE],\n    [\"dv\", MAPPING_DV],\n]);\n", "export const MODALITIES = [\"multimodal\", \"nlp\", \"cv\", \"audio\", \"tabular\", \"rl\", \"other\"];\nexport const MODALITY_LABELS = {\n    multimodal: \"Multimodal\",\n    nlp: \"Natural Language Processing\",\n    audio: \"Audio\",\n    cv: \"Computer Vision\",\n    rl: \"Reinforcement Learning\",\n    tabular: \"Tabular\",\n    other: \"Other\",\n};\n/// Coarse-grained taxonomy of tasks\n///\n/// This type is used in multiple places in the Hugging Face\n/// ecosystem:\n///  - To determine which widget to show.\n///  - To determine which endpoint of Inference Endpoints to use.\n///  - As filters at the left of models and datasets page.\n///\n/// Note that this is sensitive to order.\n/// For each domain, the order should be of decreasing specificity.\n/// This will impact the default pipeline tag of a model when not\n/// specified.\nexport const PIPELINE_DATA = {\n    \"text-classification\": {\n        name: \"Text Classification\",\n        subtasks: [\n            {\n                type: \"acceptability-classification\",\n                name: \"Acceptability Classification\",\n            },\n            {\n                type: \"entity-linking-classification\",\n                name: \"Entity Linking Classification\",\n            },\n            {\n                type: \"fact-checking\",\n                name: \"Fact Checking\",\n            },\n            {\n                type: \"intent-classification\",\n                name: \"Intent Classification\",\n            },\n            {\n                type: \"language-identification\",\n                name: \"Language Identification\",\n            },\n            {\n                type: \"multi-class-classification\",\n                name: \"Multi Class Classification\",\n            },\n            {\n                type: \"multi-label-classification\",\n                name: \"Multi Label Classification\",\n            },\n            {\n                type: \"multi-input-text-classification\",\n                name: \"Multi-input Text Classification\",\n            },\n            {\n                type: \"natural-language-inference\",\n                name: \"Natural Language Inference\",\n            },\n            {\n                type: \"semantic-similarity-classification\",\n                name: \"Semantic Similarity Classification\",\n            },\n            {\n                type: \"sentiment-classification\",\n                name: \"Sentiment Classification\",\n            },\n            {\n                type: \"topic-classification\",\n                name: \"Topic Classification\",\n            },\n            {\n                type: \"semantic-similarity-scoring\",\n                name: \"Semantic Similarity Scoring\",\n            },\n            {\n                type: \"sentiment-scoring\",\n                name: \"Sentiment Scoring\",\n            },\n            {\n                type: \"sentiment-analysis\",\n                name: \"Sentiment Analysis\",\n            },\n            {\n                type: \"hate-speech-detection\",\n                name: \"Hate Speech Detection\",\n            },\n            {\n                type: \"text-scoring\",\n                name: \"Text Scoring\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"orange\",\n    },\n    \"token-classification\": {\n        name: \"Token Classification\",\n        subtasks: [\n            {\n                type: \"named-entity-recognition\",\n                name: \"Named Entity Recognition\",\n            },\n            {\n                type: \"part-of-speech\",\n                name: \"Part of Speech\",\n            },\n            {\n                type: \"parsing\",\n                name: \"Parsing\",\n            },\n            {\n                type: \"lemmatization\",\n                name: \"Lemmatization\",\n            },\n            {\n                type: \"word-sense-disambiguation\",\n                name: \"Word Sense Disambiguation\",\n            },\n            {\n                type: \"coreference-resolution\",\n                name: \"Coreference-resolution\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"blue\",\n    },\n    \"table-question-answering\": {\n        name: \"Table Question Answering\",\n        modality: \"nlp\",\n        color: \"green\",\n    },\n    \"question-answering\": {\n        name: \"Question Answering\",\n        subtasks: [\n            {\n                type: \"extractive-qa\",\n                name: \"Extractive QA\",\n            },\n            {\n                type: \"open-domain-qa\",\n                name: \"Open Domain QA\",\n            },\n            {\n                type: \"closed-domain-qa\",\n                name: \"Closed Domain QA\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"blue\",\n    },\n    \"zero-shot-classification\": {\n        name: \"Zero-Shot Classification\",\n        modality: \"nlp\",\n        color: \"yellow\",\n    },\n    translation: {\n        name: \"Translation\",\n        modality: \"nlp\",\n        color: \"green\",\n    },\n    summarization: {\n        name: \"Summarization\",\n        subtasks: [\n            {\n                type: \"news-articles-summarization\",\n                name: \"News Articles Summarization\",\n            },\n            {\n                type: \"news-articles-headline-generation\",\n                name: \"News Articles Headline Generation\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"indigo\",\n    },\n    \"feature-extraction\": {\n        name: \"Feature Extraction\",\n        modality: \"nlp\",\n        color: \"red\",\n    },\n    \"text-generation\": {\n        name: \"Text Generation\",\n        subtasks: [\n            {\n                type: \"dialogue-modeling\",\n                name: \"Dialogue Modeling\",\n            },\n            {\n                type: \"dialogue-generation\",\n                name: \"Dialogue Generation\",\n            },\n            {\n                type: \"conversational\",\n                name: \"Conversational\",\n            },\n            {\n                type: \"language-modeling\",\n                name: \"Language Modeling\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"indigo\",\n    },\n    \"text2text-generation\": {\n        name: \"Text2Text Generation\",\n        subtasks: [\n            {\n                type: \"text-simplification\",\n                name: \"Text simplification\",\n            },\n            {\n                type: \"explanation-generation\",\n                name: \"Explanation Generation\",\n            },\n            {\n                type: \"abstractive-qa\",\n                name: \"Abstractive QA\",\n            },\n            {\n                type: \"open-domain-abstractive-qa\",\n                name: \"Open Domain Abstractive QA\",\n            },\n            {\n                type: \"closed-domain-qa\",\n                name: \"Closed Domain QA\",\n            },\n            {\n                type: \"open-book-qa\",\n                name: \"Open Book QA\",\n            },\n            {\n                type: \"closed-book-qa\",\n                name: \"Closed Book QA\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"indigo\",\n    },\n    \"fill-mask\": {\n        name: \"Fill-Mask\",\n        subtasks: [\n            {\n                type: \"slot-filling\",\n                name: \"Slot Filling\",\n            },\n            {\n                type: \"masked-language-modeling\",\n                name: \"Masked Language Modeling\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"red\",\n    },\n    \"sentence-similarity\": {\n        name: \"Sentence Similarity\",\n        modality: \"nlp\",\n        color: \"yellow\",\n    },\n    \"text-to-speech\": {\n        name: \"Text-to-Speech\",\n        modality: \"audio\",\n        color: \"yellow\",\n    },\n    \"text-to-audio\": {\n        name: \"Text-to-Audio\",\n        modality: \"audio\",\n        color: \"yellow\",\n    },\n    \"automatic-speech-recognition\": {\n        name: \"Automatic Speech Recognition\",\n        modality: \"audio\",\n        color: \"yellow\",\n    },\n    \"audio-to-audio\": {\n        name: \"Audio-to-Audio\",\n        modality: \"audio\",\n        color: \"blue\",\n    },\n    \"audio-classification\": {\n        name: \"Audio Classification\",\n        subtasks: [\n            {\n                type: \"keyword-spotting\",\n                name: \"Keyword Spotting\",\n            },\n            {\n                type: \"speaker-identification\",\n                name: \"Speaker Identification\",\n            },\n            {\n                type: \"audio-intent-classification\",\n                name: \"Audio Intent Classification\",\n            },\n            {\n                type: \"audio-emotion-recognition\",\n                name: \"Audio Emotion Recognition\",\n            },\n            {\n                type: \"audio-language-identification\",\n                name: \"Audio Language Identification\",\n            },\n        ],\n        modality: \"audio\",\n        color: \"green\",\n    },\n    \"audio-text-to-text\": {\n        name: \"Audio-Text-to-Text\",\n        modality: \"multimodal\",\n        color: \"red\",\n        hideInDatasets: true,\n    },\n    \"voice-activity-detection\": {\n        name: \"Voice Activity Detection\",\n        modality: \"audio\",\n        color: \"red\",\n    },\n    \"depth-estimation\": {\n        name: \"Depth Estimation\",\n        modality: \"cv\",\n        color: \"yellow\",\n    },\n    \"image-classification\": {\n        name: \"Image Classification\",\n        subtasks: [\n            {\n                type: \"multi-label-image-classification\",\n                name: \"Multi Label Image Classification\",\n            },\n            {\n                type: \"multi-class-image-classification\",\n                name: \"Multi Class Image Classification\",\n            },\n        ],\n        modality: \"cv\",\n        color: \"blue\",\n    },\n    \"object-detection\": {\n        name: \"Object Detection\",\n        subtasks: [\n            {\n                type: \"face-detection\",\n                name: \"Face Detection\",\n            },\n            {\n                type: \"vehicle-detection\",\n                name: \"Vehicle Detection\",\n            },\n        ],\n        modality: \"cv\",\n        color: \"yellow\",\n    },\n    \"image-segmentation\": {\n        name: \"Image Segmentation\",\n        subtasks: [\n            {\n                type: \"instance-segmentation\",\n                name: \"Instance Segmentation\",\n            },\n            {\n                type: \"semantic-segmentation\",\n                name: \"Semantic Segmentation\",\n            },\n            {\n                type: \"panoptic-segmentation\",\n                name: \"Panoptic Segmentation\",\n            },\n        ],\n        modality: \"cv\",\n        color: \"green\",\n    },\n    \"text-to-image\": {\n        name: \"Text-to-Image\",\n        modality: \"cv\",\n        color: \"yellow\",\n    },\n    \"image-to-text\": {\n        name: \"Image-to-Text\",\n        subtasks: [\n            {\n                type: \"image-captioning\",\n                name: \"Image Captioning\",\n            },\n        ],\n        modality: \"cv\",\n        color: \"red\",\n    },\n    \"image-to-image\": {\n        name: \"Image-to-Image\",\n        subtasks: [\n            {\n                type: \"image-inpainting\",\n                name: \"Image Inpainting\",\n            },\n            {\n                type: \"image-colorization\",\n                name: \"Image Colorization\",\n            },\n            {\n                type: \"super-resolution\",\n                name: \"Super Resolution\",\n            },\n        ],\n        modality: \"cv\",\n        color: \"indigo\",\n    },\n    \"image-to-video\": {\n        name: \"Image-to-Video\",\n        modality: \"cv\",\n        color: \"indigo\",\n    },\n    \"unconditional-image-generation\": {\n        name: \"Unconditional Image Generation\",\n        modality: \"cv\",\n        color: \"green\",\n    },\n    \"video-classification\": {\n        name: \"Video Classification\",\n        modality: \"cv\",\n        color: \"blue\",\n    },\n    \"reinforcement-learning\": {\n        name: \"Reinforcement Learning\",\n        modality: \"rl\",\n        color: \"red\",\n    },\n    robotics: {\n        name: \"Robotics\",\n        modality: \"rl\",\n        subtasks: [\n            {\n                type: \"grasping\",\n                name: \"Grasping\",\n            },\n            {\n                type: \"task-planning\",\n                name: \"Task Planning\",\n            },\n        ],\n        color: \"blue\",\n    },\n    \"tabular-classification\": {\n        name: \"Tabular Classification\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"tabular-multi-class-classification\",\n                name: \"Tabular Multi Class Classification\",\n            },\n            {\n                type: \"tabular-multi-label-classification\",\n                name: \"Tabular Multi Label Classification\",\n            },\n        ],\n        color: \"blue\",\n    },\n    \"tabular-regression\": {\n        name: \"Tabular Regression\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"tabular-single-column-regression\",\n                name: \"Tabular Single Column Regression\",\n            },\n        ],\n        color: \"blue\",\n    },\n    \"tabular-to-text\": {\n        name: \"Tabular to Text\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"rdf-to-text\",\n                name: \"RDF to text\",\n            },\n        ],\n        color: \"blue\",\n        hideInModels: true,\n    },\n    \"table-to-text\": {\n        name: \"Table to Text\",\n        modality: \"nlp\",\n        color: \"blue\",\n        hideInModels: true,\n    },\n    \"multiple-choice\": {\n        name: \"Multiple Choice\",\n        subtasks: [\n            {\n                type: \"multiple-choice-qa\",\n                name: \"Multiple Choice QA\",\n            },\n            {\n                type: \"multiple-choice-coreference-resolution\",\n                name: \"Multiple Choice Coreference Resolution\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"blue\",\n        hideInModels: true,\n    },\n    \"text-ranking\": {\n        name: \"Text Ranking\",\n        modality: \"nlp\",\n        color: \"red\",\n    },\n    \"text-retrieval\": {\n        name: \"Text Retrieval\",\n        subtasks: [\n            {\n                type: \"document-retrieval\",\n                name: \"Document Retrieval\",\n            },\n            {\n                type: \"utterance-retrieval\",\n                name: \"Utterance Retrieval\",\n            },\n            {\n                type: \"entity-linking-retrieval\",\n                name: \"Entity Linking Retrieval\",\n            },\n            {\n                type: \"fact-checking-retrieval\",\n                name: \"Fact Checking Retrieval\",\n            },\n        ],\n        modality: \"nlp\",\n        color: \"indigo\",\n        hideInModels: true,\n    },\n    \"time-series-forecasting\": {\n        name: \"Time Series Forecasting\",\n        modality: \"tabular\",\n        subtasks: [\n            {\n                type: \"univariate-time-series-forecasting\",\n                name: \"Univariate Time Series Forecasting\",\n            },\n            {\n                type: \"multivariate-time-series-forecasting\",\n                name: \"Multivariate Time Series Forecasting\",\n            },\n        ],\n        color: \"blue\",\n    },\n    \"text-to-video\": {\n        name: \"Text-to-Video\",\n        modality: \"cv\",\n        color: \"green\",\n    },\n    \"image-text-to-text\": {\n        name: \"Image-Text-to-Text\",\n        modality: \"multimodal\",\n        color: \"red\",\n        hideInDatasets: true,\n    },\n    \"visual-question-answering\": {\n        name: \"Visual Question Answering\",\n        subtasks: [\n            {\n                type: \"visual-question-answering\",\n                name: \"Visual Question Answering\",\n            },\n        ],\n        modality: \"multimodal\",\n        color: \"red\",\n    },\n    \"document-question-answering\": {\n        name: \"Document Question Answering\",\n        subtasks: [\n            {\n                type: \"document-question-answering\",\n                name: \"Document Question Answering\",\n            },\n        ],\n        modality: \"multimodal\",\n        color: \"blue\",\n        hideInDatasets: true,\n    },\n    \"zero-shot-image-classification\": {\n        name: \"Zero-Shot Image Classification\",\n        modality: \"cv\",\n        color: \"yellow\",\n    },\n    \"graph-ml\": {\n        name: \"Graph Machine Learning\",\n        modality: \"other\",\n        color: \"green\",\n    },\n    \"mask-generation\": {\n        name: \"Mask Generation\",\n        modality: \"cv\",\n        color: \"indigo\",\n    },\n    \"zero-shot-object-detection\": {\n        name: \"Zero-Shot Object Detection\",\n        modality: \"cv\",\n        color: \"yellow\",\n    },\n    \"text-to-3d\": {\n        name: \"Text-to-3D\",\n        modality: \"cv\",\n        color: \"yellow\",\n    },\n    \"image-to-3d\": {\n        name: \"Image-to-3D\",\n        modality: \"cv\",\n        color: \"green\",\n    },\n    \"image-feature-extraction\": {\n        name: \"Image Feature Extraction\",\n        modality: \"cv\",\n        color: \"indigo\",\n    },\n    \"video-text-to-text\": {\n        name: \"Video-Text-to-Text\",\n        modality: \"multimodal\",\n        color: \"blue\",\n        hideInDatasets: false,\n    },\n    \"keypoint-detection\": {\n        name: \"Keypoint Detection\",\n        subtasks: [\n            {\n                type: \"pose-estimation\",\n                name: \"Pose Estimation\",\n            },\n        ],\n        modality: \"cv\",\n        color: \"red\",\n        hideInDatasets: true,\n    },\n    \"visual-document-retrieval\": {\n        name: \"Visual Document Retrieval\",\n        modality: \"multimodal\",\n        color: \"yellow\",\n        hideInDatasets: true,\n    },\n    \"any-to-any\": {\n        name: \"Any-to-Any\",\n        modality: \"multimodal\",\n        color: \"yellow\",\n        hideInDatasets: true,\n    },\n    other: {\n        name: \"Other\",\n        modality: \"other\",\n        color: \"blue\",\n        hideInModels: true,\n        hideInDatasets: true,\n    },\n};\nexport const PIPELINE_TYPES = Object.keys(PIPELINE_DATA);\nexport const SUBTASK_TYPES = Object.values(PIPELINE_DATA)\n    .flatMap((data) => (\"subtasks\" in data ? data.subtasks : []))\n    .map((s) => s.type);\nexport const PIPELINE_TYPES_SET = new Set(PIPELINE_TYPES);\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A benchmark of 10 different audio tasks.\",\n            id: \"s3prl/superb\",\n        },\n        {\n            description: \"A dataset of YouTube clips and their sound categories.\",\n            id: \"agkphysics/AudioSet\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"audio.wav\",\n                type: \"audio\",\n            },\n        ],\n        outputs: [\n            {\n                data: [\n                    {\n                        label: \"Up\",\n                        score: 0.2,\n                    },\n                    {\n                        label: \"Down\",\n                        score: 0.8,\n                    },\n                ],\n                type: \"chart\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\",\n        },\n        {\n            description: \"\",\n            id: \"recall\",\n        },\n        {\n            description: \"\",\n            id: \"precision\",\n        },\n        {\n            description: \"\",\n            id: \"f1\",\n        },\n    ],\n    models: [\n        {\n            description: \"An easy-to-use model for command recognition.\",\n            id: \"speechbrain/google_speech_command_xvector\",\n        },\n        {\n            description: \"An emotion recognition model.\",\n            id: \"ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition\",\n        },\n        {\n            description: \"A language identification model.\",\n            id: \"facebook/mms-lid-126\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can classify music into different genre.\",\n            id: \"kurianbenoy/audioclassification\",\n        },\n    ],\n    summary: \"Audio classification is the task of assigning a label or class to a given audio. It can be used for recognizing which command a user is giving or the emotion of a statement, as well as identifying a speaker.\",\n    widgetModels: [\"MIT/ast-finetuned-audioset-10-10-0.4593\"],\n    youtubeId: \"KWwzcmG98Ds\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"512-element X-vector embeddings of speakers from CMU ARCTIC dataset.\",\n            id: \"Matthijs/cmu-arctic-xvectors\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"input.wav\",\n                type: \"audio\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"label-0.wav\",\n                type: \"audio\",\n            },\n            {\n                filename: \"label-1.wav\",\n                type: \"audio\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The Signal-to-Noise ratio is the relationship between the target signal level and the background noise level. It is calculated as the logarithm of the target signal divided by the background noise, in decibels.\",\n            id: \"snri\",\n        },\n        {\n            description: \"The Signal-to-Distortion ratio is the relationship between the target signal and the sum of noise, interference, and artifact errors\",\n            id: \"sdri\",\n        },\n    ],\n    models: [\n        {\n            description: \"A speech enhancement model.\",\n            id: \"ResembleAI/resemble-enhance\",\n        },\n        {\n            description: \"A model that can change the voice in a speech recording.\",\n            id: \"microsoft/speecht5_vc\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application for speech separation.\",\n            id: \"younver/speechbrain-speech-separation\",\n        },\n        {\n            description: \"An application for audio style transfer.\",\n            id: \"nakas/audio-diffusion_style_transfer\",\n        },\n    ],\n    summary: \"Audio-to-Audio is a family of tasks in which the input is an audio and the output is one or multiple generated audios. Some example tasks are speech enhancement and source separation.\",\n    widgetModels: [\"speechbrain/sepformer-wham\"],\n    youtubeId: \"iohj7nCCYoM\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"31,175 hours of multilingual audio-text dataset in 108 languages.\",\n            id: \"mozilla-foundation/common_voice_17_0\",\n        },\n        {\n            description: \"Multilingual and diverse audio dataset with 101k hours of audio.\",\n            id: \"amphion/Emilia-Dataset\",\n        },\n        {\n            description: \"A dataset with 44.6k hours of English speaker data and 6k hours of other language speakers.\",\n            id: \"parler-tts/mls_eng\",\n        },\n        {\n            description: \"A multilingual audio dataset with 370K hours of audio.\",\n            id: \"espnet/yodas\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"input.flac\",\n                type: \"audio\",\n            },\n        ],\n        outputs: [\n            {\n                /// GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES I\n                label: \"Transcript\",\n                content: \"Going along slushy country roads and speaking to damp audiences in...\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"wer\",\n        },\n        {\n            description: \"\",\n            id: \"cer\",\n        },\n    ],\n    models: [\n        {\n            description: \"A powerful ASR model by OpenAI.\",\n            id: \"openai/whisper-large-v3\",\n        },\n        {\n            description: \"A good generic speech model by MetaAI for fine-tuning.\",\n            id: \"facebook/w2v-bert-2.0\",\n        },\n        {\n            description: \"An end-to-end model that performs ASR and Speech Translation by MetaAI.\",\n            id: \"facebook/seamless-m4t-v2-large\",\n        },\n        {\n            description: \"A powerful multilingual ASR and Speech Translation model by Nvidia.\",\n            id: \"nvidia/canary-1b\",\n        },\n        {\n            description: \"Powerful speaker diarization model.\",\n            id: \"pyannote/speaker-diarization-3.1\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A powerful general-purpose speech recognition application.\",\n            id: \"hf-audio/whisper-large-v3\",\n        },\n        {\n            description: \"Latest ASR model from Useful Sensors.\",\n            id: \"mrfakename/Moonshinex\",\n        },\n        {\n            description: \"A high quality speech and text translation model by Meta.\",\n            id: \"facebook/seamless_m4t\",\n        },\n        {\n            description: \"A powerful multilingual ASR and Speech Translation model by Nvidia\",\n            id: \"nvidia/canary-1b\",\n        },\n    ],\n    summary: \"Automatic Speech Recognition (ASR), also known as Speech to Text (STT), is the task of transcribing a given audio to text. It has many applications, such as voice user interfaces.\",\n    widgetModels: [\"openai/whisper-large-v3\"],\n    youtubeId: \"TksaY_FDgnk\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Largest document understanding dataset.\",\n            id: \"HuggingFaceM4/Docmatix\",\n        },\n        {\n            description: \"Dataset from the 2020 DocVQA challenge. The documents are taken from the UCSF Industry Documents Library.\",\n            id: \"eliolio/docvqa\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Question\",\n                content: \"What is the idea behind the consumer relations efficiency team?\",\n                type: \"text\",\n            },\n            {\n                filename: \"document-question-answering-input.png\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"Balance cost efficiency with quality customer service\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The evaluation metric for the DocVQA challenge is the Average Normalized Levenshtein Similarity (ANLS). This metric is flexible to character regognition errors and compares the predicted answer with the ground truth answer.\",\n            id: \"anls\",\n        },\n        {\n            description: \"Exact Match is a metric based on the strict character match of the predicted answer and the right answer. For answers predicted correctly, the Exact Match will be 1. Even if only one character is different, Exact Match will be 0\",\n            id: \"exact-match\",\n        },\n    ],\n    models: [\n        {\n            description: \"A robust document question answering model.\",\n            id: \"impira/layoutlm-document-qa\",\n        },\n        {\n            description: \"A document question answering model specialized in invoices.\",\n            id: \"impira/layoutlm-invoices\",\n        },\n        {\n            description: \"A special model for OCR-free document question answering.\",\n            id: \"microsoft/udop-large\",\n        },\n        {\n            description: \"A powerful model for document question answering.\",\n            id: \"google/pix2struct-docvqa-large\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A robust document question answering application.\",\n            id: \"impira/docquery\",\n        },\n        {\n            description: \"An application that can answer questions from invoices.\",\n            id: \"impira/invoices\",\n        },\n        {\n            description: \"An application to compare different document question answering models.\",\n            id: \"merve/compare_docvqa_models\",\n        },\n    ],\n    summary: \"Document Question Answering (also known as Document Visual Question Answering) is the task of answering questions on document images. Document question answering models take a (document, question) pair as input and return an answer in natural language. Models usually rely on multi-modal features, combining text, position of words (bounding-boxes) and image.\",\n    widgetModels: [\"impira/layoutlm-invoices\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Wikipedia dataset containing cleaned articles of all languages. Can be used to train `feature-extraction` models.\",\n            id: \"wikipedia\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"India, officially the Republic of India, is a country in South Asia.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                table: [\n                    [\"Dimension 1\", \"Dimension 2\", \"Dimension 3\"],\n                    [\"2.583383083343506\", \"2.757075071334839\", \"0.9023529887199402\"],\n                    [\"8.29393482208252\", \"1.1071064472198486\", \"2.03399395942688\"],\n                    [\"-0.7754912972450256\", \"-1.647324562072754\", \"-0.6113331913948059\"],\n                    [\"0.07087723910808563\", \"1.5942802429199219\", \"1.4610432386398315\"],\n                ],\n                type: \"tabular\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A powerful feature extraction model for natural language processing tasks.\",\n            id: \"thenlper/gte-large\",\n        },\n        {\n            description: \"A strong feature extraction model for retrieval.\",\n            id: \"Alibaba-NLP/gte-Qwen1.5-7B-instruct\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard to rank text feature extraction models based on a benchmark.\",\n            id: \"mteb/leaderboard\",\n        },\n        {\n            description: \"A leaderboard to rank best feature extraction models based on human feedback.\",\n            id: \"mteb/arena\",\n        },\n    ],\n    summary: \"Feature extraction is the task of extracting features learnt in a model.\",\n    widgetModels: [\"facebook/bart-base\"],\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A common dataset that is used to train models for many languages.\",\n            id: \"wikipedia\",\n        },\n        {\n            description: \"A large English dataset with text crawled from the web.\",\n            id: \"c4\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"The <mask> barked at me\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"wolf\",\n                        score: 0.487,\n                    },\n                    {\n                        label: \"dog\",\n                        score: 0.061,\n                    },\n                    {\n                        label: \"cat\",\n                        score: 0.058,\n                    },\n                    {\n                        label: \"fox\",\n                        score: 0.047,\n                    },\n                    {\n                        label: \"squirrel\",\n                        score: 0.025,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Cross Entropy is a metric that calculates the difference between two probability distributions. Each probability distribution is the distribution of predicted words\",\n            id: \"cross_entropy\",\n        },\n        {\n            description: \"Perplexity is the exponential of the cross-entropy loss. It evaluates the probabilities assigned to the next word by the model. Lower perplexity indicates better performance\",\n            id: \"perplexity\",\n        },\n    ],\n    models: [\n        {\n            description: \"State-of-the-art masked language model.\",\n            id: \"answerdotai/ModernBERT-large\",\n        },\n        {\n            description: \"A multilingual model trained on 100 languages.\",\n            id: \"FacebookAI/xlm-roberta-base\",\n        },\n    ],\n    spaces: [],\n    summary: \"Masked language modeling is the task of masking some of the words in a sentence and predicting which words should replace those masks. These models are useful when we want to get a statistical understanding of the language in which the model is trained in.\",\n    widgetModels: [\"distilroberta-base\"],\n    youtubeId: \"mqElG5QJWUg\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"Benchmark dataset used for image classification with images that belong to 100 classes.\",\n            id: \"cifar100\",\n        },\n        {\n            // TODO write proper description\n            description: \"Dataset consisting of images of garments.\",\n            id: \"fashion_mnist\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-classification-input.jpeg\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Egyptian cat\",\n                        score: 0.514,\n                    },\n                    {\n                        label: \"Tabby cat\",\n                        score: 0.193,\n                    },\n                    {\n                        label: \"Tiger cat\",\n                        score: 0.068,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\",\n        },\n        {\n            description: \"\",\n            id: \"recall\",\n        },\n        {\n            description: \"\",\n            id: \"precision\",\n        },\n        {\n            description: \"\",\n            id: \"f1\",\n        },\n    ],\n    models: [\n        {\n            description: \"A strong image classification model.\",\n            id: \"google/vit-base-patch16-224\",\n        },\n        {\n            description: \"A robust image classification model.\",\n            id: \"facebook/deit-base-distilled-patch16-224\",\n        },\n        {\n            description: \"A strong image classification model.\",\n            id: \"facebook/convnext-large-224\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard to evaluate different image classification models.\",\n            id: \"timm/leaderboard\",\n        },\n    ],\n    summary: \"Image classification is the task of assigning a label or class to an entire image. Images are expected to have only one class for each image. Image classification models take an image as input and return a prediction about which class the image belongs to.\",\n    widgetModels: [\"google/vit-base-patch16-224\"],\n    youtubeId: \"tjAIM7BOYhw\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"ImageNet-1K is a image classification dataset in which images are used to train image-feature-extraction models.\",\n            id: \"imagenet-1k\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"mask-generation-input.png\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                table: [\n                    [\"Dimension 1\", \"Dimension 2\", \"Dimension 3\"],\n                    [\"0.21236686408519745\", \"1.0919708013534546\", \"0.8512550592422485\"],\n                    [\"0.809657871723175\", \"-0.18544459342956543\", \"-0.7851548194885254\"],\n                    [\"1.3103108406066895\", \"-0.2479034662246704\", \"-0.9107287526130676\"],\n                    [\"1.8536205291748047\", \"-0.36419737339019775\", \"0.09717650711536407\"],\n                ],\n                type: \"tabular\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A powerful image feature extraction model.\",\n            id: \"timm/vit_large_patch14_dinov2.lvd142m\",\n        },\n        {\n            description: \"A strong image feature extraction model.\",\n            id: \"nvidia/MambaVision-T-1K\",\n        },\n        {\n            description: \"A robust image feature extraction model.\",\n            id: \"facebook/dino-vitb16\",\n        },\n        {\n            description: \"Cutting-edge image feature extraction model.\",\n            id: \"apple/aimv2-large-patch14-336-distilled\",\n        },\n        {\n            description: \"Strong image feature extraction model that can be used on images and documents.\",\n            id: \"OpenGVLab/InternViT-6B-448px-V1-2\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard to evaluate different image-feature-extraction models on classification performances\",\n            id: \"timm/leaderboard\",\n        },\n    ],\n    summary: \"Image feature extraction is the task of extracting features learnt in a computer vision model.\",\n    widgetModels: [],\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Synthetic dataset, for image relighting\",\n            id: \"VIDIT\",\n        },\n        {\n            description: \"Multiple images of celebrities, used for facial expression translation\",\n            id: \"huggan/CelebA-faces\",\n        },\n        {\n            description: \"12M image-caption pairs.\",\n            id: \"Spawning/PD12M\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-to-image-input.jpeg\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"image-to-image-output.png\",\n                type: \"img\",\n            },\n        ],\n    },\n    isPlaceholder: false,\n    metrics: [\n        {\n            description: \"Peak Signal to Noise Ratio (PSNR) is an approximation of the human perception, considering the ratio of the absolute intensity with respect to the variations. Measured in dB, a high value indicates a high fidelity.\",\n            id: \"PSNR\",\n        },\n        {\n            description: \"Structural Similarity Index (SSIM) is a perceptual metric which compares the luminance, contrast and structure of two images. The values of SSIM range between -1 and 1, and higher values indicate closer resemblance to the original image.\",\n            id: \"SSIM\",\n        },\n        {\n            description: \"Inception Score (IS) is an analysis of the labels predicted by an image classification model when presented with a sample of the generated images.\",\n            id: \"IS\",\n        },\n    ],\n    models: [\n        {\n            description: \"An image-to-image model to improve image resolution.\",\n            id: \"fal/AuraSR-v2\",\n        },\n        {\n            description: \"A model that increases the resolution of an image.\",\n            id: \"keras-io/super-resolution\",\n        },\n        {\n            description: \"A model for applying edits to images through image controls.\",\n            id: \"Yuanshi/OminiControl\",\n        },\n        {\n            description: \"A model that generates images based on segments in the input image and the text prompt.\",\n            id: \"mfidabel/controlnet-segment-anything\",\n        },\n        {\n            description: \"Strong model for inpainting and outpainting.\",\n            id: \"black-forest-labs/FLUX.1-Fill-dev\",\n        },\n        {\n            description: \"Strong model for image editing using depth maps.\",\n            id: \"black-forest-labs/FLUX.1-Depth-dev-lora\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"Image enhancer application for low light.\",\n            id: \"keras-io/low-light-image-enhancement\",\n        },\n        {\n            description: \"Style transfer application.\",\n            id: \"keras-io/neural-style-transfer\",\n        },\n        {\n            description: \"An application that generates images based on segment control.\",\n            id: \"mfidabel/controlnet-segment-anything\",\n        },\n        {\n            description: \"Image generation application that takes image control and text prompt.\",\n            id: \"hysts/ControlNet\",\n        },\n        {\n            description: \"Colorize any image using this app.\",\n            id: \"ioclab/brightness-controlnet\",\n        },\n        {\n            description: \"Edit images with instructions.\",\n            id: \"timbrooks/instruct-pix2pix\",\n        },\n    ],\n    summary: \"Image-to-image is the task of transforming an input image through a variety of possible manipulations and enhancements, such as super-resolution, image inpainting, colorization, and more.\",\n    widgetModels: [\"stabilityai/stable-diffusion-2-inpainting\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"Dataset from 12M image-text of Reddit\",\n            id: \"red_caps\",\n        },\n        {\n            // TODO write proper description\n            description: \"Dataset from 3.3M images of Google\",\n            id: \"datasets/conceptual_captions\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"savanna.jpg\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Detailed description\",\n                content: \"a herd of giraffes and zebras grazing in a field\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A robust image captioning model.\",\n            id: \"Salesforce/blip2-opt-2.7b\",\n        },\n        {\n            description: \"A powerful and accurate image-to-text model that can also localize concepts in images.\",\n            id: \"microsoft/kosmos-2-patch14-224\",\n        },\n        {\n            description: \"A strong optical character recognition model.\",\n            id: \"facebook/nougat-base\",\n        },\n        {\n            description: \"A powerful model that lets you have a conversation with the image.\",\n            id: \"llava-hf/llava-1.5-7b-hf\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that compares various image captioning models.\",\n            id: \"nielsr/comparing-captioning-models\",\n        },\n        {\n            description: \"A robust image captioning application.\",\n            id: \"flax-community/image-captioning\",\n        },\n        {\n            description: \"An application that transcribes handwritings into text.\",\n            id: \"nielsr/TrOCR-handwritten\",\n        },\n        {\n            description: \"An application that can caption images and answer questions about a given image.\",\n            id: \"Salesforce/BLIP\",\n        },\n        {\n            description: \"An application that can caption images and answer questions with a conversational agent.\",\n            id: \"Salesforce/BLIP2\",\n        },\n        {\n            description: \"An image captioning application that demonstrates the effect of noise on captions.\",\n            id: \"johko/capdec-image-captioning\",\n        },\n    ],\n    summary: \"Image to text models output a text from a given image. Image captioning or optical character recognition can be considered as the most common applications of image to text.\",\n    widgetModels: [\"Salesforce/blip-image-captioning-large\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Instructions composed of image and text.\",\n            id: \"liuhaotian/LLaVA-Instruct-150K\",\n        },\n        {\n            description: \"Collection of image-text pairs on scientific topics.\",\n            id: \"DAMO-NLP-SG/multimodal_textbook\",\n        },\n        {\n            description: \"A collection of datasets made for model fine-tuning.\",\n            id: \"HuggingFaceM4/the_cauldron\",\n        },\n        {\n            description: \"Screenshots of websites with their HTML/CSS codes.\",\n            id: \"HuggingFaceM4/WebSight\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-text-to-text-input.png\",\n                type: \"img\",\n            },\n            {\n                label: \"Text Prompt\",\n                content: \"Describe the position of the bee in detail.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"The bee is sitting on a pink flower, surrounded by other flowers. The bee is positioned in the center of the flower, with its head and front legs sticking out.\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Small and efficient yet powerful vision language model.\",\n            id: \"HuggingFaceTB/SmolVLM-Instruct\",\n        },\n        {\n            description: \"A screenshot understanding model used to control computers.\",\n            id: \"microsoft/OmniParser-v2.0\",\n        },\n        {\n            description: \"Cutting-edge vision language model.\",\n            id: \"allenai/Molmo-7B-D-0924\",\n        },\n        {\n            description: \"Small yet powerful model.\",\n            id: \"vikhyatk/moondream2\",\n        },\n        {\n            description: \"Strong image-text-to-text model.\",\n            id: \"Qwen/Qwen2.5-VL-7B-Instruct\",\n        },\n        {\n            description: \"Image-text-to-text model with agentic capabilities.\",\n            id: \"microsoft/Magma-8B\",\n        },\n        {\n            description: \"Strong image-text-to-text model focused on documents.\",\n            id: \"allenai/olmOCR-7B-0225-preview\",\n        },\n        {\n            description: \"Small yet strong image-text-to-text model.\",\n            id: \"ibm-granite/granite-vision-3.2-2b\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"Leaderboard to evaluate vision language models.\",\n            id: \"opencompass/open_vlm_leaderboard\",\n        },\n        {\n            description: \"Vision language models arena, where models are ranked by votes of users.\",\n            id: \"WildVision/vision-arena\",\n        },\n        {\n            description: \"Powerful vision-language model assistant.\",\n            id: \"akhaliq/Molmo-7B-D-0924\",\n        },\n        {\n            description: \"Powerful vision language assistant that can understand multiple images.\",\n            id: \"HuggingFaceTB/SmolVLM2\",\n        },\n        {\n            description: \"An application for chatting with an image-text-to-text model.\",\n            id: \"GanymedeNil/Qwen2-VL-7B\",\n        },\n        {\n            description: \"An application that parses screenshots into actions.\",\n            id: \"showlab/ShowUI\",\n        },\n        {\n            description: \"An application that detects gaze.\",\n            id: \"moondream/gaze-demo\",\n        },\n    ],\n    summary: \"Image-text-to-text models take in an image and text prompt and output text. These models are also called vision-language models, or VLMs. The difference from image-to-text models is that these models take an additional text input, not restricting the model to certain use cases like image captioning, and may also be trained to accept a conversation as input.\",\n    widgetModels: [\"Qwen/Qwen2-VL-7B-Instruct\"],\n    youtubeId: \"IoGaGfU1CIg\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Scene segmentation dataset.\",\n            id: \"scene_parse_150\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-segmentation-input.jpeg\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"image-segmentation-output.png\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Average Precision (AP) is the Area Under the PR Curve (AUC-PR). It is calculated for each semantic class separately\",\n            id: \"Average Precision\",\n        },\n        {\n            description: \"Mean Average Precision (mAP) is the overall average of the AP values\",\n            id: \"Mean Average Precision\",\n        },\n        {\n            description: \"Intersection over Union (IoU) is the overlap of segmentation masks. Mean IoU is the average of the IoU of all semantic classes\",\n            id: \"Mean Intersection over Union\",\n        },\n        {\n            description: \"APα is the Average Precision at the IoU threshold of a α value, for example, AP50 and AP75\",\n            id: \"APα\",\n        },\n    ],\n    models: [\n        {\n            // TO DO: write description\n            description: \"Solid semantic segmentation model trained on ADE20k.\",\n            id: \"openmmlab/upernet-convnext-small\",\n        },\n        {\n            description: \"Background removal model.\",\n            id: \"briaai/RMBG-1.4\",\n        },\n        {\n            description: \"A multipurpose image segmentation model for high resolution images.\",\n            id: \"ZhengPeng7/BiRefNet\",\n        },\n        {\n            description: \"Powerful human-centric image segmentation model.\",\n            id: \"facebook/sapiens-seg-1b\",\n        },\n        {\n            description: \"Panoptic segmentation model trained on the COCO (common objects) dataset.\",\n            id: \"facebook/mask2former-swin-large-coco-panoptic\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A semantic segmentation application that can predict unseen instances out of the box.\",\n            id: \"facebook/ov-seg\",\n        },\n        {\n            description: \"One of the strongest segmentation applications.\",\n            id: \"jbrinkma/segment-anything\",\n        },\n        {\n            description: \"A human-centric segmentation model.\",\n            id: \"facebook/sapiens-pose\",\n        },\n        {\n            description: \"An instance segmentation application to predict neuronal cell types from microscopy images.\",\n            id: \"rashmi/sartorius-cell-instance-segmentation\",\n        },\n        {\n            description: \"An application that segments videos.\",\n            id: \"ArtGAN/Segment-Anything-Video\",\n        },\n        {\n            description: \"An panoptic segmentation application built for outdoor environments.\",\n            id: \"segments/panoptic-segment-anything\",\n        },\n    ],\n    summary: \"Image Segmentation divides an image into segments where each pixel in the image is mapped to an object. This task has multiple variants such as instance segmentation, panoptic segmentation and semantic segmentation.\",\n    widgetModels: [\"nvidia/segformer-b0-finetuned-ade-512-512\"],\n    youtubeId: \"dKE8SIt9C-w\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Widely used benchmark dataset for multiple Vision tasks.\",\n            id: \"merve/coco2017\",\n        },\n        {\n            description: \"Medical Imaging dataset of the Human Brain for segmentation and mask generating tasks\",\n            id: \"rocky93/BraTS_segmentation\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"mask-generation-input.png\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"mask-generation-output.png\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"IoU is used to measure the overlap between predicted mask and the ground truth mask.\",\n            id: \"Intersection over Union (IoU)\",\n        },\n    ],\n    models: [\n        {\n            description: \"Small yet powerful mask generation model.\",\n            id: \"Zigeng/SlimSAM-uniform-50\",\n        },\n        {\n            description: \"Very strong mask generation model.\",\n            id: \"facebook/sam2-hiera-large\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that combines a mask generation model with a zero-shot object detection model for text-guided image segmentation.\",\n            id: \"merve/OWLSAM2\",\n        },\n        {\n            description: \"An application that compares the performance of a large and a small mask generation model.\",\n            id: \"merve/slimsam\",\n        },\n        {\n            description: \"An application based on an improved mask generation model.\",\n            id: \"SkalskiP/segment-anything-model-2\",\n        },\n        {\n            description: \"An application to remove objects from videos using mask generation models.\",\n            id: \"SkalskiP/SAM_and_ProPainter\",\n        },\n    ],\n    summary: \"Mask generation is the task of generating masks that identify a specific object or region of interest in a given image. Masks are often used in segmentation tasks, where they provide a precise way to isolate the object of interest for further processing or analysis.\",\n    widgetModels: [],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Widely used benchmark dataset for multiple vision tasks.\",\n            id: \"merve/coco2017\",\n        },\n        {\n            description: \"Multi-task computer vision benchmark.\",\n            id: \"merve/pascal-voc\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"object-detection-input.jpg\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"object-detection-output.jpg\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The Average Precision (AP) metric is the Area Under the PR Curve (AUC-PR). It is calculated for each class separately\",\n            id: \"Average Precision\",\n        },\n        {\n            description: \"The Mean Average Precision (mAP) metric is the overall average of the AP values\",\n            id: \"Mean Average Precision\",\n        },\n        {\n            description: \"The APα metric is the Average Precision at the IoU threshold of a α value, for example, AP50 and AP75\",\n            id: \"APα\",\n        },\n    ],\n    models: [\n        {\n            description: \"Solid object detection model pre-trained on the COCO 2017 dataset.\",\n            id: \"facebook/detr-resnet-50\",\n        },\n        {\n            description: \"Accurate object detection model.\",\n            id: \"IDEA-Research/dab-detr-resnet-50\",\n        },\n        {\n            description: \"Fast and accurate object detection model.\",\n            id: \"PekingU/rtdetr_v2_r50vd\",\n        },\n        {\n            description: \"Object detection model for low-lying objects.\",\n            id: \"StephanST/WALDO30\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"Leaderboard to compare various object detection models across several metrics.\",\n            id: \"hf-vision/object_detection_leaderboard\",\n        },\n        {\n            description: \"An application that contains various object detection models to try from.\",\n            id: \"Gradio-Blocks/Object-Detection-With-DETR-and-YOLOS\",\n        },\n        {\n            description: \"A cutting-edge object detection application.\",\n            id: \"sunsmarterjieleaf/yolov12\",\n        },\n        {\n            description: \"An object tracking, segmentation and inpainting application.\",\n            id: \"VIPLab/Track-Anything\",\n        },\n        {\n            description: \"Very fast object tracking application based on object detection.\",\n            id: \"merve/RT-DETR-tracking-coco\",\n        },\n    ],\n    summary: \"Object Detection models allow users to identify objects of certain defined classes. Object detection models receive an image as input and output the images with bounding boxes and labels on detected objects.\",\n    widgetModels: [\"facebook/detr-resnet-50\"],\n    youtubeId: \"WdAeKSOpxhw\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"NYU Depth V2 Dataset: Video dataset containing both RGB and depth sensor data.\",\n            id: \"sayakpaul/nyu_depth_v2\",\n        },\n        {\n            description: \"Monocular depth estimation benchmark based without noise and errors.\",\n            id: \"depth-anything/DA-2K\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"depth-estimation-input.jpg\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"depth-estimation-output.png\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Cutting-edge depth estimation model.\",\n            id: \"depth-anything/Depth-Anything-V2-Large\",\n        },\n        {\n            description: \"A strong monocular depth estimation model.\",\n            id: \"jingheya/lotus-depth-g-v1-0\",\n        },\n        {\n            description: \"A depth estimation model that predicts depth in videos.\",\n            id: \"tencent/DepthCrafter\",\n        },\n        {\n            description: \"A robust depth estimation model.\",\n            id: \"apple/DepthPro-hf\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that predicts the depth of an image and then reconstruct the 3D model as voxels.\",\n            id: \"radames/dpt-depth-estimation-3d-voxels\",\n        },\n        {\n            description: \"An application for bleeding-edge depth estimation.\",\n            id: \"akhaliq/depth-pro\",\n        },\n        {\n            description: \"An application on cutting-edge depth estimation in videos.\",\n            id: \"tencent/DepthCrafter\",\n        },\n        {\n            description: \"A human-centric depth estimation application.\",\n            id: \"facebook/sapiens-depth\",\n        },\n    ],\n    summary: \"Depth estimation is the task of predicting depth of the objects present in an image.\",\n    widgetModels: [\"\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [],\n    demo: {\n        inputs: [],\n        outputs: [],\n    },\n    isPlaceholder: true,\n    metrics: [],\n    models: [],\n    spaces: [],\n    summary: \"\",\n    widgetModels: [],\n    youtubeId: undefined,\n    /// If this is a subtask, link to the most general task ID\n    /// (eg, text2text-generation is the canonical ID of translation)\n    canonicalId: undefined,\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A curation of widely used datasets for Data Driven Deep Reinforcement Learning (D4RL)\",\n            id: \"edbeeching/decision_transformer_gym_replay\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"State\",\n                content: \"Red traffic light, pedestrians are about to pass.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Action\",\n                content: \"Stop the car.\",\n                type: \"text\",\n            },\n            {\n                label: \"Next State\",\n                content: \"Yellow light, pedestrians have crossed.\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Accumulated reward across all time steps discounted by a factor that ranges between 0 and 1 and determines how much the agent optimizes for future relative to immediate rewards. Measures how good is the policy ultimately found by a given algorithm considering uncertainty over the future.\",\n            id: \"Discounted Total Reward\",\n        },\n        {\n            description: \"Average return obtained after running the policy for a certain number of evaluation episodes. As opposed to total reward, mean reward considers how much reward a given algorithm receives while learning.\",\n            id: \"Mean Reward\",\n        },\n        {\n            description: \"Measures how good a given algorithm is after a predefined time. Some algorithms may be guaranteed to converge to optimal behavior across many time steps. However, an agent that reaches an acceptable level of optimality after a given time horizon may be preferable to one that ultimately reaches optimality but takes a long time.\",\n            id: \"Level of Performance After Some Time\",\n        },\n    ],\n    models: [\n        {\n            description: \"A Reinforcement Learning model trained on expert data from the Gym Hopper environment\",\n            id: \"edbeeching/decision-transformer-gym-hopper-expert\",\n        },\n        {\n            description: \"A PPO agent playing seals/CartPole-v0 using the stable-baselines3 library and the RL Zoo.\",\n            id: \"HumanCompatibleAI/ppo-seals-CartPole-v0\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application for a cute puppy agent learning to catch a stick.\",\n            id: \"ThomasSimonini/Huggy\",\n        },\n        {\n            description: \"An application to play Snowball Fight with a reinforcement learning agent.\",\n            id: \"ThomasSimonini/SnowballFight\",\n        },\n    ],\n    summary: \"Reinforcement learning is the computational approach of learning from action by interacting with an environment through trial and error and receiving rewards (negative or positive) as feedback\",\n    widgetModels: [],\n    youtubeId: \"q0BiUn5LiBc\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"A famous question answering dataset based on English articles from Wikipedia.\",\n            id: \"squad_v2\",\n        },\n        {\n            // TODO write proper description\n            description: \"A dataset of aggregated anonymized actual queries issued to the Google search engine.\",\n            id: \"natural_questions\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Question\",\n                content: \"Which name is also used to describe the Amazon rainforest in English?\",\n                type: \"text\",\n            },\n            {\n                label: \"Context\",\n                content: \"The Amazon rainforest, also known in English as Amazonia or the Amazon Jungle\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"Amazonia\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Exact Match is a metric based on the strict character match of the predicted answer and the right answer. For answers predicted correctly, the Exact Match will be 1. Even if only one character is different, Exact Match will be 0\",\n            id: \"exact-match\",\n        },\n        {\n            description: \" The F1-Score metric is useful if we value both false positives and false negatives equally. The F1-Score is calculated on each word in the predicted sequence against the correct answer\",\n            id: \"f1\",\n        },\n    ],\n    models: [\n        {\n            description: \"A robust baseline model for most question answering domains.\",\n            id: \"deepset/roberta-base-squad2\",\n        },\n        {\n            description: \"Small yet robust model that can answer questions.\",\n            id: \"distilbert/distilbert-base-cased-distilled-squad\",\n        },\n        {\n            description: \"A special model that can answer questions from tables.\",\n            id: \"google/tapas-base-finetuned-wtq\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can answer a long question from Wikipedia.\",\n            id: \"deepset/wikipedia-assistant\",\n        },\n    ],\n    summary: \"Question Answering models can retrieve the answer to a question from a given text, which is useful for searching for an answer in a document. Some question answering models can generate answers without context!\",\n    widgetModels: [\"deepset/roberta-base-squad2\"],\n    youtubeId: \"ajPx5LwJD-I\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Bing queries with relevant passages from various web sources.\",\n            id: \"microsoft/ms_marco\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Source sentence\",\n                content: \"Machine learning is so easy.\",\n                type: \"text\",\n            },\n            {\n                label: \"Sentences to compare to\",\n                content: \"Deep learning is so straightforward.\",\n                type: \"text\",\n            },\n            {\n                label: \"\",\n                content: \"This is so difficult, like rocket science.\",\n                type: \"text\",\n            },\n            {\n                label: \"\",\n                content: \"I can't believe how much I struggled with this.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Deep learning is so straightforward.\",\n                        score: 0.623,\n                    },\n                    {\n                        label: \"This is so difficult, like rocket science.\",\n                        score: 0.413,\n                    },\n                    {\n                        label: \"I can't believe how much I struggled with this.\",\n                        score: 0.256,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Reciprocal Rank is a measure used to rank the relevancy of documents given a set of documents. Reciprocal Rank is the reciprocal of the rank of the document retrieved, meaning, if the rank is 3, the Reciprocal Rank is 0.33. If the rank is 1, the Reciprocal Rank is 1\",\n            id: \"Mean Reciprocal Rank\",\n        },\n        {\n            description: \"The similarity of the embeddings is evaluated mainly on cosine similarity. It is calculated as the cosine of the angle between two vectors. It is particularly useful when your texts are not the same length\",\n            id: \"Cosine Similarity\",\n        },\n    ],\n    models: [\n        {\n            description: \"This model works well for sentences and paragraphs and can be used for clustering/grouping and semantic searches.\",\n            id: \"sentence-transformers/all-mpnet-base-v2\",\n        },\n        {\n            description: \"A multilingual robust sentence similarity model.\",\n            id: \"BAAI/bge-m3\",\n        },\n        {\n            description: \"A robust sentence similarity model.\",\n            id: \"HIT-TMG/KaLM-embedding-multilingual-mini-instruct-v1.5\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that leverages sentence similarity to answer questions from YouTube videos.\",\n            id: \"Gradio-Blocks/Ask_Questions_To_YouTube_Videos\",\n        },\n        {\n            description: \"An application that retrieves relevant PubMed abstracts for a given online article which can be used as further references.\",\n            id: \"Gradio-Blocks/pubmed-abstract-retriever\",\n        },\n        {\n            description: \"An application that leverages sentence similarity to summarize text.\",\n            id: \"nickmuchi/article-text-summarizer\",\n        },\n        {\n            description: \"A guide that explains how Sentence Transformers can be used for semantic search.\",\n            id: \"sentence-transformers/Sentence_Transformers_for_semantic_search\",\n        },\n    ],\n    summary: \"Sentence Similarity is the task of determining how similar two texts are. Sentence similarity models convert input texts into vectors (embeddings) that capture semantic information and calculate how close (similar) they are between them. This task is particularly useful for information retrieval and clustering/grouping.\",\n    widgetModels: [\"BAAI/bge-small-en-v1.5\"],\n    youtubeId: \"VCZq5AkbNEU\",\n};\nexport default taskData;\n", "const taskData = {\n    canonicalId: \"text2text-generation\",\n    datasets: [\n        {\n            description: \"News articles in five different languages along with their summaries. Widely used for benchmarking multilingual summarization models.\",\n            id: \"mlsum\",\n        },\n        {\n            description: \"English conversations and their summaries. Useful for benchmarking conversational agents.\",\n            id: \"samsum\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. It was the first structure to reach a height of 300 metres. Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Output\",\n                content: \"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. It was the first structure to reach a height of 300 metres.\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The generated sequence is compared against its summary, and the overlap of tokens are counted. ROUGE-N refers to overlap of N subsequent tokens, ROUGE-1 refers to overlap of single tokens and ROUGE-2 is the overlap of two subsequent tokens.\",\n            id: \"rouge\",\n        },\n    ],\n    models: [\n        {\n            description: \"A strong summarization model trained on English news articles. Excels at generating factual summaries.\",\n            id: \"facebook/bart-large-cnn\",\n        },\n        {\n            description: \"A summarization model trained on medical articles.\",\n            id: \"Falconsai/medical_summarization\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can summarize long paragraphs.\",\n            id: \"pszemraj/summarize-long-text\",\n        },\n        {\n            description: \"A much needed summarization application for terms and conditions.\",\n            id: \"ml6team/distilbart-tos-summarizer-tosdr\",\n        },\n        {\n            description: \"An application that summarizes long documents.\",\n            id: \"pszemraj/document-summarization\",\n        },\n        {\n            description: \"An application that can detect errors in abstractive summarization.\",\n            id: \"ml6team/post-processing-summarization\",\n        },\n    ],\n    summary: \"Summarization is the task of producing a shorter version of a document while preserving its important information. Some models can extract text from the original input, while other models can generate entirely new text.\",\n    widgetModels: [\"facebook/bart-large-cnn\"],\n    youtubeId: \"yHnr5Dk2zCI\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"The WikiTableQuestions dataset is a large-scale dataset for the task of question answering on semi-structured tables.\",\n            id: \"wikitablequestions\",\n        },\n        {\n            description: \"WikiSQL is a dataset of 80654 hand-annotated examples of questions and SQL queries distributed across 24241 tables from Wikipedia.\",\n            id: \"wikisql\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                table: [\n                    [\"Rank\", \"Name\", \"No.of reigns\", \"Combined days\"],\n                    [\"1\", \"lou Thesz\", \"3\", \"3749\"],\n                    [\"2\", \"Ric Flair\", \"8\", \"3103\"],\n                    [\"3\", \"Harley Race\", \"7\", \"1799\"],\n                ],\n                type: \"tabular\",\n            },\n            { label: \"Question\", content: \"What is the number of reigns for Harley Race?\", type: \"text\" },\n        ],\n        outputs: [{ label: \"Result\", content: \"7\", type: \"text\" }],\n    },\n    metrics: [\n        {\n            description: \"Checks whether the predicted answer(s) is the same as the ground-truth answer(s).\",\n            id: \"Denotation Accuracy\",\n        },\n    ],\n    models: [\n        {\n            description: \"A table question answering model that is capable of neural SQL execution, i.e., employ TAPEX to execute a SQL query on a given table.\",\n            id: \"microsoft/tapex-base\",\n        },\n        {\n            description: \"A robust table question answering model.\",\n            id: \"google/tapas-base-finetuned-wtq\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that answers questions based on table CSV files.\",\n            id: \"katanaml/table-query\",\n        },\n    ],\n    summary: \"Table Question Answering (Table QA) is the answering a question about an information on a given table.\",\n    widgetModels: [\"google/tapas-base-finetuned-wtq\"],\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A comprehensive curation of datasets covering all benchmarks.\",\n            id: \"inria-soda/tabular-benchmark\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                table: [\n                    [\"Glucose\", \"Blood Pressure \", \"Skin Thickness\", \"Insulin\", \"BMI\"],\n                    [\"148\", \"72\", \"35\", \"0\", \"33.6\"],\n                    [\"150\", \"50\", \"30\", \"0\", \"35.1\"],\n                    [\"141\", \"60\", \"29\", \"1\", \"39.2\"],\n                ],\n                type: \"tabular\",\n            },\n        ],\n        outputs: [\n            {\n                table: [[\"Diabetes\"], [\"1\"], [\"1\"], [\"0\"]],\n                type: \"tabular\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\",\n        },\n        {\n            description: \"\",\n            id: \"recall\",\n        },\n        {\n            description: \"\",\n            id: \"precision\",\n        },\n        {\n            description: \"\",\n            id: \"f1\",\n        },\n    ],\n    models: [\n        {\n            description: \"Breast cancer prediction model based on decision trees.\",\n            id: \"scikit-learn/cancer-prediction-trees\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can predict defective products on a production line.\",\n            id: \"scikit-learn/tabular-playground\",\n        },\n        {\n            description: \"An application that compares various tabular classification techniques on different datasets.\",\n            id: \"scikit-learn/classification\",\n        },\n    ],\n    summary: \"Tabular classification is the task of classifying a target category (a group) based on set of attributes.\",\n    widgetModels: [\"scikit-learn/tabular-playground\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A comprehensive curation of datasets covering all benchmarks.\",\n            id: \"inria-soda/tabular-benchmark\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                table: [\n                    [\"Car Name\", \"Horsepower\", \"Weight\"],\n                    [\"ford torino\", \"140\", \"3,449\"],\n                    [\"amc hornet\", \"97\", \"2,774\"],\n                    [\"toyota corolla\", \"65\", \"1,773\"],\n                ],\n                type: \"tabular\",\n            },\n        ],\n        outputs: [\n            {\n                table: [[\"MPG (miles per gallon)\"], [\"17\"], [\"18\"], [\"31\"]],\n                type: \"tabular\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"mse\",\n        },\n        {\n            description: \"Coefficient of determination (or R-squared) is a measure of how well the model fits the data. Higher R-squared is considered a better fit.\",\n            id: \"r-squared\",\n        },\n    ],\n    models: [\n        {\n            description: \"Fish weight prediction based on length measurements and species.\",\n            id: \"scikit-learn/Fish-Weight\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can predict weight of a fish based on set of attributes.\",\n            id: \"scikit-learn/fish-weight-prediction\",\n        },\n    ],\n    summary: \"Tabular regression is the task of predicting a numerical value given a set of attributes.\",\n    widgetModels: [\"scikit-learn/Fish-Weight\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"RedCaps is a large-scale dataset of 12M image-text pairs collected from Reddit.\",\n            id: \"red_caps\",\n        },\n        {\n            description: \"Conceptual Captions is a dataset consisting of ~3.3M images annotated with captions.\",\n            id: \"conceptual_captions\",\n        },\n        {\n            description: \"12M image-caption pairs.\",\n            id: \"Spawning/PD12M\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"A city above clouds, pastel colors, Victorian style\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"image.jpeg\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The Inception Score (IS) measure assesses diversity and meaningfulness. It uses a generated image sample to predict its label. A higher score signifies more diverse and meaningful images.\",\n            id: \"IS\",\n        },\n        {\n            description: \"The Fréchet Inception Distance (FID) calculates the distance between distributions between synthetic and real samples. A lower FID score indicates better similarity between the distributions of real and generated images.\",\n            id: \"FID\",\n        },\n        {\n            description: \"R-precision assesses how the generated image aligns with the provided text description. It uses the generated images as queries to retrieve relevant text descriptions. The top 'r' relevant descriptions are selected and used to calculate R-precision as r/R, where 'R' is the number of ground truth descriptions associated with the generated images. A higher R-precision value indicates a better model.\",\n            id: \"R-Precision\",\n        },\n    ],\n    models: [\n        {\n            description: \"One of the most powerful image generation models that can generate realistic outputs.\",\n            id: \"black-forest-labs/FLUX.1-dev\",\n        },\n        {\n            description: \"A powerful yet fast image generation model.\",\n            id: \"latent-consistency/lcm-lora-sdxl\",\n        },\n        {\n            description: \"Text-to-image model for photorealistic generation.\",\n            id: \"Kwai-Kolors/Kolors\",\n        },\n        {\n            description: \"A powerful text-to-image model.\",\n            id: \"stabilityai/stable-diffusion-3-medium-diffusers\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A powerful text-to-image application.\",\n            id: \"stabilityai/stable-diffusion-3-medium\",\n        },\n        {\n            description: \"A text-to-image application to generate comics.\",\n            id: \"jbilcke-hf/ai-comic-factory\",\n        },\n        {\n            description: \"An application to match multiple custom image generation models.\",\n            id: \"multimodalart/flux-lora-lab\",\n        },\n        {\n            description: \"A powerful yet very fast image generation application.\",\n            id: \"latent-consistency/lcm-lora-for-sdxl\",\n        },\n        {\n            description: \"A gallery to explore various text-to-image models.\",\n            id: \"multimodalart/LoraTheExplorer\",\n        },\n        {\n            description: \"An application for `text-to-image`, `image-to-image` and image inpainting.\",\n            id: \"ArtGAN/Stable-Diffusion-ControlNet-WebUI\",\n        },\n        {\n            description: \"An application to generate realistic images given photos of a person and a prompt.\",\n            id: \"InstantX/InstantID\",\n        },\n    ],\n    summary: \"Text-to-image is the task of generating images from input text. These pipelines can also be used to modify and edit images based on text prompts.\",\n    widgetModels: [\"black-forest-labs/FLUX.1-dev\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    canonicalId: \"text-to-audio\",\n    datasets: [\n        {\n            description: \"10K hours of multi-speaker English dataset.\",\n            id: \"parler-tts/mls_eng_10k\",\n        },\n        {\n            description: \"Multi-speaker English dataset.\",\n            id: \"mythicinfinity/libritts_r\",\n        },\n        {\n            description: \"Multi-lingual dataset.\",\n            id: \"facebook/multilingual_librispeech\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"I love audio models on the Hub!\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"audio.wav\",\n                type: \"audio\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The Mel Cepstral Distortion (MCD) metric is used to calculate the quality of generated speech.\",\n            id: \"mel cepstral distortion\",\n        },\n    ],\n    models: [\n        {\n            description: \"A prompt based, powerful TTS model.\",\n            id: \"parler-tts/parler-tts-large-v1\",\n        },\n        {\n            description: \"A powerful TTS model that supports English and Chinese.\",\n            id: \"SWivid/F5-TTS\",\n        },\n        {\n            description: \"A massively multi-lingual TTS model.\",\n            id: \"fishaudio/fish-speech-1.5\",\n        },\n        {\n            description: \"A powerful TTS model.\",\n            id: \"OuteAI/OuteTTS-0.1-350M\",\n        },\n        {\n            description: \"Small yet powerful TTS model.\",\n            id: \"hexgrad/Kokoro-82M\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application for generate high quality speech in different languages.\",\n            id: \"hexgrad/Kokoro-TTS\",\n        },\n        {\n            description: \"A multilingual text-to-speech application.\",\n            id: \"fishaudio/fish-speech-1\",\n        },\n        {\n            description: \"An application that generates speech in different styles in English and Chinese.\",\n            id: \"mrfakename/E2-F5-TTS\",\n        },\n        {\n            description: \"An application that synthesizes emotional speech for diverse speaker prompts.\",\n            id: \"parler-tts/parler-tts-expresso\",\n        },\n        {\n            description: \"An application that generates podcast episodes.\",\n            id: \"ngxson/kokoro-podcast-generator\",\n        },\n    ],\n    summary: \"Text-to-Speech (TTS) is the task of generating natural sounding speech given text input. TTS models can be extended to have a single model that generates speech for multiple speakers and multiple languages.\",\n    widgetModels: [\"suno/bark\"],\n    youtubeId: \"NW62DpzJ274\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset useful to benchmark named entity recognition models.\",\n            id: \"eriktks/conll2003\",\n        },\n        {\n            description: \"A multilingual dataset of Wikipedia articles annotated for named entity recognition in over 150 different languages.\",\n            id: \"unimelb-nlp/wikiann\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"My name is Omar and I live in Zürich.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                text: \"My name is Omar and I live in Zürich.\",\n                tokens: [\n                    {\n                        type: \"PERSON\",\n                        start: 11,\n                        end: 15,\n                    },\n                    {\n                        type: \"GPE\",\n                        start: 30,\n                        end: 36,\n                    },\n                ],\n                type: \"text-with-tokens\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\",\n        },\n        {\n            description: \"\",\n            id: \"recall\",\n        },\n        {\n            description: \"\",\n            id: \"precision\",\n        },\n        {\n            description: \"\",\n            id: \"f1\",\n        },\n    ],\n    models: [\n        {\n            description: \"A robust performance model to identify people, locations, organizations and names of miscellaneous entities.\",\n            id: \"dslim/bert-base-NER\",\n        },\n        {\n            description: \"A strong model to identify people, locations, organizations and names in multiple languages.\",\n            id: \"FacebookAI/xlm-roberta-large-finetuned-conll03-english\",\n        },\n        {\n            description: \"A token classification model specialized on medical entity recognition.\",\n            id: \"blaze999/Medical-NER\",\n        },\n        {\n            description: \"Flair models are typically the state of the art in named entity recognition tasks.\",\n            id: \"flair/ner-english\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can recognizes entities, extracts noun chunks and recognizes various linguistic features of each token.\",\n            id: \"spacy/gradio_pipeline_visualizer\",\n        },\n    ],\n    summary: \"Token classification is a natural language understanding task in which a label is assigned to some tokens in a text. Some popular token classification subtasks are Named Entity Recognition (NER) and Part-of-Speech (PoS) tagging. NER models could be trained to identify specific entities in a text, such as dates, individuals and places; and PoS tagging would identify, for example, which words in a text are verbs, nouns, and punctuation marks.\",\n    widgetModels: [\"FacebookAI/xlm-roberta-large-finetuned-conll03-english\"],\n    youtubeId: \"wVHdVlPScxA\",\n};\nexport default taskData;\n", "const taskData = {\n    canonicalId: \"text2text-generation\",\n    datasets: [\n        {\n            description: \"A dataset of copyright-free books translated into 16 different languages.\",\n            id: \"Helsinki-NLP/opus_books\",\n        },\n        {\n            description: \"An example of translation between programming languages. This dataset consists of functions in Java and C#.\",\n            id: \"google/code_x_glue_cc_code_to_code_trans\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"My name is Omar and I live in Zürich.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Output\",\n                content: \"Mein Name ist Omar und ich wohne in Zürich.\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"BLEU score is calculated by counting the number of shared single or subsequent tokens between the generated sequence and the reference. Subsequent n tokens are called “n-grams”. Unigram refers to a single token while bi-gram refers to token pairs and n-grams refer to n subsequent tokens. The score ranges from 0 to 1, where 1 means the translation perfectly matched and 0 did not match at all\",\n            id: \"bleu\",\n        },\n        {\n            description: \"\",\n            id: \"sacrebleu\",\n        },\n    ],\n    models: [\n        {\n            description: \"Very powerful model that can translate many languages between each other, especially low-resource languages.\",\n            id: \"facebook/nllb-200-1.3B\",\n        },\n        {\n            description: \"A general-purpose Transformer that can be used to translate from English to German, French, or Romanian.\",\n            id: \"google-t5/t5-base\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can translate between 100 languages.\",\n            id: \"Iker/Translate-100-languages\",\n        },\n        {\n            description: \"An application that can translate between many languages.\",\n            id: \"Geonmo/nllb-translation-demo\",\n        },\n    ],\n    summary: \"Translation is the task of converting text from one language to another.\",\n    widgetModels: [\"facebook/mbart-large-50-many-to-many-mmt\"],\n    youtubeId: \"1JvfrvZgi6c\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset used to benchmark multiple variants of text classification.\",\n            id: \"nyu-mll/glue\",\n        },\n        {\n            description: \"A text classification dataset used to benchmark natural language inference models\",\n            id: \"stanfordnlp/snli\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"I love Hugging Face!\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"POSITIVE\",\n                        score: 0.9,\n                    },\n                    {\n                        label: \"NEUTRAL\",\n                        score: 0.1,\n                    },\n                    {\n                        label: \"NEGATIVE\",\n                        score: 0.0,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\",\n        },\n        {\n            description: \"\",\n            id: \"recall\",\n        },\n        {\n            description: \"\",\n            id: \"precision\",\n        },\n        {\n            description: \"The F1 metric is the harmonic mean of the precision and recall. It can be calculated as: F1 = 2 * (precision * recall) / (precision + recall)\",\n            id: \"f1\",\n        },\n    ],\n    models: [\n        {\n            description: \"A robust model trained for sentiment analysis.\",\n            id: \"distilbert/distilbert-base-uncased-finetuned-sst-2-english\",\n        },\n        {\n            description: \"A sentiment analysis model specialized in financial sentiment.\",\n            id: \"ProsusAI/finbert\",\n        },\n        {\n            description: \"A sentiment analysis model specialized in analyzing tweets.\",\n            id: \"cardiffnlp/twitter-roberta-base-sentiment-latest\",\n        },\n        {\n            description: \"A model that can classify languages.\",\n            id: \"papluca/xlm-roberta-base-language-detection\",\n        },\n        {\n            description: \"A model that can classify text generation attacks.\",\n            id: \"meta-llama/Prompt-Guard-86M\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can classify financial sentiment.\",\n            id: \"IoannisTr/Tech_Stocks_Trading_Assistant\",\n        },\n        {\n            description: \"A dashboard that contains various text classification tasks.\",\n            id: \"miesnerjacob/Multi-task-NLP\",\n        },\n        {\n            description: \"An application that analyzes user reviews in healthcare.\",\n            id: \"spacy/healthsea-demo\",\n        },\n    ],\n    summary: \"Text Classification is the task of assigning a label or class to a given text. Some use cases are sentiment analysis, natural language inference, and assessing grammatical correctness.\",\n    widgetModels: [\"distilbert/distilbert-base-uncased-finetuned-sst-2-english\"],\n    youtubeId: \"leNG9fN9FQU\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Multilingual dataset used to evaluate text generation models.\",\n            id: \"CohereForAI/Global-MMLU\",\n        },\n        {\n            description: \"High quality multilingual data used to train text-generation models.\",\n            id: \"HuggingFaceFW/fineweb-2\",\n        },\n        {\n            description: \"Truly open-source, curated and cleaned dialogue dataset.\",\n            id: \"HuggingFaceH4/ultrachat_200k\",\n        },\n        {\n            description: \"A reasoning dataset.\",\n            id: \"open-r1/OpenThoughts-114k-math\",\n        },\n        {\n            description: \"A multilingual instruction dataset with preference ratings on responses.\",\n            id: \"allenai/tulu-3-sft-mixture\",\n        },\n        {\n            description: \"A large synthetic dataset for alignment of text generation models.\",\n            id: \"HuggingFaceTB/smoltalk\",\n        },\n        {\n            description: \"A dataset made for training text generation models solving math questions.\",\n            id: \"HuggingFaceTB/finemath\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"Once upon a time,\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Output\",\n                content: \"Once upon a time, we knew that our ancestors were on the verge of extinction. The great explorers and poets of the Old World, from Alexander the Great to Chaucer, are dead and gone. A good many of our ancient explorers and poets have\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Cross Entropy is a metric that calculates the difference between two probability distributions. Each probability distribution is the distribution of predicted words\",\n            id: \"Cross Entropy\",\n        },\n        {\n            description: \"The Perplexity metric is the exponential of the cross-entropy loss. It evaluates the probabilities assigned to the next word by the model. Lower perplexity indicates better performance\",\n            id: \"Perplexity\",\n        },\n    ],\n    models: [\n        { description: \"A text-generation model trained to follow instructions.\", id: \"google/gemma-2-2b-it\" },\n        {\n            description: \"Smaller variant of one of the most powerful models.\",\n            id: \"deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B\",\n        },\n        {\n            description: \"Very powerful text generation model trained to follow instructions.\",\n            id: \"meta-llama/Meta-Llama-3.1-8B-Instruct\",\n        },\n        {\n            description: \"Powerful text generation model by Microsoft.\",\n            id: \"microsoft/phi-4\",\n        },\n        {\n            description: \"A very powerful model with reasoning capabilities.\",\n            id: \"simplescaling/s1.1-32B\",\n        },\n        {\n            description: \"Strong conversational model that supports very long instructions.\",\n            id: \"Qwen/Qwen2.5-7B-Instruct-1M\",\n        },\n        {\n            description: \"Text generation model used to write code.\",\n            id: \"Qwen/Qwen2.5-Coder-32B-Instruct\",\n        },\n        {\n            description: \"Powerful reasoning based open large language model.\",\n            id: \"deepseek-ai/DeepSeek-R1\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A leaderboard to compare different open-source text generation models based on various benchmarks.\",\n            id: \"open-llm-leaderboard/open_llm_leaderboard\",\n        },\n        {\n            description: \"A leaderboard for comparing chain-of-thought performance of models.\",\n            id: \"logikon/open_cot_leaderboard\",\n        },\n        {\n            description: \"An text generation based application based on a very powerful LLaMA2 model.\",\n            id: \"ysharma/Explore_llamav2_with_TGI\",\n        },\n        {\n            description: \"An text generation based application to converse with Zephyr model.\",\n            id: \"HuggingFaceH4/zephyr-chat\",\n        },\n        {\n            description: \"A leaderboard that ranks text generation models based on blind votes from people.\",\n            id: \"lmsys/chatbot-arena-leaderboard\",\n        },\n        {\n            description: \"An chatbot to converse with a very powerful text generation model.\",\n            id: \"mlabonne/phixtral-chat\",\n        },\n    ],\n    summary: \"Generating text is the task of generating new text given another text. These models can, for example, fill in incomplete text or paraphrase.\",\n    widgetModels: [\"mistralai/Mistral-Nemo-Instruct-2407\"],\n    youtubeId: \"e9gNEAlsOvU\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Bing queries with relevant passages from various web sources.\",\n            id: \"microsoft/ms_marco\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Source sentence\",\n                content: \"Machine learning is so easy.\",\n                type: \"text\",\n            },\n            {\n                label: \"Sentences to compare to\",\n                content: \"Deep learning is so straightforward.\",\n                type: \"text\",\n            },\n            {\n                label: \"\",\n                content: \"This is so difficult, like rocket science.\",\n                type: \"text\",\n            },\n            {\n                label: \"\",\n                content: \"I can't believe how much I struggled with this.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Deep learning is so straightforward.\",\n                        score: 2.2006407,\n                    },\n                    {\n                        label: \"This is so difficult, like rocket science.\",\n                        score: -6.2634873,\n                    },\n                    {\n                        label: \"I can't believe how much I struggled with this.\",\n                        score: -10.251488,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Discounted Cumulative Gain (DCG) measures the gain, or usefulness, of search results discounted by their position. The normalization is done by dividing the DCG by the ideal DCG, which is the DCG of the perfect ranking.\",\n            id: \"Normalized Discounted Cumulative Gain\",\n        },\n        {\n            description: \"Reciprocal Rank is a measure used to rank the relevancy of documents given a set of documents. Reciprocal Rank is the reciprocal of the rank of the document retrieved, meaning, if the rank is 3, the Reciprocal Rank is 0.33. If the rank is 1, the Reciprocal Rank is 1\",\n            id: \"Mean Reciprocal Rank\",\n        },\n        {\n            description: \"Mean Average Precision (mAP) is the overall average of the Average Precision (AP) values, where AP is the Area Under the PR Curve (AUC-PR)\",\n            id: \"Mean Average Precision\",\n        },\n    ],\n    models: [\n        {\n            description: \"An extremely efficient text ranking model trained on a web search dataset.\",\n            id: \"cross-encoder/ms-marco-MiniLM-L6-v2\",\n        },\n        {\n            description: \"A strong multilingual text reranker model.\",\n            id: \"Alibaba-NLP/gte-multilingual-reranker-base\",\n        },\n        {\n            description: \"An efficient text ranking model that punches above its weight.\",\n            id: \"Alibaba-NLP/gte-reranker-modernbert-base\",\n        },\n    ],\n    spaces: [],\n    summary: \"Text Ranking is the task of ranking a set of texts based on their relevance to a query. Text ranking models are trained on large datasets of queries and relevant documents to learn how to rank documents based on their relevance to the query. This task is particularly useful for search engines and information retrieval systems.\",\n    widgetModels: [\"cross-encoder/ms-marco-MiniLM-L6-v2\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Microsoft Research Video to Text is a large-scale dataset for open domain video captioning\",\n            id: \"iejMac/CLIP-MSR-VTT\",\n        },\n        {\n            description: \"UCF101 Human Actions dataset consists of 13,320 video clips from YouTube, with 101 classes.\",\n            id: \"quchenyuan/UCF101-ZIP\",\n        },\n        {\n            description: \"A high-quality dataset for human action recognition in YouTube videos.\",\n            id: \"nateraw/kinetics\",\n        },\n        {\n            description: \"A dataset of video clips of humans performing pre-defined basic actions with everyday objects.\",\n            id: \"HuggingFaceM4/something_something_v2\",\n        },\n        {\n            description: \"This dataset consists of text-video pairs and contains noisy samples with irrelevant video descriptions\",\n            id: \"HuggingFaceM4/webvid\",\n        },\n        {\n            description: \"A dataset of short Flickr videos for the temporal localization of events with descriptions.\",\n            id: \"iejMac/CLIP-DiDeMo\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Input\",\n                content: \"Darth Vader is surfing on the waves.\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"text-to-video-output.gif\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Inception Score uses an image classification model that predicts class labels and evaluates how distinct and diverse the images are. A higher score indicates better video generation.\",\n            id: \"is\",\n        },\n        {\n            description: \"Frechet Inception Distance uses an image classification model to obtain image embeddings. The metric compares mean and standard deviation of the embeddings of real and generated images. A smaller score indicates better video generation.\",\n            id: \"fid\",\n        },\n        {\n            description: \"Frechet Video Distance uses a model that captures coherence for changes in frames and the quality of each frame. A smaller score indicates better video generation.\",\n            id: \"fvd\",\n        },\n        {\n            description: \"CLIPSIM measures similarity between video frames and text using an image-text similarity model. A higher score indicates better video generation.\",\n            id: \"clipsim\",\n        },\n    ],\n    models: [\n        {\n            description: \"A strong model for consistent video generation.\",\n            id: \"tencent/HunyuanVideo\",\n        },\n        {\n            description: \"A text-to-video model with high fidelity motion and strong prompt adherence.\",\n            id: \"Lightricks/LTX-Video\",\n        },\n        {\n            description: \"A text-to-video model focusing on physics-aware applications like robotics.\",\n            id: \"nvidia/Cosmos-1.0-Diffusion-7B-Text2World\",\n        },\n        {\n            description: \"A robust model for video generation.\",\n            id: \"Wan-AI/Wan2.1-T2V-1.3B\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that generates video from text.\",\n            id: \"VideoCrafter/VideoCrafter\",\n        },\n        {\n            description: \"Consistent video generation application.\",\n            id: \"Wan-AI/Wan2.1\",\n        },\n        {\n            description: \"A cutting edge video generation application.\",\n            id: \"Pyramid-Flow/pyramid-flow\",\n        },\n    ],\n    summary: \"Text-to-video models can be used in any application that requires generating consistent sequence of images from text. \",\n    widgetModels: [\"Wan-AI/Wan2.1-T2V-14B\"],\n    youtubeId: undefined,\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"The CIFAR-100 dataset consists of 60000 32x32 colour images in 100 classes, with 600 images per class.\",\n            id: \"cifar100\",\n        },\n        {\n            description: \"Multiple images of celebrities, used for facial expression translation.\",\n            id: \"CelebA\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Seed\",\n                content: \"42\",\n                type: \"text\",\n            },\n            {\n                label: \"Number of images to generate:\",\n                content: \"4\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"unconditional-image-generation-output.jpeg\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The inception score (IS) evaluates the quality of generated images. It measures the diversity of the generated images (the model predictions are evenly distributed across all possible labels) and their 'distinction' or 'sharpness' (the model confidently predicts a single label for each image).\",\n            id: \"Inception score (IS)\",\n        },\n        {\n            description: \"The Fréchet Inception Distance (FID) evaluates the quality of images created by a generative model by calculating the distance between feature vectors for real and generated images.\",\n            id: \"Frećhet Inception Distance (FID)\",\n        },\n    ],\n    models: [\n        {\n            description: \"High-quality image generation model trained on the CIFAR-10 dataset. It synthesizes images of the ten classes presented in the dataset using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics.\",\n            id: \"google/ddpm-cifar10-32\",\n        },\n        {\n            description: \"High-quality image generation model trained on the 256x256 CelebA-HQ dataset. It synthesizes images of faces using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics.\",\n            id: \"google/ddpm-celebahq-256\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that can generate realistic faces.\",\n            id: \"CompVis/celeba-latent-diffusion\",\n        },\n    ],\n    summary: \"Unconditional image generation is the task of generating images with no condition in any context (like a prompt text or another image). Once trained, the model will create images that resemble its training data distribution.\",\n    widgetModels: [\"\"],\n    // TODO: Add related video\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"Benchmark dataset used for video classification with videos that belong to 400 classes.\",\n            id: \"kinetics400\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"video-classification-input.gif\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Playing Guitar\",\n                        score: 0.514,\n                    },\n                    {\n                        label: \"Playing Tennis\",\n                        score: 0.193,\n                    },\n                    {\n                        label: \"Cooking\",\n                        score: 0.068,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\",\n        },\n        {\n            description: \"\",\n            id: \"recall\",\n        },\n        {\n            description: \"\",\n            id: \"precision\",\n        },\n        {\n            description: \"\",\n            id: \"f1\",\n        },\n    ],\n    models: [\n        {\n            // TO DO: write description\n            description: \"Strong Video Classification model trained on the Kinetics 400 dataset.\",\n            id: \"google/vivit-b-16x2-kinetics400\",\n        },\n        {\n            // TO DO: write description\n            description: \"Strong Video Classification model trained on the Kinetics 400 dataset.\",\n            id: \"microsoft/xclip-base-patch32\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that classifies video at different timestamps.\",\n            id: \"nateraw/lavila\",\n        },\n        {\n            description: \"An application that classifies video.\",\n            id: \"fcakyon/video-classification\",\n        },\n    ],\n    summary: \"Video classification is the task of assigning a label or class to an entire video. Videos are expected to have only one class for each video. Video classification models take a video as input and return a prediction about which class the video belongs to.\",\n    widgetModels: [],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset containing questions (with answers) about images.\",\n            id: \"Graphcore/vqa\",\n        },\n        {\n            description: \"A dataset to benchmark visual reasoning based on text in images.\",\n            id: \"facebook/textvqa\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"elephant.jpeg\",\n                type: \"img\",\n            },\n            {\n                label: \"Question\",\n                content: \"What is in this image?\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"elephant\",\n                        score: 0.97,\n                    },\n                    {\n                        label: \"elephants\",\n                        score: 0.06,\n                    },\n                    {\n                        label: \"animal\",\n                        score: 0.003,\n                    },\n                ],\n            },\n        ],\n    },\n    isPlaceholder: false,\n    metrics: [\n        {\n            description: \"\",\n            id: \"accuracy\",\n        },\n        {\n            description: \"Measures how much a predicted answer differs from the ground truth based on the difference in their semantic meaning.\",\n            id: \"wu-palmer similarity\",\n        },\n    ],\n    models: [\n        {\n            description: \"A visual question answering model trained to convert charts and plots to text.\",\n            id: \"google/deplot\",\n        },\n        {\n            description: \"A visual question answering model trained for mathematical reasoning and chart derendering from images.\",\n            id: \"google/matcha-base\",\n        },\n        {\n            description: \"A strong visual question answering that answers questions from book covers.\",\n            id: \"google/pix2struct-ocrvqa-large\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that compares visual question answering models across different tasks.\",\n            id: \"merve/pix2struct\",\n        },\n        {\n            description: \"An application that can answer questions based on images.\",\n            id: \"nielsr/vilt-vqa\",\n        },\n        {\n            description: \"An application that can caption images and answer questions about a given image. \",\n            id: \"Salesforce/BLIP\",\n        },\n        {\n            description: \"An application that can caption images and answer questions about a given image. \",\n            id: \"vumichien/Img2Prompt\",\n        },\n    ],\n    summary: \"Visual Question Answering is the task of answering open-ended questions based on an image. They output natural language responses to natural language questions.\",\n    widgetModels: [\"dandelin/vilt-b32-finetuned-vqa\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A widely used dataset used to benchmark multiple variants of text classification.\",\n            id: \"nyu-mll/glue\",\n        },\n        {\n            description: \"The Multi-Genre Natural Language Inference (MultiNLI) corpus is a crowd-sourced collection of 433k sentence pairs annotated with textual entailment information.\",\n            id: \"nyu-mll/multi_nli\",\n        },\n        {\n            description: \"FEVER is a publicly available dataset for fact extraction and verification against textual sources.\",\n            id: \"fever/fever\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Text Input\",\n                content: \"Dune is the best movie ever.\",\n                type: \"text\",\n            },\n            {\n                label: \"Candidate Labels\",\n                content: \"CINEMA, ART, MUSIC\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"CINEMA\",\n                        score: 0.9,\n                    },\n                    {\n                        label: \"ART\",\n                        score: 0.1,\n                    },\n                    {\n                        label: \"MUSIC\",\n                        score: 0.0,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Powerful zero-shot text classification model.\",\n            id: \"facebook/bart-large-mnli\",\n        },\n        {\n            description: \"Cutting-edge zero-shot multilingual text classification model.\",\n            id: \"MoritzLaurer/ModernBERT-large-zeroshot-v2.0\",\n        },\n        {\n            description: \"Zero-shot text classification model that can be used for topic and sentiment classification.\",\n            id: \"knowledgator/gliclass-modern-base-v2.0-init\",\n        },\n    ],\n    spaces: [],\n    summary: \"Zero-shot text classification is a task in natural language processing where a model is trained on a set of labeled examples but is then able to classify new examples from previously unseen classes.\",\n    widgetModels: [\"facebook/bart-large-mnli\"],\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            // TODO write proper description\n            description: \"\",\n            id: \"\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-classification-input.jpeg\",\n                type: \"img\",\n            },\n            {\n                label: \"Classes\",\n                content: \"cat, dog, bird\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                type: \"chart\",\n                data: [\n                    {\n                        label: \"Cat\",\n                        score: 0.664,\n                    },\n                    {\n                        label: \"Dog\",\n                        score: 0.329,\n                    },\n                    {\n                        label: \"Bird\",\n                        score: 0.008,\n                    },\n                ],\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"Computes the number of times the correct label appears in top K labels predicted\",\n            id: \"top-K accuracy\",\n        },\n    ],\n    models: [\n        {\n            description: \"Multilingual image classification model for 80 languages.\",\n            id: \"visheratin/mexma-siglip\",\n        },\n        {\n            description: \"Strong zero-shot image classification model.\",\n            id: \"google/siglip2-base-patch16-224\",\n        },\n        {\n            description: \"Robust zero-shot image classification model.\",\n            id: \"intfloat/mmE5-mllama-11b-instruct\",\n        },\n        {\n            description: \"Powerful zero-shot image classification model supporting 94 languages.\",\n            id: \"jinaai/jina-clip-v2\",\n        },\n        {\n            description: \"Strong image classification model for biomedical domain.\",\n            id: \"microsoft/BiomedCLIP-PubMedBERT_256-vit_base_patch16_224\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that leverages zero-shot image classification to find best captions to generate an image. \",\n            id: \"pharma/CLIP-Interrogator\",\n        },\n        {\n            description: \"An application to compare different zero-shot image classification models. \",\n            id: \"merve/compare_clip_siglip\",\n        },\n    ],\n    summary: \"Zero-shot image classification is the task of classifying previously unseen classes during training of a model.\",\n    widgetModels: [\"google/siglip-so400m-patch14-224\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [],\n    demo: {\n        inputs: [\n            {\n                filename: \"zero-shot-object-detection-input.jpg\",\n                type: \"img\",\n            },\n            {\n                label: \"Classes\",\n                content: \"cat, dog, bird\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"zero-shot-object-detection-output.jpg\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [\n        {\n            description: \"The Average Precision (AP) metric is the Area Under the PR Curve (AUC-PR). It is calculated for each class separately\",\n            id: \"Average Precision\",\n        },\n        {\n            description: \"The Mean Average Precision (mAP) metric is the overall average of the AP values\",\n            id: \"Mean Average Precision\",\n        },\n        {\n            description: \"The APα metric is the Average Precision at the IoU threshold of a α value, for example, AP50 and AP75\",\n            id: \"APα\",\n        },\n    ],\n    models: [\n        {\n            description: \"Solid zero-shot object detection model.\",\n            id: \"IDEA-Research/grounding-dino-base\",\n        },\n        {\n            description: \"Cutting-edge zero-shot object detection model.\",\n            id: \"google/owlv2-base-patch16-ensemble\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"A demo to try the state-of-the-art zero-shot object detection model, OWLv2.\",\n            id: \"merve/owlv2\",\n        },\n        {\n            description: \"A demo that combines a zero-shot object detection and mask generation model for zero-shot segmentation.\",\n            id: \"merve/OWLSAM\",\n        },\n    ],\n    summary: \"Zero-shot object detection is a computer vision task to detect objects and their classes in images, without any prior training or knowledge of the classes. Zero-shot object detection models receive an image as input, as well as a list of candidate classes, and output the bounding boxes and labels where the objects have been detected.\",\n    widgetModels: [],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A large dataset of over 10 million 3D objects.\",\n            id: \"allenai/objaverse-xl\",\n        },\n        {\n            description: \"A dataset of isolated object images for evaluating image-to-3D models.\",\n            id: \"dylanebert/iso3d\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"image-to-3d-image-input.png\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Result\",\n                content: \"image-to-3d-3d-output-filename.glb\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Fast image-to-3D mesh model by Tencent.\",\n            id: \"TencentARC/InstantMesh\",\n        },\n        {\n            description: \"Fast image-to-3D mesh model by StabilityAI\",\n            id: \"stabilityai/TripoSR\",\n        },\n        {\n            description: \"A scaled up image-to-3D mesh model derived from TripoSR.\",\n            id: \"hwjiang/Real3D\",\n        },\n        {\n            description: \"Consistent image-to-3d generation model.\",\n            id: \"stabilityai/stable-point-aware-3d\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"Leaderboard to evaluate image-to-3D models.\",\n            id: \"dylanebert/3d-arena\",\n        },\n        {\n            description: \"Image-to-3D demo with mesh outputs.\",\n            id: \"TencentARC/InstantMesh\",\n        },\n        {\n            description: \"Image-to-3D demo.\",\n            id: \"stabilityai/stable-point-aware-3d\",\n        },\n        {\n            description: \"Image-to-3D demo with mesh outputs.\",\n            id: \"hwjiang/Real3D\",\n        },\n        {\n            description: \"Image-to-3D demo with splat outputs.\",\n            id: \"dylanebert/LGM-mini\",\n        },\n    ],\n    summary: \"Image-to-3D models take in image input and produce 3D output.\",\n    widgetModels: [],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A large dataset of over 10 million 3D objects.\",\n            id: \"allenai/objaverse-xl\",\n        },\n        {\n            description: \"Descriptive captions for 3D objects in Objaverse.\",\n            id: \"tiange/Cap3D\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                label: \"Prompt\",\n                content: \"a cat statue\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Result\",\n                content: \"text-to-3d-3d-output-filename.glb\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"Text-to-3D mesh model by OpenAI\",\n            id: \"openai/shap-e\",\n        },\n        {\n            description: \"Generative 3D gaussian splatting model.\",\n            id: \"ashawkey/LGM\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"Text-to-3D demo with mesh outputs.\",\n            id: \"hysts/Shap-E\",\n        },\n        {\n            description: \"Text/image-to-3D demo with splat outputs.\",\n            id: \"ashawkey/LGM\",\n        },\n    ],\n    summary: \"Text-to-3D models take in text input and produce 3D output.\",\n    widgetModels: [],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"A dataset of hand keypoints of over 500k examples.\",\n            id: \"Vincent-luo/hagrid-mediapipe-hands\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"keypoint-detection-input.png\",\n                type: \"img\",\n            },\n        ],\n        outputs: [\n            {\n                filename: \"keypoint-detection-output.png\",\n                type: \"img\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A robust keypoint detection model.\",\n            id: \"magic-leap-community/superpoint\",\n        },\n        {\n            description: \"A robust keypoint matching model.\",\n            id: \"magic-leap-community/superglue_outdoor\",\n        },\n        {\n            description: \"Strong keypoint detection model used to detect human pose.\",\n            id: \"facebook/sapiens-pose-1b\",\n        },\n        {\n            description: \"Powerful keypoint detection model used to detect human pose.\",\n            id: \"usyd-community/vitpose-plus-base\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application that detects hand keypoints in real-time.\",\n            id: \"datasciencedojo/Hand-Keypoint-Detection-Realtime\",\n        },\n        {\n            description: \"An application to try a universal keypoint detection model.\",\n            id: \"merve/SuperPoint\",\n        },\n    ],\n    summary: \"Keypoint detection is the task of identifying meaningful distinctive points or features in an image.\",\n    widgetModels: [],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "const taskData = {\n    datasets: [\n        {\n            description: \"Multiple-choice questions and answers about videos.\",\n            id: \"lmms-lab/Video-MME\",\n        },\n        {\n            description: \"A dataset of instructions and question-answer pairs about videos.\",\n            id: \"lmms-lab/VideoChatGPT\",\n        },\n        {\n            description: \"Large video understanding dataset.\",\n            id: \"HuggingFaceFV/finevideo\",\n        },\n    ],\n    demo: {\n        inputs: [\n            {\n                filename: \"video-text-to-text-input.gif\",\n                type: \"img\",\n            },\n            {\n                label: \"Text Prompt\",\n                content: \"What is happening in this video?\",\n                type: \"text\",\n            },\n        ],\n        outputs: [\n            {\n                label: \"Answer\",\n                content: \"The video shows a series of images showing a fountain with water jets and a variety of colorful flowers and butterflies in the background.\",\n                type: \"text\",\n            },\n        ],\n    },\n    metrics: [],\n    models: [\n        {\n            description: \"A robust video-text-to-text model.\",\n            id: \"Vision-CAIR/LongVU_Qwen2_7B\",\n        },\n        {\n            description: \"Strong video-text-to-text model with reasoning capabilities.\",\n            id: \"GoodiesHere/Apollo-LMMs-Apollo-7B-t32\",\n        },\n        {\n            description: \"Strong video-text-to-text model.\",\n            id: \"HuggingFaceTB/SmolVLM2-2.2B-Instruct\",\n        },\n    ],\n    spaces: [\n        {\n            description: \"An application to chat with a video-text-to-text model.\",\n            id: \"llava-hf/video-llava\",\n        },\n        {\n            description: \"A leaderboard for various video-text-to-text models.\",\n            id: \"opencompass/openvlm_video_leaderboard\",\n        },\n        {\n            description: \"An application to generate highlights from a video.\",\n            id: \"HuggingFaceTB/SmolVLM2-HighlightGenerator\",\n        },\n    ],\n    summary: \"Video-text-to-text models take in a video and a text prompt and output text. These models are also called video-language models.\",\n    widgetModels: [\"\"],\n    youtubeId: \"\",\n};\nexport default taskData;\n", "import { PIPELINE_DATA } from \"../pipelines.js\";\nimport audioClassification from \"./audio-classification/data.js\";\nimport audioToAudio from \"./audio-to-audio/data.js\";\nimport automaticSpeechRecognition from \"./automatic-speech-recognition/data.js\";\nimport documentQuestionAnswering from \"./document-question-answering/data.js\";\nimport featureExtraction from \"./feature-extraction/data.js\";\nimport fillMask from \"./fill-mask/data.js\";\nimport imageClassification from \"./image-classification/data.js\";\nimport imageFeatureExtraction from \"./image-feature-extraction/data.js\";\nimport imageToImage from \"./image-to-image/data.js\";\nimport imageToText from \"./image-to-text/data.js\";\nimport imageTextToText from \"./image-text-to-text/data.js\";\nimport imageSegmentation from \"./image-segmentation/data.js\";\nimport maskGeneration from \"./mask-generation/data.js\";\nimport objectDetection from \"./object-detection/data.js\";\nimport depthEstimation from \"./depth-estimation/data.js\";\nimport placeholder from \"./placeholder/data.js\";\nimport reinforcementLearning from \"./reinforcement-learning/data.js\";\nimport questionAnswering from \"./question-answering/data.js\";\nimport sentenceSimilarity from \"./sentence-similarity/data.js\";\nimport summarization from \"./summarization/data.js\";\nimport tableQuestionAnswering from \"./table-question-answering/data.js\";\nimport tabularClassification from \"./tabular-classification/data.js\";\nimport tabularRegression from \"./tabular-regression/data.js\";\nimport textToImage from \"./text-to-image/data.js\";\nimport textToSpeech from \"./text-to-speech/data.js\";\nimport tokenClassification from \"./token-classification/data.js\";\nimport translation from \"./translation/data.js\";\nimport textClassification from \"./text-classification/data.js\";\nimport textGeneration from \"./text-generation/data.js\";\nimport textRanking from \"./text-ranking/data.js\";\nimport textToVideo from \"./text-to-video/data.js\";\nimport unconditionalImageGeneration from \"./unconditional-image-generation/data.js\";\nimport videoClassification from \"./video-classification/data.js\";\nimport visualQuestionAnswering from \"./visual-question-answering/data.js\";\nimport zeroShotClassification from \"./zero-shot-classification/data.js\";\nimport zeroShotImageClassification from \"./zero-shot-image-classification/data.js\";\nimport zeroShotObjectDetection from \"./zero-shot-object-detection/data.js\";\nimport imageTo3D from \"./image-to-3d/data.js\";\nimport textTo3D from \"./text-to-3d/data.js\";\nimport keypointDetection from \"./keypoint-detection/data.js\";\nimport videoTextToText from \"./video-text-to-text/data.js\";\n/**\n * Model libraries compatible with each ML task\n */\nexport const TASKS_MODEL_LIBRARIES = {\n    \"audio-classification\": [\"speechbrain\", \"transformers\", \"transformers.js\"],\n    \"audio-to-audio\": [\"asteroid\", \"fairseq\", \"speechbrain\"],\n    \"automatic-speech-recognition\": [\"espnet\", \"nemo\", \"speechbrain\", \"transformers\", \"transformers.js\"],\n    \"audio-text-to-text\": [],\n    \"depth-estimation\": [\"transformers\", \"transformers.js\"],\n    \"document-question-answering\": [\"transformers\", \"transformers.js\"],\n    \"feature-extraction\": [\"sentence-transformers\", \"transformers\", \"transformers.js\"],\n    \"fill-mask\": [\"transformers\", \"transformers.js\"],\n    \"graph-ml\": [\"transformers\"],\n    \"image-classification\": [\"keras\", \"timm\", \"transformers\", \"transformers.js\"],\n    \"image-feature-extraction\": [\"timm\", \"transformers\"],\n    \"image-segmentation\": [\"transformers\", \"transformers.js\"],\n    \"image-text-to-text\": [\"transformers\"],\n    \"image-to-image\": [\"diffusers\", \"transformers\", \"transformers.js\"],\n    \"image-to-text\": [\"transformers\", \"transformers.js\"],\n    \"image-to-video\": [\"diffusers\"],\n    \"keypoint-detection\": [\"transformers\"],\n    \"video-classification\": [\"transformers\"],\n    \"mask-generation\": [\"transformers\"],\n    \"multiple-choice\": [\"transformers\"],\n    \"object-detection\": [\"transformers\", \"transformers.js\", \"ultralytics\"],\n    other: [],\n    \"question-answering\": [\"adapter-transformers\", \"allennlp\", \"transformers\", \"transformers.js\"],\n    robotics: [],\n    \"reinforcement-learning\": [\"transformers\", \"stable-baselines3\", \"ml-agents\", \"sample-factory\"],\n    \"sentence-similarity\": [\"sentence-transformers\", \"spacy\", \"transformers.js\"],\n    summarization: [\"transformers\", \"transformers.js\"],\n    \"table-question-answering\": [\"transformers\"],\n    \"table-to-text\": [\"transformers\"],\n    \"tabular-classification\": [\"sklearn\"],\n    \"tabular-regression\": [\"sklearn\"],\n    \"tabular-to-text\": [\"transformers\"],\n    \"text-classification\": [\"adapter-transformers\", \"setfit\", \"spacy\", \"transformers\", \"transformers.js\"],\n    \"text-generation\": [\"transformers\", \"transformers.js\"],\n    \"text-ranking\": [\"sentence-transformers\", \"transformers\"],\n    \"text-retrieval\": [],\n    \"text-to-image\": [\"diffusers\"],\n    \"text-to-speech\": [\"espnet\", \"tensorflowtts\", \"transformers\", \"transformers.js\"],\n    \"text-to-audio\": [\"transformers\", \"transformers.js\"],\n    \"text-to-video\": [\"diffusers\"],\n    \"text2text-generation\": [\"transformers\", \"transformers.js\"],\n    \"time-series-forecasting\": [],\n    \"token-classification\": [\n        \"adapter-transformers\",\n        \"flair\",\n        \"spacy\",\n        \"span-marker\",\n        \"stanza\",\n        \"transformers\",\n        \"transformers.js\",\n    ],\n    translation: [\"transformers\", \"transformers.js\"],\n    \"unconditional-image-generation\": [\"diffusers\"],\n    \"video-text-to-text\": [\"transformers\"],\n    \"visual-question-answering\": [\"transformers\", \"transformers.js\"],\n    \"voice-activity-detection\": [],\n    \"zero-shot-classification\": [\"transformers\", \"transformers.js\"],\n    \"zero-shot-image-classification\": [\"transformers\", \"transformers.js\"],\n    \"zero-shot-object-detection\": [\"transformers\", \"transformers.js\"],\n    \"text-to-3d\": [\"diffusers\"],\n    \"image-to-3d\": [\"diffusers\"],\n    \"any-to-any\": [\"transformers\"],\n    \"visual-document-retrieval\": [\"transformers\"],\n};\n/**\n * Return the whole TaskData object for a certain task.\n * If the partialTaskData argument is left undefined,\n * the default placholder data will be used.\n */\nfunction getData(type, partialTaskData = placeholder) {\n    return {\n        ...partialTaskData,\n        id: type,\n        label: PIPELINE_DATA[type].name,\n        libraries: TASKS_MODEL_LIBRARIES[type],\n    };\n}\n// To make comparisons easier, task order is the same as in const.ts\n// Tasks set to undefined won't have an associated task page.\n// Tasks that call getData() without the second argument will\n// have a \"placeholder\" page.\nexport const TASKS_DATA = {\n    \"any-to-any\": getData(\"any-to-any\", placeholder),\n    \"audio-classification\": getData(\"audio-classification\", audioClassification),\n    \"audio-to-audio\": getData(\"audio-to-audio\", audioToAudio),\n    \"audio-text-to-text\": getData(\"audio-text-to-text\", placeholder),\n    \"automatic-speech-recognition\": getData(\"automatic-speech-recognition\", automaticSpeechRecognition),\n    \"depth-estimation\": getData(\"depth-estimation\", depthEstimation),\n    \"document-question-answering\": getData(\"document-question-answering\", documentQuestionAnswering),\n    \"visual-document-retrieval\": getData(\"visual-document-retrieval\", placeholder),\n    \"feature-extraction\": getData(\"feature-extraction\", featureExtraction),\n    \"fill-mask\": getData(\"fill-mask\", fillMask),\n    \"graph-ml\": undefined,\n    \"image-classification\": getData(\"image-classification\", imageClassification),\n    \"image-feature-extraction\": getData(\"image-feature-extraction\", imageFeatureExtraction),\n    \"image-segmentation\": getData(\"image-segmentation\", imageSegmentation),\n    \"image-to-image\": getData(\"image-to-image\", imageToImage),\n    \"image-text-to-text\": getData(\"image-text-to-text\", imageTextToText),\n    \"image-to-text\": getData(\"image-to-text\", imageToText),\n    \"image-to-video\": undefined,\n    \"keypoint-detection\": getData(\"keypoint-detection\", keypointDetection),\n    \"mask-generation\": getData(\"mask-generation\", maskGeneration),\n    \"multiple-choice\": undefined,\n    \"object-detection\": getData(\"object-detection\", objectDetection),\n    \"video-classification\": getData(\"video-classification\", videoClassification),\n    other: undefined,\n    \"question-answering\": getData(\"question-answering\", questionAnswering),\n    \"reinforcement-learning\": getData(\"reinforcement-learning\", reinforcementLearning),\n    robotics: undefined,\n    \"sentence-similarity\": getData(\"sentence-similarity\", sentenceSimilarity),\n    summarization: getData(\"summarization\", summarization),\n    \"table-question-answering\": getData(\"table-question-answering\", tableQuestionAnswering),\n    \"table-to-text\": undefined,\n    \"tabular-classification\": getData(\"tabular-classification\", tabularClassification),\n    \"tabular-regression\": getData(\"tabular-regression\", tabularRegression),\n    \"tabular-to-text\": undefined,\n    \"text-classification\": getData(\"text-classification\", textClassification),\n    \"text-generation\": getData(\"text-generation\", textGeneration),\n    \"text-ranking\": getData(\"text-ranking\", textRanking),\n    \"text-retrieval\": undefined,\n    \"text-to-image\": getData(\"text-to-image\", textToImage),\n    \"text-to-speech\": getData(\"text-to-speech\", textToSpeech),\n    \"text-to-audio\": undefined,\n    \"text-to-video\": getData(\"text-to-video\", textToVideo),\n    \"text2text-generation\": undefined,\n    \"time-series-forecasting\": undefined,\n    \"token-classification\": getData(\"token-classification\", tokenClassification),\n    translation: getData(\"translation\", translation),\n    \"unconditional-image-generation\": getData(\"unconditional-image-generation\", unconditionalImageGeneration),\n    \"video-text-to-text\": getData(\"video-text-to-text\", videoTextToText),\n    \"visual-question-answering\": getData(\"visual-question-answering\", visualQuestionAnswering),\n    \"voice-activity-detection\": undefined,\n    \"zero-shot-classification\": getData(\"zero-shot-classification\", zeroShotClassification),\n    \"zero-shot-image-classification\": getData(\"zero-shot-image-classification\", zeroShotImageClassification),\n    \"zero-shot-object-detection\": getData(\"zero-shot-object-detection\", zeroShotObjectDetection),\n    \"text-to-3d\": getData(\"text-to-3d\", textTo3D),\n    \"image-to-3d\": getData(\"image-to-3d\", imageTo3D),\n};\n", "const inputsZeroShotClassification = () => `\"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!\"`;\nconst inputsTranslation = () => `\"Меня зовут Вольфганг и я живу в Берлине\"`;\nconst inputsSummarization = () => `\"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.\"`;\nconst inputsTableQuestionAnswering = () => `{\n    \"query\": \"How many stars does the transformers repository have?\",\n    \"table\": {\n        \"Repository\": [\"Transformers\", \"Datasets\", \"Tokenizers\"],\n        \"Stars\": [\"36542\", \"4512\", \"3934\"],\n        \"Contributors\": [\"651\", \"77\", \"34\"],\n        \"Programming language\": [\n            \"Python\",\n            \"Python\",\n            \"Rust, Python and NodeJS\"\n        ]\n    }\n}`;\nconst inputsVisualQuestionAnswering = () => `{\n        \"image\": \"cat.png\",\n        \"question\": \"What is in this image?\"\n    }`;\nconst inputsQuestionAnswering = () => `{\n    \"question\": \"What is my name?\",\n    \"context\": \"My name is Clara and I live in Berkeley.\"\n}`;\nconst inputsTextClassification = () => `\"I like you. I love you\"`;\nconst inputsTokenClassification = () => `\"My name is Sarah Jessica Parker but you can call me Jessica\"`;\nconst inputsTextGeneration = (model) => {\n    if (model.tags.includes(\"conversational\")) {\n        return model.pipeline_tag === \"text-generation\"\n            ? [{ role: \"user\", content: \"What is the capital of France?\" }]\n            : [\n                {\n                    role: \"user\",\n                    content: [\n                        {\n                            type: \"text\",\n                            text: \"Describe this image in one sentence.\",\n                        },\n                        {\n                            type: \"image_url\",\n                            image_url: {\n                                url: \"https://cdn.britannica.com/61/93061-050-99147DCE/Statue-of-Liberty-Island-New-York-Bay.jpg\",\n                            },\n                        },\n                    ],\n                },\n            ];\n    }\n    return `\"Can you please let us know more details about your \"`;\n};\nconst inputsText2TextGeneration = () => `\"The answer to the universe is\"`;\nconst inputsFillMask = (model) => `\"The answer to the universe is ${model.mask_token}.\"`;\nconst inputsSentenceSimilarity = () => `{\n    \"source_sentence\": \"That is a happy person\",\n    \"sentences\": [\n        \"That is a happy dog\",\n        \"That is a very happy person\",\n        \"Today is a sunny day\"\n    ]\n}`;\nconst inputsFeatureExtraction = () => `\"Today is a sunny day and I will get some ice cream.\"`;\nconst inputsImageClassification = () => `\"cats.jpg\"`;\nconst inputsImageToText = () => `\"cats.jpg\"`;\nconst inputsImageToImage = () => `{\n    \"image\": \"cat.png\",\n    \"prompt\": \"Turn the cat into a tiger.\"\n}`;\nconst inputsImageSegmentation = () => `\"cats.jpg\"`;\nconst inputsObjectDetection = () => `\"cats.jpg\"`;\nconst inputsAudioToAudio = () => `\"sample1.flac\"`;\nconst inputsAudioClassification = () => `\"sample1.flac\"`;\nconst inputsTextToImage = () => `\"Astronaut riding a horse\"`;\nconst inputsTextToVideo = () => `\"A young man walking on the street\"`;\nconst inputsTextToSpeech = () => `\"The answer to the universe is 42\"`;\nconst inputsTextToAudio = () => `\"liquid drum and bass, atmospheric synths, airy sounds\"`;\nconst inputsAutomaticSpeechRecognition = () => `\"sample1.flac\"`;\nconst inputsTabularPrediction = () => `'{\"Height\":[11.52,12.48],\"Length1\":[23.2,24.0],\"Length2\":[25.4,26.3],\"Species\": [\"Bream\",\"Bream\"]}'`;\nconst inputsZeroShotImageClassification = () => `\"cats.jpg\"`;\nconst modelInputSnippets = {\n    \"audio-to-audio\": inputsAudioToAudio,\n    \"audio-classification\": inputsAudioClassification,\n    \"automatic-speech-recognition\": inputsAutomaticSpeechRecognition,\n    \"document-question-answering\": inputsVisualQuestionAnswering,\n    \"feature-extraction\": inputsFeatureExtraction,\n    \"fill-mask\": inputsFillMask,\n    \"image-classification\": inputsImageClassification,\n    \"image-to-text\": inputsImageToText,\n    \"image-to-image\": inputsImageToImage,\n    \"image-segmentation\": inputsImageSegmentation,\n    \"object-detection\": inputsObjectDetection,\n    \"question-answering\": inputsQuestionAnswering,\n    \"sentence-similarity\": inputsSentenceSimilarity,\n    summarization: inputsSummarization,\n    \"table-question-answering\": inputsTableQuestionAnswering,\n    \"tabular-regression\": inputsTabularPrediction,\n    \"tabular-classification\": inputsTabularPrediction,\n    \"text-classification\": inputsTextClassification,\n    \"text-generation\": inputsTextGeneration,\n    \"image-text-to-text\": inputsTextGeneration,\n    \"text-to-image\": inputsTextToImage,\n    \"text-to-video\": inputsTextToVideo,\n    \"text-to-speech\": inputsTextToSpeech,\n    \"text-to-audio\": inputsTextToAudio,\n    \"text2text-generation\": inputsText2TextGeneration,\n    \"token-classification\": inputsTokenClassification,\n    translation: inputsTranslation,\n    \"zero-shot-classification\": inputsZeroShotClassification,\n    \"zero-shot-image-classification\": inputsZeroShotImageClassification,\n};\n// Use noWrap to put the whole snippet on a single line (removing new lines and tabulations)\n// Use noQuotes to strip quotes from start & end (example: \"abc\" -> abc)\nexport function getModelInputSnippet(model, noWrap = false, noQuotes = false) {\n    if (model.pipeline_tag) {\n        const inputs = modelInputSnippets[model.pipeline_tag];\n        if (inputs) {\n            let result = inputs(model);\n            if (typeof result === \"string\") {\n                if (noWrap) {\n                    result = result.replace(/(?:(?:\\r?\\n|\\r)\\t*)|\\t+/g, \" \");\n                }\n                if (noQuotes) {\n                    const REGEX_QUOTES = /^\"(.+)\"$/s;\n                    const match = result.match(REGEX_QUOTES);\n                    result = match ? match[1] : result;\n                }\n            }\n            return result;\n        }\n    }\n    return \"No input example has been defined for this model task.\";\n}\n", "export function stringifyMessages(messages, opts) {\n    let messagesStr = JSON.stringify(messages, null, \"\\t\");\n    if (opts?.indent) {\n        messagesStr = messagesStr.replaceAll(\"\\n\", `\\n${opts.indent}`);\n    }\n    if (!opts?.attributeKeyQuotes) {\n        messagesStr = messagesStr.replace(/\"([^\"]+)\":/g, \"$1:\");\n    }\n    if (opts?.customContentEscaper) {\n        messagesStr = opts.customContentEscaper(messagesStr);\n    }\n    return messagesStr;\n}\nexport function stringifyGenerationConfig(config, opts) {\n    const quote = opts.attributeKeyQuotes ? `\"` : \"\";\n    return Object.entries(config)\n        .map(([key, val]) => `${quote}${key}${quote}${opts.attributeValueConnector}${val},`)\n        .join(`${opts.indent}`);\n}\n", "import { LIBRARY_TASK_MAPPING } from \"./library-to-tasks.js\";\nimport { getModelInputSnippet } from \"./snippets/inputs.js\";\nimport { stringifyMessages } from \"./snippets/common.js\";\nconst TAG_CUSTOM_CODE = \"custom_code\";\nfunction nameWithoutNamespace(modelId) {\n    const splitted = modelId.split(\"/\");\n    return splitted.length === 1 ? splitted[0] : splitted[1];\n}\nconst escapeStringForJson = (str) => JSON.stringify(str).slice(1, -1); // slice is needed to remove surrounding quotes added by JSON.stringify\n//#region snippets\nexport const adapters = (model) => [\n    `from adapters import AutoAdapterModel\n\nmodel = AutoAdapterModel.from_pretrained(\"${model.config?.adapter_transformers?.model_name}\")\nmodel.load_adapter(\"${model.id}\", set_active=True)`,\n];\nconst allennlpUnknown = (model) => [\n    `import allennlp_models\nfrom allennlp.predictors.predictor import Predictor\n\npredictor = Predictor.from_path(\"hf://${model.id}\")`,\n];\nconst allennlpQuestionAnswering = (model) => [\n    `import allennlp_models\nfrom allennlp.predictors.predictor import Predictor\n\npredictor = Predictor.from_path(\"hf://${model.id}\")\npredictor_input = {\"passage\": \"My name is Wolfgang and I live in Berlin\", \"question\": \"Where do I live?\"}\npredictions = predictor.predict_json(predictor_input)`,\n];\nexport const allennlp = (model) => {\n    if (model.tags.includes(\"question-answering\")) {\n        return allennlpQuestionAnswering(model);\n    }\n    return allennlpUnknown(model);\n};\nexport const araclip = (model) => [\n    `from araclip import AraClip\n\nmodel = AraClip.from_pretrained(\"${model.id}\")`,\n];\nexport const asteroid = (model) => [\n    `from asteroid.models import BaseModel\n\nmodel = BaseModel.from_pretrained(\"${model.id}\")`,\n];\nexport const audioseal = (model) => {\n    const watermarkSnippet = `# Watermark Generator\nfrom audioseal import AudioSeal\n\nmodel = AudioSeal.load_generator(\"${model.id}\")\n# pass a tensor (tensor_wav) of shape (batch, channels, samples) and a sample rate\nwav, sr = tensor_wav, 16000\n\t\nwatermark = model.get_watermark(wav, sr)\nwatermarked_audio = wav + watermark`;\n    const detectorSnippet = `# Watermark Detector\nfrom audioseal import AudioSeal\n\ndetector = AudioSeal.load_detector(\"${model.id}\")\n\t\nresult, message = detector.detect_watermark(watermarked_audio, sr)`;\n    return [watermarkSnippet, detectorSnippet];\n};\nfunction get_base_diffusers_model(model) {\n    return model.cardData?.base_model?.toString() ?? \"fill-in-base-model\";\n}\nfunction get_prompt_from_diffusers_model(model) {\n    const prompt = model.widgetData?.[0]?.text ?? model.cardData?.instance_prompt;\n    if (prompt) {\n        return escapeStringForJson(prompt);\n    }\n}\nexport const ben2 = (model) => [\n    `import requests\nfrom PIL import Image\nfrom ben2 import AutoModel\n\nurl = \"https://huggingface.co/datasets/mishig/sample_images/resolve/main/teapot.jpg\"\nimage = Image.open(requests.get(url, stream=True).raw)\n\nmodel = AutoModel.from_pretrained(\"${model.id}\")\nmodel.to(\"cuda\").eval()\nforeground = model.inference(image)\n`,\n];\nexport const bertopic = (model) => [\n    `from bertopic import BERTopic\n\nmodel = BERTopic.load(\"${model.id}\")`,\n];\nexport const bm25s = (model) => [\n    `from bm25s.hf import BM25HF\n\nretriever = BM25HF.load_from_hub(\"${model.id}\")`,\n];\nexport const cxr_foundation = () => [\n    `# pip install git+https://github.com/Google-Health/cxr-foundation.git#subdirectory=python\n\n# Load image as grayscale (Stillwaterising, CC0, via Wikimedia Commons)\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nimage_url = \"https://upload.wikimedia.org/wikipedia/commons/c/c8/Chest_Xray_PA_3-8-2010.png\"\nimg = Image.open(requests.get(image_url, headers={'User-Agent': 'Demo'}, stream=True).raw).convert('L')\n\n# Run inference\nfrom clientside.clients import make_hugging_face_client\ncxr_client = make_hugging_face_client('cxr_model')\nprint(cxr_client.get_image_embeddings_from_images([img]))`,\n];\nexport const depth_anything_v2 = (model) => {\n    let encoder;\n    let features;\n    let out_channels;\n    encoder = \"<ENCODER>\";\n    features = \"<NUMBER_OF_FEATURES>\";\n    out_channels = \"<OUT_CHANNELS>\";\n    if (model.id === \"depth-anything/Depth-Anything-V2-Small\") {\n        encoder = \"vits\";\n        features = \"64\";\n        out_channels = \"[48, 96, 192, 384]\";\n    }\n    else if (model.id === \"depth-anything/Depth-Anything-V2-Base\") {\n        encoder = \"vitb\";\n        features = \"128\";\n        out_channels = \"[96, 192, 384, 768]\";\n    }\n    else if (model.id === \"depth-anything/Depth-Anything-V2-Large\") {\n        encoder = \"vitl\";\n        features = \"256\";\n        out_channels = \"[256, 512, 1024, 1024\";\n    }\n    return [\n        `\n# Install from https://github.com/DepthAnything/Depth-Anything-V2\n\n# Load the model and infer depth from an image\nimport cv2\nimport torch\n\nfrom depth_anything_v2.dpt import DepthAnythingV2\n\n# instantiate the model\nmodel = DepthAnythingV2(encoder=\"${encoder}\", features=${features}, out_channels=${out_channels})\n\n# load the weights\nfilepath = hf_hub_download(repo_id=\"${model.id}\", filename=\"depth_anything_v2_${encoder}.pth\", repo_type=\"model\")\nstate_dict = torch.load(filepath, map_location=\"cpu\")\nmodel.load_state_dict(state_dict).eval()\n\nraw_img = cv2.imread(\"your/image/path\")\ndepth = model.infer_image(raw_img) # HxW raw depth map in numpy\n    `,\n    ];\n};\nexport const depth_pro = (model) => {\n    const installSnippet = `# Download checkpoint\npip install huggingface-hub\nhuggingface-cli download --local-dir checkpoints ${model.id}`;\n    const inferenceSnippet = `import depth_pro\n\n# Load model and preprocessing transform\nmodel, transform = depth_pro.create_model_and_transforms()\nmodel.eval()\n\n# Load and preprocess an image.\nimage, _, f_px = depth_pro.load_rgb(\"example.png\")\nimage = transform(image)\n\n# Run inference.\nprediction = model.infer(image, f_px=f_px)\n\n# Results: 1. Depth in meters\ndepth = prediction[\"depth\"]\n# Results: 2. Focal length in pixels\nfocallength_px = prediction[\"focallength_px\"]`;\n    return [installSnippet, inferenceSnippet];\n};\nexport const derm_foundation = () => [\n    `from huggingface_hub import from_pretrained_keras\nimport tensorflow as tf, requests\n\n# Load and format input\nIMAGE_URL = \"https://storage.googleapis.com/dx-scin-public-data/dataset/images/3445096909671059178.png\"\ninput_tensor = tf.train.Example(\n    features=tf.train.Features(\n        feature={\n            \"image/encoded\": tf.train.Feature(\n                bytes_list=tf.train.BytesList(value=[requests.get(IMAGE_URL, stream=True).content])\n            )\n        }\n    )\n).SerializeToString()\n\n# Load model and run inference\nloaded_model = from_pretrained_keras(\"google/derm-foundation\")\ninfer = loaded_model.signatures[\"serving_default\"]\nprint(infer(inputs=tf.constant([input_tensor])))`,\n];\nconst diffusersDefaultPrompt = \"Astronaut in a jungle, cold color palette, muted colors, detailed, 8k\";\nconst diffusers_default = (model) => [\n    `from diffusers import DiffusionPipeline\n\npipe = DiffusionPipeline.from_pretrained(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersDefaultPrompt}\"\nimage = pipe(prompt).images[0]`,\n];\nconst diffusers_controlnet = (model) => [\n    `from diffusers import ControlNetModel, StableDiffusionControlNetPipeline\n\ncontrolnet = ControlNetModel.from_pretrained(\"${model.id}\")\npipe = StableDiffusionControlNetPipeline.from_pretrained(\n\t\"${get_base_diffusers_model(model)}\", controlnet=controlnet\n)`,\n];\nconst diffusers_lora = (model) => [\n    `from diffusers import DiffusionPipeline\n\npipe = DiffusionPipeline.from_pretrained(\"${get_base_diffusers_model(model)}\")\npipe.load_lora_weights(\"${model.id}\")\n\nprompt = \"${get_prompt_from_diffusers_model(model) ?? diffusersDefaultPrompt}\"\nimage = pipe(prompt).images[0]`,\n];\nconst diffusers_textual_inversion = (model) => [\n    `from diffusers import DiffusionPipeline\n\npipe = DiffusionPipeline.from_pretrained(\"${get_base_diffusers_model(model)}\")\npipe.load_textual_inversion(\"${model.id}\")`,\n];\nexport const diffusers = (model) => {\n    if (model.tags.includes(\"controlnet\")) {\n        return diffusers_controlnet(model);\n    }\n    else if (model.tags.includes(\"lora\")) {\n        return diffusers_lora(model);\n    }\n    else if (model.tags.includes(\"textual_inversion\")) {\n        return diffusers_textual_inversion(model);\n    }\n    else {\n        return diffusers_default(model);\n    }\n};\nexport const diffusionkit = (model) => {\n    const sd3Snippet = `# Pipeline for Stable Diffusion 3\nfrom diffusionkit.mlx import DiffusionPipeline\n\npipeline = DiffusionPipeline(\n\tshift=3.0,\n\tuse_t5=False,\n\tmodel_version=${model.id},\n\tlow_memory_mode=True,\n\ta16=True,\n\tw16=True,\n)`;\n    const fluxSnippet = `# Pipeline for Flux\nfrom diffusionkit.mlx import FluxPipeline\n\npipeline = FluxPipeline(\n  shift=1.0,\n  model_version=${model.id},\n  low_memory_mode=True,\n  a16=True,\n  w16=True,\n)`;\n    const generateSnippet = `# Image Generation\nHEIGHT = 512\nWIDTH = 512\nNUM_STEPS = ${model.tags.includes(\"flux\") ? 4 : 50}\nCFG_WEIGHT = ${model.tags.includes(\"flux\") ? 0 : 5}\n\nimage, _ = pipeline.generate_image(\n  \"a photo of a cat\",\n  cfg_weight=CFG_WEIGHT,\n  num_steps=NUM_STEPS,\n  latent_size=(HEIGHT // 8, WIDTH // 8),\n)`;\n    const pipelineSnippet = model.tags.includes(\"flux\") ? fluxSnippet : sd3Snippet;\n    return [pipelineSnippet, generateSnippet];\n};\nexport const cartesia_pytorch = (model) => [\n    `# pip install --no-binary :all: cartesia-pytorch\nfrom cartesia_pytorch import ReneLMHeadModel\nfrom transformers import AutoTokenizer\n\nmodel = ReneLMHeadModel.from_pretrained(\"${model.id}\")\ntokenizer = AutoTokenizer.from_pretrained(\"allenai/OLMo-1B-hf\")\n\nin_message = [\"Rene Descartes was\"]\ninputs = tokenizer(in_message, return_tensors=\"pt\")\n\noutputs = model.generate(inputs.input_ids, max_length=50, top_k=100, top_p=0.99)\nout_message = tokenizer.batch_decode(outputs, skip_special_tokens=True)[0]\n\nprint(out_message)\n)`,\n];\nexport const cartesia_mlx = (model) => [\n    `import mlx.core as mx\nimport cartesia_mlx as cmx\n\nmodel = cmx.from_pretrained(\"${model.id}\")\nmodel.set_dtype(mx.float32)   \n\nprompt = \"Rene Descartes was\"\n\nfor text in model.generate(\n    prompt,\n    max_tokens=500,\n    eval_every_n=5,\n    verbose=True,\n    top_p=0.99,\n    temperature=0.85,\n):\n    print(text, end=\"\", flush=True)\n`,\n];\nexport const edsnlp = (model) => {\n    const packageName = nameWithoutNamespace(model.id).replaceAll(\"-\", \"_\");\n    return [\n        `# Load it from the Hub directly\nimport edsnlp\nnlp = edsnlp.load(\"${model.id}\")\n`,\n        `# Or install it as a package\n!pip install git+https://huggingface.co/${model.id}\n\n# and import it as a module\nimport ${packageName}\n\nnlp = ${packageName}.load()  # or edsnlp.load(\"${packageName}\")\n`,\n    ];\n};\nexport const espnetTTS = (model) => [\n    `from espnet2.bin.tts_inference import Text2Speech\n\nmodel = Text2Speech.from_pretrained(\"${model.id}\")\n\nspeech, *_ = model(\"text to generate speech from\")`,\n];\nexport const espnetASR = (model) => [\n    `from espnet2.bin.asr_inference import Speech2Text\n\nmodel = Speech2Text.from_pretrained(\n  \"${model.id}\"\n)\n\nspeech, rate = soundfile.read(\"speech.wav\")\ntext, *_ = model(speech)[0]`,\n];\nconst espnetUnknown = () => [`unknown model type (must be text-to-speech or automatic-speech-recognition)`];\nexport const espnet = (model) => {\n    if (model.tags.includes(\"text-to-speech\")) {\n        return espnetTTS(model);\n    }\n    else if (model.tags.includes(\"automatic-speech-recognition\")) {\n        return espnetASR(model);\n    }\n    return espnetUnknown();\n};\nexport const fairseq = (model) => [\n    `from fairseq.checkpoint_utils import load_model_ensemble_and_task_from_hf_hub\n\nmodels, cfg, task = load_model_ensemble_and_task_from_hf_hub(\n    \"${model.id}\"\n)`,\n];\nexport const flair = (model) => [\n    `from flair.models import SequenceTagger\n\ntagger = SequenceTagger.load(\"${model.id}\")`,\n];\nexport const gliner = (model) => [\n    `from gliner import GLiNER\n\nmodel = GLiNER.from_pretrained(\"${model.id}\")`,\n];\nexport const htrflow = (model) => [\n    `# CLI usage\n# see docs: https://ai-riksarkivet.github.io/htrflow/latest/getting_started/quick_start.html\nhtrflow pipeline <path/to/pipeline.yaml> <path/to/image>`,\n    `# Python usage\nfrom htrflow.pipeline.pipeline import Pipeline\nfrom htrflow.pipeline.steps import Task\nfrom htrflow.models.framework.model import ModelClass\n\npipeline = Pipeline(\n    [\n        Task(\n            ModelClass, {\"model\": \"${model.id}\"}, {}\n        ),\n    ])`,\n];\nexport const keras = (model) => [\n    `# Available backend options are: \"jax\", \"torch\", \"tensorflow\".\nimport os\nos.environ[\"KERAS_BACKEND\"] = \"jax\"\n\t\nimport keras\n\nmodel = keras.saving.load_model(\"hf://${model.id}\")\n`,\n];\nconst _keras_hub_causal_lm = (modelId) => `\nimport keras_hub\n\n# Load CausalLM model (optional: use half precision for inference)\ncausal_lm = keras_hub.models.CausalLM.from_preset(\"hf://${modelId}\", dtype=\"bfloat16\")\ncausal_lm.compile(sampler=\"greedy\")  # (optional) specify a sampler\n\n# Generate text\ncausal_lm.generate(\"Keras: deep learning for\", max_length=64)\n`;\nconst _keras_hub_text_to_image = (modelId) => `\nimport keras_hub\n\n# Load TextToImage model (optional: use half precision for inference)\ntext_to_image = keras_hub.models.TextToImage.from_preset(\"hf://${modelId}\", dtype=\"bfloat16\")\n\n# Generate images with a TextToImage model.\ntext_to_image.generate(\"Astronaut in a jungle\")\n`;\nconst _keras_hub_text_classifier = (modelId) => `\nimport keras_hub\n\n# Load TextClassifier model\ntext_classifier = keras_hub.models.TextClassifier.from_preset(\n    \"hf://${modelId}\",\n    num_classes=2,\n)\n# Fine-tune\ntext_classifier.fit(x=[\"Thilling adventure!\", \"Total snoozefest.\"], y=[1, 0])\n# Classify text\ntext_classifier.predict([\"Not my cup of tea.\"])\n`;\nconst _keras_hub_image_classifier = (modelId) => `\nimport keras_hub\nimport keras\n\n# Load ImageClassifier model\nimage_classifier = keras_hub.models.ImageClassifier.from_preset(\n    \"hf://${modelId}\",\n    num_classes=2,\n)\n# Fine-tune\nimage_classifier.fit(\n    x=keras.random.randint((32, 64, 64, 3), 0, 256),\n    y=keras.random.randint((32, 1), 0, 2),\n)\n# Classify image\nimage_classifier.predict(keras.random.randint((1, 64, 64, 3), 0, 256))\n`;\nconst _keras_hub_tasks_with_example = {\n    CausalLM: _keras_hub_causal_lm,\n    TextToImage: _keras_hub_text_to_image,\n    TextClassifier: _keras_hub_text_classifier,\n    ImageClassifier: _keras_hub_image_classifier,\n};\nconst _keras_hub_task_without_example = (task, modelId) => `\nimport keras_hub\n\n# Create a ${task} model\ntask = keras_hub.models.${task}.from_preset(\"hf://${modelId}\")\n`;\nconst _keras_hub_generic_backbone = (modelId) => `\nimport keras_hub\n\n# Create a Backbone model unspecialized for any task\nbackbone = keras_hub.models.Backbone.from_preset(\"hf://${modelId}\")\n`;\nexport const keras_hub = (model) => {\n    const modelId = model.id;\n    const tasks = model.config?.keras_hub?.tasks ?? [];\n    const snippets = [];\n    // First, generate tasks with examples\n    for (const [task, snippet] of Object.entries(_keras_hub_tasks_with_example)) {\n        if (tasks.includes(task)) {\n            snippets.push(snippet(modelId));\n        }\n    }\n    // Then, add remaining tasks\n    for (const task of tasks) {\n        if (!Object.keys(_keras_hub_tasks_with_example).includes(task)) {\n            snippets.push(_keras_hub_task_without_example(task, modelId));\n        }\n    }\n    // Finally, add generic backbone snippet\n    snippets.push(_keras_hub_generic_backbone(modelId));\n    return snippets;\n};\nexport const llama_cpp_python = (model) => {\n    const snippets = [\n        `from llama_cpp import Llama\n\nllm = Llama.from_pretrained(\n\trepo_id=\"${model.id}\",\n\tfilename=\"{{GGUF_FILE}}\",\n)\n`,\n    ];\n    if (model.tags.includes(\"conversational\")) {\n        const messages = getModelInputSnippet(model);\n        snippets.push(`llm.create_chat_completion(\n\tmessages = ${stringifyMessages(messages, { attributeKeyQuotes: true, indent: \"\\t\" })}\n)`);\n    }\n    else {\n        snippets.push(`output = llm(\n\t\"Once upon a time,\",\n\tmax_tokens=512,\n\techo=True\n)\nprint(output)`);\n    }\n    return snippets;\n};\nexport const tf_keras = (model) => [\n    `# Note: 'keras<3.x' or 'tf_keras' must be installed (legacy)\n# See https://github.com/keras-team/tf-keras for more details.\nfrom huggingface_hub import from_pretrained_keras\n\nmodel = from_pretrained_keras(\"${model.id}\")\n`,\n];\nexport const mamba_ssm = (model) => [\n    `from mamba_ssm import MambaLMHeadModel\n\nmodel = MambaLMHeadModel.from_pretrained(\"${model.id}\")`,\n];\nexport const mars5_tts = (model) => [\n    `# Install from https://github.com/Camb-ai/MARS5-TTS\n\nfrom inference import Mars5TTS\nmars5 = Mars5TTS.from_pretrained(\"${model.id}\")`,\n];\nexport const matanyone = (model) => [\n    `# Install from https://github.com/pq-yang/MatAnyone.git\n\nfrom matanyone.model.matanyone import MatAnyone\nmodel = MatAnyone.from_pretrained(\"${model.id}\")`,\n];\nexport const mesh_anything = () => [\n    `# Install from https://github.com/buaacyw/MeshAnything.git\n\nfrom MeshAnything.models.meshanything import MeshAnything\n\n# refer to https://github.com/buaacyw/MeshAnything/blob/main/main.py#L91 on how to define args\n# and https://github.com/buaacyw/MeshAnything/blob/main/app.py regarding usage\nmodel = MeshAnything(args)`,\n];\nexport const open_clip = (model) => [\n    `import open_clip\n\nmodel, preprocess_train, preprocess_val = open_clip.create_model_and_transforms('hf-hub:${model.id}')\ntokenizer = open_clip.get_tokenizer('hf-hub:${model.id}')`,\n];\nexport const paddlenlp = (model) => {\n    if (model.config?.architectures?.[0]) {\n        const architecture = model.config.architectures[0];\n        return [\n            [\n                `from paddlenlp.transformers import AutoTokenizer, ${architecture}`,\n                \"\",\n                `tokenizer = AutoTokenizer.from_pretrained(\"${model.id}\", from_hf_hub=True)`,\n                `model = ${architecture}.from_pretrained(\"${model.id}\", from_hf_hub=True)`,\n            ].join(\"\\n\"),\n        ];\n    }\n    else {\n        return [\n            [\n                `# ⚠️ Type of model unknown`,\n                `from paddlenlp.transformers import AutoTokenizer, AutoModel`,\n                \"\",\n                `tokenizer = AutoTokenizer.from_pretrained(\"${model.id}\", from_hf_hub=True)`,\n                `model = AutoModel.from_pretrained(\"${model.id}\", from_hf_hub=True)`,\n            ].join(\"\\n\"),\n        ];\n    }\n};\nexport const pyannote_audio_pipeline = (model) => [\n    `from pyannote.audio import Pipeline\n  \npipeline = Pipeline.from_pretrained(\"${model.id}\")\n\n# inference on the whole file\npipeline(\"file.wav\")\n\n# inference on an excerpt\nfrom pyannote.core import Segment\nexcerpt = Segment(start=2.0, end=5.0)\n\nfrom pyannote.audio import Audio\nwaveform, sample_rate = Audio().crop(\"file.wav\", excerpt)\npipeline({\"waveform\": waveform, \"sample_rate\": sample_rate})`,\n];\nconst pyannote_audio_model = (model) => [\n    `from pyannote.audio import Model, Inference\n\nmodel = Model.from_pretrained(\"${model.id}\")\ninference = Inference(model)\n\n# inference on the whole file\ninference(\"file.wav\")\n\n# inference on an excerpt\nfrom pyannote.core import Segment\nexcerpt = Segment(start=2.0, end=5.0)\ninference.crop(\"file.wav\", excerpt)`,\n];\nexport const pyannote_audio = (model) => {\n    if (model.tags.includes(\"pyannote-audio-pipeline\")) {\n        return pyannote_audio_pipeline(model);\n    }\n    return pyannote_audio_model(model);\n};\nexport const relik = (model) => [\n    `from relik import Relik\n \nrelik = Relik.from_pretrained(\"${model.id}\")`,\n];\nconst tensorflowttsTextToMel = (model) => [\n    `from tensorflow_tts.inference import AutoProcessor, TFAutoModel\n\nprocessor = AutoProcessor.from_pretrained(\"${model.id}\")\nmodel = TFAutoModel.from_pretrained(\"${model.id}\")\n`,\n];\nconst tensorflowttsMelToWav = (model) => [\n    `from tensorflow_tts.inference import TFAutoModel\n\nmodel = TFAutoModel.from_pretrained(\"${model.id}\")\naudios = model.inference(mels)\n`,\n];\nconst tensorflowttsUnknown = (model) => [\n    `from tensorflow_tts.inference import TFAutoModel\n\nmodel = TFAutoModel.from_pretrained(\"${model.id}\")\n`,\n];\nexport const tensorflowtts = (model) => {\n    if (model.tags.includes(\"text-to-mel\")) {\n        return tensorflowttsTextToMel(model);\n    }\n    else if (model.tags.includes(\"mel-to-wav\")) {\n        return tensorflowttsMelToWav(model);\n    }\n    return tensorflowttsUnknown(model);\n};\nexport const timm = (model) => [\n    `import timm\n\nmodel = timm.create_model(\"hf_hub:${model.id}\", pretrained=True)`,\n];\nexport const saelens = ( /* model: ModelData */) => [\n    `# pip install sae-lens\nfrom sae_lens import SAE\n\nsae, cfg_dict, sparsity = SAE.from_pretrained(\n    release = \"RELEASE_ID\", # e.g., \"gpt2-small-res-jb\". See other options in https://github.com/jbloomAus/SAELens/blob/main/sae_lens/pretrained_saes.yaml\n    sae_id = \"SAE_ID\", # e.g., \"blocks.8.hook_resid_pre\". Won't always be a hook point\n)`,\n];\nexport const seed_story = () => [\n    `# seed_story_cfg_path refers to 'https://github.com/TencentARC/SEED-Story/blob/master/configs/clm_models/agent_7b_sft.yaml'\n# llm_cfg_path refers to 'https://github.com/TencentARC/SEED-Story/blob/master/configs/clm_models/llama2chat7b_lora.yaml'\nfrom omegaconf import OmegaConf\nimport hydra\n\n# load Llama2\nllm_cfg = OmegaConf.load(llm_cfg_path)\nllm = hydra.utils.instantiate(llm_cfg, torch_dtype=\"fp16\")\n\n# initialize seed_story\nseed_story_cfg = OmegaConf.load(seed_story_cfg_path)\nseed_story = hydra.utils.instantiate(seed_story_cfg, llm=llm) `,\n];\nconst skopsPickle = (model, modelFile) => {\n    return [\n        `import joblib\nfrom skops.hub_utils import download\ndownload(\"${model.id}\", \"path_to_folder\")\nmodel = joblib.load(\n\t\"${modelFile}\"\n)\n# only load pickle files from sources you trust\n# read more about it here https://skops.readthedocs.io/en/stable/persistence.html`,\n    ];\n};\nconst skopsFormat = (model, modelFile) => {\n    return [\n        `from skops.hub_utils import download\nfrom skops.io import load\ndownload(\"${model.id}\", \"path_to_folder\")\n# make sure model file is in skops format\n# if model is a pickle file, make sure it's from a source you trust\nmodel = load(\"path_to_folder/${modelFile}\")`,\n    ];\n};\nconst skopsJobLib = (model) => {\n    return [\n        `from huggingface_hub import hf_hub_download\nimport joblib\nmodel = joblib.load(\n\thf_hub_download(\"${model.id}\", \"sklearn_model.joblib\")\n)\n# only load pickle files from sources you trust\n# read more about it here https://skops.readthedocs.io/en/stable/persistence.html`,\n    ];\n};\nexport const sklearn = (model) => {\n    if (model.tags.includes(\"skops\")) {\n        const skopsmodelFile = model.config?.sklearn?.model?.file;\n        const skopssaveFormat = model.config?.sklearn?.model_format;\n        if (!skopsmodelFile) {\n            return [`# ⚠️ Model filename not specified in config.json`];\n        }\n        if (skopssaveFormat === \"pickle\") {\n            return skopsPickle(model, skopsmodelFile);\n        }\n        else {\n            return skopsFormat(model, skopsmodelFile);\n        }\n    }\n    else {\n        return skopsJobLib(model);\n    }\n};\nexport const stable_audio_tools = (model) => [\n    `import torch\nimport torchaudio\nfrom einops import rearrange\nfrom stable_audio_tools import get_pretrained_model\nfrom stable_audio_tools.inference.generation import generate_diffusion_cond\n\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# Download model\nmodel, model_config = get_pretrained_model(\"${model.id}\")\nsample_rate = model_config[\"sample_rate\"]\nsample_size = model_config[\"sample_size\"]\n\nmodel = model.to(device)\n\n# Set up text and timing conditioning\nconditioning = [{\n\t\"prompt\": \"128 BPM tech house drum loop\",\n}]\n\n# Generate stereo audio\noutput = generate_diffusion_cond(\n\tmodel,\n\tconditioning=conditioning,\n\tsample_size=sample_size,\n\tdevice=device\n)\n\n# Rearrange audio batch to a single sequence\noutput = rearrange(output, \"b d n -> d (b n)\")\n\n# Peak normalize, clip, convert to int16, and save to file\noutput = output.to(torch.float32).div(torch.max(torch.abs(output))).clamp(-1, 1).mul(32767).to(torch.int16).cpu()\ntorchaudio.save(\"output.wav\", output, sample_rate)`,\n];\nexport const fastai = (model) => [\n    `from huggingface_hub import from_pretrained_fastai\n\nlearn = from_pretrained_fastai(\"${model.id}\")`,\n];\nexport const sam2 = (model) => {\n    const image_predictor = `# Use SAM2 with images\nimport torch\nfrom sam2.sam2_image_predictor import SAM2ImagePredictor\n\npredictor = SAM2ImagePredictor.from_pretrained(${model.id})\n\nwith torch.inference_mode(), torch.autocast(\"cuda\", dtype=torch.bfloat16):\n    predictor.set_image(<your_image>)\n    masks, _, _ = predictor.predict(<input_prompts>)`;\n    const video_predictor = `# Use SAM2 with videos\nimport torch\nfrom sam2.sam2_video_predictor import SAM2VideoPredictor\n\t\npredictor = SAM2VideoPredictor.from_pretrained(${model.id})\n\nwith torch.inference_mode(), torch.autocast(\"cuda\", dtype=torch.bfloat16):\n    state = predictor.init_state(<your_video>)\n\n    # add new prompts and instantly get the output on the same frame\n    frame_idx, object_ids, masks = predictor.add_new_points(state, <your_prompts>):\n\n    # propagate the prompts to get masklets throughout the video\n    for frame_idx, object_ids, masks in predictor.propagate_in_video(state):\n        ...`;\n    return [image_predictor, video_predictor];\n};\nexport const sampleFactory = (model) => [\n    `python -m sample_factory.huggingface.load_from_hub -r ${model.id} -d ./train_dir`,\n];\nfunction get_widget_examples_from_st_model(model) {\n    const widgetExample = model.widgetData?.[0];\n    if (widgetExample) {\n        return [widgetExample.source_sentence, ...widgetExample.sentences];\n    }\n}\nexport const sentenceTransformers = (model) => {\n    const remote_code_snippet = model.tags.includes(TAG_CUSTOM_CODE) ? \", trust_remote_code=True\" : \"\";\n    const exampleSentences = get_widget_examples_from_st_model(model) ?? [\n        \"The weather is lovely today.\",\n        \"It's so sunny outside!\",\n        \"He drove to the stadium.\",\n    ];\n    return [\n        `from sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer(\"${model.id}\"${remote_code_snippet})\n\nsentences = ${JSON.stringify(exampleSentences, null, 4)}\nembeddings = model.encode(sentences)\n\nsimilarities = model.similarity(embeddings, embeddings)\nprint(similarities.shape)\n# [${exampleSentences.length}, ${exampleSentences.length}]`,\n    ];\n};\nexport const setfit = (model) => [\n    `from setfit import SetFitModel\n\nmodel = SetFitModel.from_pretrained(\"${model.id}\")`,\n];\nexport const spacy = (model) => [\n    `!pip install https://huggingface.co/${model.id}/resolve/main/${nameWithoutNamespace(model.id)}-any-py3-none-any.whl\n\n# Using spacy.load().\nimport spacy\nnlp = spacy.load(\"${nameWithoutNamespace(model.id)}\")\n\n# Importing as module.\nimport ${nameWithoutNamespace(model.id)}\nnlp = ${nameWithoutNamespace(model.id)}.load()`,\n];\nexport const span_marker = (model) => [\n    `from span_marker import SpanMarkerModel\n\nmodel = SpanMarkerModel.from_pretrained(\"${model.id}\")`,\n];\nexport const stanza = (model) => [\n    `import stanza\n\nstanza.download(\"${nameWithoutNamespace(model.id).replace(\"stanza-\", \"\")}\")\nnlp = stanza.Pipeline(\"${nameWithoutNamespace(model.id).replace(\"stanza-\", \"\")}\")`,\n];\nconst speechBrainMethod = (speechbrainInterface) => {\n    switch (speechbrainInterface) {\n        case \"EncoderClassifier\":\n            return \"classify_file\";\n        case \"EncoderDecoderASR\":\n        case \"EncoderASR\":\n            return \"transcribe_file\";\n        case \"SpectralMaskEnhancement\":\n            return \"enhance_file\";\n        case \"SepformerSeparation\":\n            return \"separate_file\";\n        default:\n            return undefined;\n    }\n};\nexport const speechbrain = (model) => {\n    const speechbrainInterface = model.config?.speechbrain?.speechbrain_interface;\n    if (speechbrainInterface === undefined) {\n        return [`# interface not specified in config.json`];\n    }\n    const speechbrainMethod = speechBrainMethod(speechbrainInterface);\n    if (speechbrainMethod === undefined) {\n        return [`# interface in config.json invalid`];\n    }\n    return [\n        `from speechbrain.pretrained import ${speechbrainInterface}\nmodel = ${speechbrainInterface}.from_hparams(\n  \"${model.id}\"\n)\nmodel.${speechbrainMethod}(\"file.wav\")`,\n    ];\n};\nexport const terratorch = (model) => [\n    `from terratorch.registry import BACKBONE_REGISTRY\n\nmodel = BACKBONE_REGISTRY.build(\"${model.id}\")`,\n];\nexport const transformers = (model) => {\n    const info = model.transformersInfo;\n    if (!info) {\n        return [`# ⚠️ Type of model unknown`];\n    }\n    const remote_code_snippet = model.tags.includes(TAG_CUSTOM_CODE) ? \", trust_remote_code=True\" : \"\";\n    let autoSnippet;\n    if (info.processor) {\n        const varName = info.processor === \"AutoTokenizer\"\n            ? \"tokenizer\"\n            : info.processor === \"AutoFeatureExtractor\"\n                ? \"extractor\"\n                : \"processor\";\n        autoSnippet = [\n            \"# Load model directly\",\n            `from transformers import ${info.processor}, ${info.auto_model}`,\n            \"\",\n            `${varName} = ${info.processor}.from_pretrained(\"${model.id}\"` + remote_code_snippet + \")\",\n            `model = ${info.auto_model}.from_pretrained(\"${model.id}\"` + remote_code_snippet + \")\",\n        ].join(\"\\n\");\n    }\n    else {\n        autoSnippet = [\n            \"# Load model directly\",\n            `from transformers import ${info.auto_model}`,\n            `model = ${info.auto_model}.from_pretrained(\"${model.id}\"` + remote_code_snippet + \")\",\n        ].join(\"\\n\");\n    }\n    if (model.pipeline_tag && LIBRARY_TASK_MAPPING.transformers?.includes(model.pipeline_tag)) {\n        const pipelineSnippet = [\"# Use a pipeline as a high-level helper\", \"from transformers import pipeline\", \"\"];\n        if (model.tags.includes(\"conversational\") && model.config?.tokenizer_config?.chat_template) {\n            pipelineSnippet.push(\"messages = [\", '    {\"role\": \"user\", \"content\": \"Who are you?\"},', \"]\");\n        }\n        pipelineSnippet.push(`pipe = pipeline(\"${model.pipeline_tag}\", model=\"${model.id}\"` + remote_code_snippet + \")\");\n        if (model.tags.includes(\"conversational\") && model.config?.tokenizer_config?.chat_template) {\n            pipelineSnippet.push(\"pipe(messages)\");\n        }\n        return [pipelineSnippet.join(\"\\n\"), autoSnippet];\n    }\n    return [autoSnippet];\n};\nexport const transformersJS = (model) => {\n    if (!model.pipeline_tag) {\n        return [`// ⚠️ Unknown pipeline tag`];\n    }\n    const libName = \"@huggingface/transformers\";\n    return [\n        `// npm i ${libName}\nimport { pipeline } from '${libName}';\n\n// Allocate pipeline\nconst pipe = await pipeline('${model.pipeline_tag}', '${model.id}');`,\n    ];\n};\nconst peftTask = (peftTaskType) => {\n    switch (peftTaskType) {\n        case \"CAUSAL_LM\":\n            return \"CausalLM\";\n        case \"SEQ_2_SEQ_LM\":\n            return \"Seq2SeqLM\";\n        case \"TOKEN_CLS\":\n            return \"TokenClassification\";\n        case \"SEQ_CLS\":\n            return \"SequenceClassification\";\n        default:\n            return undefined;\n    }\n};\nexport const peft = (model) => {\n    const { base_model_name_or_path: peftBaseModel, task_type: peftTaskType } = model.config?.peft ?? {};\n    const pefttask = peftTask(peftTaskType);\n    if (!pefttask) {\n        return [`Task type is invalid.`];\n    }\n    if (!peftBaseModel) {\n        return [`Base model is not found.`];\n    }\n    return [\n        `from peft import PeftModel\nfrom transformers import AutoModelFor${pefttask}\n\nbase_model = AutoModelFor${pefttask}.from_pretrained(\"${peftBaseModel}\")\nmodel = PeftModel.from_pretrained(base_model, \"${model.id}\")`,\n    ];\n};\nexport const fasttext = (model) => [\n    `from huggingface_hub import hf_hub_download\nimport fasttext\n\nmodel = fasttext.load_model(hf_hub_download(\"${model.id}\", \"model.bin\"))`,\n];\nexport const stableBaselines3 = (model) => [\n    `from huggingface_sb3 import load_from_hub\ncheckpoint = load_from_hub(\n\trepo_id=\"${model.id}\",\n\tfilename=\"{MODEL FILENAME}.zip\",\n)`,\n];\nconst nemoDomainResolver = (domain, model) => {\n    switch (domain) {\n        case \"ASR\":\n            return [\n                `import nemo.collections.asr as nemo_asr\nasr_model = nemo_asr.models.ASRModel.from_pretrained(\"${model.id}\")\n\ntranscriptions = asr_model.transcribe([\"file.wav\"])`,\n            ];\n        default:\n            return undefined;\n    }\n};\nexport const mlAgents = (model) => [\n    `mlagents-load-from-hf --repo-id=\"${model.id}\" --local-dir=\"./download: string[]s\"`,\n];\nexport const sentis = ( /* model: ModelData */) => [\n    `string modelName = \"[Your model name here].sentis\";\nModel model = ModelLoader.Load(Application.streamingAssetsPath + \"/\" + modelName);\nIWorker engine = WorkerFactory.CreateWorker(BackendType.GPUCompute, model);\n// Please see provided C# file for more details\n`,\n];\nexport const sana = (model) => [\n    `\n# Load the model and infer image from text\nimport torch\nfrom app.sana_pipeline import SanaPipeline\nfrom torchvision.utils import save_image\n\nsana = SanaPipeline(\"configs/sana_config/1024ms/Sana_1600M_img1024.yaml\")\nsana.from_pretrained(\"hf://${model.id}\")\n\nimage = sana(\n    prompt='a cyberpunk cat with a neon sign that says \"Sana\"',\n    height=1024,\n    width=1024,\n    guidance_scale=5.0,\n    pag_guidance_scale=2.0,\n    num_inference_steps=18,\n) `,\n];\nexport const vfimamba = (model) => [\n    `from Trainer_finetune import Model\n\nmodel = Model.from_pretrained(\"${model.id}\")`,\n];\nexport const voicecraft = (model) => [\n    `from voicecraft import VoiceCraft\n\nmodel = VoiceCraft.from_pretrained(\"${model.id}\")`,\n];\nexport const chattts = () => [\n    `import ChatTTS\nimport torchaudio\n\nchat = ChatTTS.Chat()\nchat.load_models(compile=False) # Set to True for better performance\n\ntexts = [\"PUT YOUR TEXT HERE\",]\n\nwavs = chat.infer(texts, )\n\ntorchaudio.save(\"output1.wav\", torch.from_numpy(wavs[0]), 24000)`,\n];\nexport const ultralytics = (model) => {\n    // ultralytics models must have a version tag (e.g. `yolov8`)\n    const versionTag = model.tags.find((tag) => tag.match(/^yolov\\d+$/));\n    const className = versionTag ? `YOLOv${versionTag.slice(4)}` : \"YOLOvXX\";\n    const prefix = versionTag\n        ? \"\"\n        : `# Couldn't find a valid YOLO version tag.\\n# Replace XX with the correct version.\\n`;\n    return [\n        prefix +\n            `from ultralytics import ${className}\n\nmodel = ${className}.from_pretrained(\"${model.id}\")\nsource = 'http://images.cocodataset.org/val2017/000000039769.jpg'\nmodel.predict(source=source, save=True)`,\n    ];\n};\nexport const birefnet = (model) => [\n    `# Option 1: use with transformers\n\nfrom transformers import AutoModelForImageSegmentation\nbirefnet = AutoModelForImageSegmentation.from_pretrained(\"${model.id}\", trust_remote_code=True)\n`,\n    `# Option 2: use with BiRefNet\n\n# Install from https://github.com/ZhengPeng7/BiRefNet\n\nfrom models.birefnet import BiRefNet\nmodel = BiRefNet.from_pretrained(\"${model.id}\")`,\n];\nexport const swarmformer = (model) => [\n    `from swarmformer import SwarmFormerModel\n\nmodel = SwarmFormerModel.from_pretrained(\"${model.id}\")\n`,\n];\nexport const mlx = (model) => [\n    `pip install huggingface_hub hf_transfer\n\nexport HF_HUB_ENABLE_HF_TRANSFER=1\nhuggingface-cli download --local-dir ${nameWithoutNamespace(model.id)} ${model.id}`,\n];\nexport const mlxim = (model) => [\n    `from mlxim.model import create_model\n\nmodel = create_model(${model.id})`,\n];\nexport const model2vec = (model) => [\n    `from model2vec import StaticModel\n\nmodel = StaticModel.from_pretrained(\"${model.id}\")`,\n];\nexport const nemo = (model) => {\n    let command = undefined;\n    // Resolve the tag to a nemo domain/sub-domain\n    if (model.tags.includes(\"automatic-speech-recognition\")) {\n        command = nemoDomainResolver(\"ASR\", model);\n    }\n    return command ?? [`# tag did not correspond to a valid NeMo domain.`];\n};\nexport const pxia = (model) => [\n    `from pxia import AutoModel\n\nmodel = AutoModel.from_pretrained(\"${model.id}\")`,\n];\nexport const pythae = (model) => [\n    `from pythae.models import AutoModel\n\nmodel = AutoModel.load_from_hf_hub(\"${model.id}\")`,\n];\nconst musicgen = (model) => [\n    `from audiocraft.models import MusicGen\n\nmodel = MusicGen.get_pretrained(\"${model.id}\")\n\ndescriptions = ['happy rock', 'energetic EDM', 'sad jazz']\nwav = model.generate(descriptions)  # generates 3 samples.`,\n];\nconst magnet = (model) => [\n    `from audiocraft.models import MAGNeT\n\t\nmodel = MAGNeT.get_pretrained(\"${model.id}\")\n\ndescriptions = ['disco beat', 'energetic EDM', 'funky groove']\nwav = model.generate(descriptions)  # generates 3 samples.`,\n];\nconst audiogen = (model) => [\n    `from audiocraft.models import AudioGen\n\t\nmodel = AudioGen.get_pretrained(\"${model.id}\")\nmodel.set_generation_params(duration=5)  # generate 5 seconds.\ndescriptions = ['dog barking', 'sirene of an emergency vehicle', 'footsteps in a corridor']\nwav = model.generate(descriptions)  # generates 3 samples.`,\n];\nexport const anemoi = (model) => [\n    `from anemoi.inference.runners.default import DefaultRunner\nfrom anemoi.inference.config import Configuration\n# Create Configuration\nconfig = Configuration(checkpoint = {\"huggingface\":{\"repo_id\":\"${model.id}\"}})\n# Load Runner\nrunner = DefaultRunner(config)`,\n];\nexport const audiocraft = (model) => {\n    if (model.tags.includes(\"musicgen\")) {\n        return musicgen(model);\n    }\n    else if (model.tags.includes(\"audiogen\")) {\n        return audiogen(model);\n    }\n    else if (model.tags.includes(\"magnet\")) {\n        return magnet(model);\n    }\n    else {\n        return [`# Type of model unknown.`];\n    }\n};\nexport const whisperkit = () => [\n    `# Install CLI with Homebrew on macOS device\nbrew install whisperkit-cli\n\n# View all available inference options\nwhisperkit-cli transcribe --help\n\t\n# Download and run inference using whisper base model\nwhisperkit-cli transcribe --audio-path /path/to/audio.mp3\n\n# Or use your preferred model variant\nwhisperkit-cli transcribe --model \"large-v3\" --model-prefix \"distil\" --audio-path /path/to/audio.mp3 --verbose`,\n];\nexport const threedtopia_xl = (model) => [\n    `from threedtopia_xl.models import threedtopia_xl\n\nmodel = threedtopia_xl.from_pretrained(\"${model.id}\")\nmodel.generate(cond=\"path/to/image.png\")`,\n];\nexport const hezar = (model) => [\n    `from hezar import Model\n\nmodel = Model.load(\"${model.id}\")`,\n];\n//#endregion\n", "import * as snippets from \"./model-libraries-snippets.js\";\n/**\n * Add your new library here.\n *\n * This is for modeling (= architectures) libraries, not for file formats (like ONNX, etc).\n * (unlike libraries, file formats live in an enum inside the internal codebase.)\n *\n * Doc on how to add a library to the Hub:\n *\n * https://huggingface.co/docs/hub/models-adding-libraries\n *\n * /!\\ IMPORTANT\n *\n * The key you choose is the tag your models have in their library_name on the Hub.\n */\nexport const MODEL_LIBRARIES_UI_ELEMENTS = {\n    \"adapter-transformers\": {\n        prettyLabel: \"Adapters\",\n        repoName: \"adapters\",\n        repoUrl: \"https://github.com/Adapter-Hub/adapters\",\n        docsUrl: \"https://huggingface.co/docs/hub/adapters\",\n        snippets: snippets.adapters,\n        filter: true,\n        countDownloads: `path:\"adapter_config.json\"`,\n    },\n    allennlp: {\n        prettyLabel: \"AllenNLP\",\n        repoName: \"AllenNLP\",\n        repoUrl: \"https://github.com/allenai/allennlp\",\n        docsUrl: \"https://huggingface.co/docs/hub/allennlp\",\n        snippets: snippets.allennlp,\n        filter: true,\n    },\n    anemoi: {\n        prettyLabel: \"AnemoI\",\n        repoName: \"AnemoI\",\n        repoUrl: \"https://github.com/ecmwf/anemoi-inference\",\n        docsUrl: \"https://anemoi-docs.readthedocs.io/en/latest/\",\n        filter: false,\n        countDownloads: `path_extension:\"ckpt\"`,\n        snippets: snippets.anemoi,\n    },\n    araclip: {\n        prettyLabel: \"AraClip\",\n        repoName: \"AraClip\",\n        repoUrl: \"https://huggingface.co/Arabic-Clip/araclip\",\n        filter: false,\n        snippets: snippets.araclip,\n    },\n    asteroid: {\n        prettyLabel: \"Asteroid\",\n        repoName: \"Asteroid\",\n        repoUrl: \"https://github.com/asteroid-team/asteroid\",\n        docsUrl: \"https://huggingface.co/docs/hub/asteroid\",\n        snippets: snippets.asteroid,\n        filter: true,\n        countDownloads: `path:\"pytorch_model.bin\"`,\n    },\n    audiocraft: {\n        prettyLabel: \"Audiocraft\",\n        repoName: \"audiocraft\",\n        repoUrl: \"https://github.com/facebookresearch/audiocraft\",\n        snippets: snippets.audiocraft,\n        filter: false,\n        countDownloads: `path:\"state_dict.bin\"`,\n    },\n    audioseal: {\n        prettyLabel: \"AudioSeal\",\n        repoName: \"audioseal\",\n        repoUrl: \"https://github.com/facebookresearch/audioseal\",\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`,\n        snippets: snippets.audioseal,\n    },\n    ben2: {\n        prettyLabel: \"BEN2\",\n        repoName: \"BEN2\",\n        repoUrl: \"https://github.com/PramaLLC/BEN2\",\n        snippets: snippets.ben2,\n        filter: false,\n    },\n    bertopic: {\n        prettyLabel: \"BERTopic\",\n        repoName: \"BERTopic\",\n        repoUrl: \"https://github.com/MaartenGr/BERTopic\",\n        snippets: snippets.bertopic,\n        filter: true,\n    },\n    big_vision: {\n        prettyLabel: \"Big Vision\",\n        repoName: \"big_vision\",\n        repoUrl: \"https://github.com/google-research/big_vision\",\n        filter: false,\n        countDownloads: `path_extension:\"npz\"`,\n    },\n    birder: {\n        prettyLabel: \"Birder\",\n        repoName: \"Birder\",\n        repoUrl: \"https://gitlab.com/birder/birder\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`,\n    },\n    birefnet: {\n        prettyLabel: \"BiRefNet\",\n        repoName: \"BiRefNet\",\n        repoUrl: \"https://github.com/ZhengPeng7/BiRefNet\",\n        snippets: snippets.birefnet,\n        filter: false,\n    },\n    bm25s: {\n        prettyLabel: \"BM25S\",\n        repoName: \"bm25s\",\n        repoUrl: \"https://github.com/xhluca/bm25s\",\n        snippets: snippets.bm25s,\n        filter: false,\n        countDownloads: `path:\"params.index.json\"`,\n    },\n    champ: {\n        prettyLabel: \"Champ\",\n        repoName: \"Champ\",\n        repoUrl: \"https://github.com/fudan-generative-vision/champ\",\n        countDownloads: `path:\"champ/motion_module.pth\"`,\n    },\n    chat_tts: {\n        prettyLabel: \"ChatTTS\",\n        repoName: \"ChatTTS\",\n        repoUrl: \"https://github.com/2noise/ChatTTS.git\",\n        snippets: snippets.chattts,\n        filter: false,\n        countDownloads: `path:\"asset/GPT.pt\"`,\n    },\n    colpali: {\n        prettyLabel: \"ColPali\",\n        repoName: \"ColPali\",\n        repoUrl: \"https://github.com/ManuelFay/colpali\",\n        filter: false,\n        countDownloads: `path:\"adapter_config.json\"`,\n    },\n    comet: {\n        prettyLabel: \"COMET\",\n        repoName: \"COMET\",\n        repoUrl: \"https://github.com/Unbabel/COMET/\",\n        countDownloads: `path:\"hparams.yaml\"`,\n    },\n    cosmos: {\n        prettyLabel: \"Cosmos\",\n        repoName: \"Cosmos\",\n        repoUrl: \"https://github.com/NVIDIA/Cosmos\",\n        countDownloads: `path:\"config.json\" OR path_extension:\"pt\"`,\n    },\n    \"cxr-foundation\": {\n        prettyLabel: \"CXR Foundation\",\n        repoName: \"cxr-foundation\",\n        repoUrl: \"https://github.com/google-health/cxr-foundation\",\n        snippets: snippets.cxr_foundation,\n        filter: false,\n        countDownloads: `path:\"precomputed_embeddings/embeddings.npz\" OR path:\"pax-elixr-b-text/saved_model.pb\"`,\n    },\n    deepforest: {\n        prettyLabel: \"DeepForest\",\n        repoName: \"deepforest\",\n        docsUrl: \"https://deepforest.readthedocs.io/en/latest/\",\n        repoUrl: \"https://github.com/weecology/DeepForest\",\n    },\n    \"depth-anything-v2\": {\n        prettyLabel: \"DepthAnythingV2\",\n        repoName: \"Depth Anything V2\",\n        repoUrl: \"https://github.com/DepthAnything/Depth-Anything-V2\",\n        snippets: snippets.depth_anything_v2,\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`,\n    },\n    \"depth-pro\": {\n        prettyLabel: \"Depth Pro\",\n        repoName: \"Depth Pro\",\n        repoUrl: \"https://github.com/apple/ml-depth-pro\",\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: snippets.depth_pro,\n        filter: false,\n    },\n    \"derm-foundation\": {\n        prettyLabel: \"Derm Foundation\",\n        repoName: \"derm-foundation\",\n        repoUrl: \"https://github.com/google-health/derm-foundation\",\n        snippets: snippets.derm_foundation,\n        filter: false,\n        countDownloads: `path:\"scin_dataset_precomputed_embeddings.npz\" OR path:\"saved_model.pb\"`,\n    },\n    diffree: {\n        prettyLabel: \"Diffree\",\n        repoName: \"Diffree\",\n        repoUrl: \"https://github.com/OpenGVLab/Diffree\",\n        filter: false,\n        countDownloads: `path:\"diffree-step=000010999.ckpt\"`,\n    },\n    diffusers: {\n        prettyLabel: \"Diffusers\",\n        repoName: \"🤗/diffusers\",\n        repoUrl: \"https://github.com/huggingface/diffusers\",\n        docsUrl: \"https://huggingface.co/docs/hub/diffusers\",\n        snippets: snippets.diffusers,\n        filter: true,\n        /// diffusers has its own more complex \"countDownloads\" query\n    },\n    diffusionkit: {\n        prettyLabel: \"DiffusionKit\",\n        repoName: \"DiffusionKit\",\n        repoUrl: \"https://github.com/argmaxinc/DiffusionKit\",\n        snippets: snippets.diffusionkit,\n    },\n    doctr: {\n        prettyLabel: \"docTR\",\n        repoName: \"doctr\",\n        repoUrl: \"https://github.com/mindee/doctr\",\n    },\n    cartesia_pytorch: {\n        prettyLabel: \"Cartesia Pytorch\",\n        repoName: \"Cartesia Pytorch\",\n        repoUrl: \"https://github.com/cartesia-ai/cartesia_pytorch\",\n        snippets: snippets.cartesia_pytorch,\n    },\n    cartesia_mlx: {\n        prettyLabel: \"Cartesia MLX\",\n        repoName: \"Cartesia MLX\",\n        repoUrl: \"https://github.com/cartesia-ai/cartesia_mlx\",\n        snippets: snippets.cartesia_mlx,\n    },\n    clipscope: {\n        prettyLabel: \"clipscope\",\n        repoName: \"clipscope\",\n        repoUrl: \"https://github.com/Lewington-pitsos/clipscope\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`,\n    },\n    cosyvoice: {\n        prettyLabel: \"CosyVoice\",\n        repoName: \"CosyVoice\",\n        repoUrl: \"https://github.com/FunAudioLLM/CosyVoice\",\n        filter: false,\n        countDownloads: `path_extension:\"onnx\" OR path_extension:\"pt\"`,\n    },\n    cotracker: {\n        prettyLabel: \"CoTracker\",\n        repoName: \"CoTracker\",\n        repoUrl: \"https://github.com/facebookresearch/co-tracker\",\n        filter: false,\n        countDownloads: `path_extension:\"pth\"`,\n    },\n    edsnlp: {\n        prettyLabel: \"EDS-NLP\",\n        repoName: \"edsnlp\",\n        repoUrl: \"https://github.com/aphp/edsnlp\",\n        docsUrl: \"https://aphp.github.io/edsnlp/latest/\",\n        filter: false,\n        snippets: snippets.edsnlp,\n        countDownloads: `path_filename:\"config\" AND path_extension:\"cfg\"`,\n    },\n    elm: {\n        prettyLabel: \"ELM\",\n        repoName: \"elm\",\n        repoUrl: \"https://github.com/slicex-ai/elm\",\n        filter: false,\n        countDownloads: `path_filename:\"slicex_elm_config\" AND path_extension:\"json\"`,\n    },\n    espnet: {\n        prettyLabel: \"ESPnet\",\n        repoName: \"ESPnet\",\n        repoUrl: \"https://github.com/espnet/espnet\",\n        docsUrl: \"https://huggingface.co/docs/hub/espnet\",\n        snippets: snippets.espnet,\n        filter: true,\n    },\n    fairseq: {\n        prettyLabel: \"Fairseq\",\n        repoName: \"fairseq\",\n        repoUrl: \"https://github.com/pytorch/fairseq\",\n        snippets: snippets.fairseq,\n        filter: true,\n    },\n    fastai: {\n        prettyLabel: \"fastai\",\n        repoName: \"fastai\",\n        repoUrl: \"https://github.com/fastai/fastai\",\n        docsUrl: \"https://huggingface.co/docs/hub/fastai\",\n        snippets: snippets.fastai,\n        filter: true,\n    },\n    fasttext: {\n        prettyLabel: \"fastText\",\n        repoName: \"fastText\",\n        repoUrl: \"https://fasttext.cc/\",\n        snippets: snippets.fasttext,\n        filter: true,\n        countDownloads: `path_extension:\"bin\"`,\n    },\n    flair: {\n        prettyLabel: \"Flair\",\n        repoName: \"Flair\",\n        repoUrl: \"https://github.com/flairNLP/flair\",\n        docsUrl: \"https://huggingface.co/docs/hub/flair\",\n        snippets: snippets.flair,\n        filter: true,\n        countDownloads: `path:\"pytorch_model.bin\"`,\n    },\n    \"gemma.cpp\": {\n        prettyLabel: \"gemma.cpp\",\n        repoName: \"gemma.cpp\",\n        repoUrl: \"https://github.com/google/gemma.cpp\",\n        filter: false,\n        countDownloads: `path_extension:\"sbs\"`,\n    },\n    gliner: {\n        prettyLabel: \"GLiNER\",\n        repoName: \"GLiNER\",\n        repoUrl: \"https://github.com/urchade/GLiNER\",\n        snippets: snippets.gliner,\n        filter: false,\n        countDownloads: `path:\"gliner_config.json\"`,\n    },\n    \"glyph-byt5\": {\n        prettyLabel: \"Glyph-ByT5\",\n        repoName: \"Glyph-ByT5\",\n        repoUrl: \"https://github.com/AIGText/Glyph-ByT5\",\n        filter: false,\n        countDownloads: `path:\"checkpoints/byt5_model.pt\"`,\n    },\n    grok: {\n        prettyLabel: \"Grok\",\n        repoName: \"Grok\",\n        repoUrl: \"https://github.com/xai-org/grok-1\",\n        filter: false,\n        countDownloads: `path:\"ckpt/tensor00000_000\" OR path:\"ckpt-0/tensor00000_000\"`,\n    },\n    hallo: {\n        prettyLabel: \"Hallo\",\n        repoName: \"Hallo\",\n        repoUrl: \"https://github.com/fudan-generative-vision/hallo\",\n        countDownloads: `path:\"hallo/net.pth\"`,\n    },\n    hezar: {\n        prettyLabel: \"Hezar\",\n        repoName: \"Hezar\",\n        repoUrl: \"https://github.com/hezarai/hezar\",\n        docsUrl: \"https://hezarai.github.io/hezar\",\n        countDownloads: `path:\"model_config.yaml\" OR path:\"embedding/embedding_config.yaml\"`,\n    },\n    htrflow: {\n        prettyLabel: \"HTRflow\",\n        repoName: \"HTRflow\",\n        repoUrl: \"https://github.com/AI-Riksarkivet/htrflow\",\n        docsUrl: \"https://ai-riksarkivet.github.io/htrflow\",\n        snippets: snippets.htrflow,\n    },\n    \"hunyuan-dit\": {\n        prettyLabel: \"HunyuanDiT\",\n        repoName: \"HunyuanDiT\",\n        repoUrl: \"https://github.com/Tencent/HunyuanDiT\",\n        countDownloads: `path:\"pytorch_model_ema.pt\" OR path:\"pytorch_model_distill.pt\"`,\n    },\n    \"hunyuan3d-2\": {\n        prettyLabel: \"Hunyuan3D-2\",\n        repoName: \"Hunyuan3D-2\",\n        repoUrl: \"https://github.com/Tencent/Hunyuan3D-2\",\n        countDownloads: `path_filename:\"model_index\" OR path_filename:\"config\"`,\n    },\n    imstoucan: {\n        prettyLabel: \"IMS Toucan\",\n        repoName: \"IMS-Toucan\",\n        repoUrl: \"https://github.com/DigitalPhonetics/IMS-Toucan\",\n        countDownloads: `path:\"embedding_gan.pt\" OR path:\"Vocoder.pt\" OR path:\"ToucanTTS.pt\"`,\n    },\n    keras: {\n        prettyLabel: \"Keras\",\n        repoName: \"Keras\",\n        repoUrl: \"https://github.com/keras-team/keras\",\n        docsUrl: \"https://huggingface.co/docs/hub/keras\",\n        snippets: snippets.keras,\n        filter: true,\n        countDownloads: `path:\"config.json\" OR path_extension:\"keras\"`,\n    },\n    \"tf-keras\": {\n        // Legacy \"Keras 2\" library (tensorflow-only)\n        prettyLabel: \"TF-Keras\",\n        repoName: \"TF-Keras\",\n        repoUrl: \"https://github.com/keras-team/tf-keras\",\n        docsUrl: \"https://huggingface.co/docs/hub/tf-keras\",\n        snippets: snippets.tf_keras,\n        countDownloads: `path:\"saved_model.pb\"`,\n    },\n    \"keras-hub\": {\n        prettyLabel: \"KerasHub\",\n        repoName: \"KerasHub\",\n        repoUrl: \"https://github.com/keras-team/keras-hub\",\n        docsUrl: \"https://keras.io/keras_hub/\",\n        snippets: snippets.keras_hub,\n        filter: true,\n    },\n    k2: {\n        prettyLabel: \"K2\",\n        repoName: \"k2\",\n        repoUrl: \"https://github.com/k2-fsa/k2\",\n    },\n    liveportrait: {\n        prettyLabel: \"LivePortrait\",\n        repoName: \"LivePortrait\",\n        repoUrl: \"https://github.com/KwaiVGI/LivePortrait\",\n        filter: false,\n        countDownloads: `path:\"liveportrait/landmark.onnx\"`,\n    },\n    \"llama-cpp-python\": {\n        prettyLabel: \"llama-cpp-python\",\n        repoName: \"llama-cpp-python\",\n        repoUrl: \"https://github.com/abetlen/llama-cpp-python\",\n        snippets: snippets.llama_cpp_python,\n    },\n    \"mini-omni2\": {\n        prettyLabel: \"Mini-Omni2\",\n        repoName: \"Mini-Omni2\",\n        repoUrl: \"https://github.com/gpt-omni/mini-omni2\",\n        countDownloads: `path:\"model_config.yaml\"`,\n    },\n    mindspore: {\n        prettyLabel: \"MindSpore\",\n        repoName: \"mindspore\",\n        repoUrl: \"https://github.com/mindspore-ai/mindspore\",\n    },\n    \"mamba-ssm\": {\n        prettyLabel: \"MambaSSM\",\n        repoName: \"MambaSSM\",\n        repoUrl: \"https://github.com/state-spaces/mamba\",\n        filter: false,\n        snippets: snippets.mamba_ssm,\n    },\n    \"mars5-tts\": {\n        prettyLabel: \"MARS5-TTS\",\n        repoName: \"MARS5-TTS\",\n        repoUrl: \"https://github.com/Camb-ai/MARS5-TTS\",\n        filter: false,\n        countDownloads: `path:\"mars5_ar.safetensors\"`,\n        snippets: snippets.mars5_tts,\n    },\n    matanyone: {\n        prettyLabel: \"MatAnyone\",\n        repoName: \"MatAnyone\",\n        repoUrl: \"https://github.com/pq-yang/MatAnyone\",\n        snippets: snippets.matanyone,\n        filter: false,\n    },\n    \"mesh-anything\": {\n        prettyLabel: \"MeshAnything\",\n        repoName: \"MeshAnything\",\n        repoUrl: \"https://github.com/buaacyw/MeshAnything\",\n        filter: false,\n        countDownloads: `path:\"MeshAnything_350m.pth\"`,\n        snippets: snippets.mesh_anything,\n    },\n    merlin: {\n        prettyLabel: \"Merlin\",\n        repoName: \"Merlin\",\n        repoUrl: \"https://github.com/StanfordMIMI/Merlin\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`,\n    },\n    medvae: {\n        prettyLabel: \"MedVAE\",\n        repoName: \"MedVAE\",\n        repoUrl: \"https://github.com/StanfordMIMI/MedVAE\",\n        filter: false,\n        countDownloads: `path_extension:\"ckpt\"`,\n    },\n    mitie: {\n        prettyLabel: \"MITIE\",\n        repoName: \"MITIE\",\n        repoUrl: \"https://github.com/mit-nlp/MITIE\",\n        countDownloads: `path_filename:\"total_word_feature_extractor\"`,\n    },\n    \"ml-agents\": {\n        prettyLabel: \"ml-agents\",\n        repoName: \"ml-agents\",\n        repoUrl: \"https://github.com/Unity-Technologies/ml-agents\",\n        docsUrl: \"https://huggingface.co/docs/hub/ml-agents\",\n        snippets: snippets.mlAgents,\n        filter: true,\n        countDownloads: `path_extension:\"onnx\"`,\n    },\n    mlx: {\n        prettyLabel: \"MLX\",\n        repoName: \"MLX\",\n        repoUrl: \"https://github.com/ml-explore/mlx-examples/tree/main\",\n        snippets: snippets.mlx,\n        filter: true,\n    },\n    \"mlx-image\": {\n        prettyLabel: \"mlx-image\",\n        repoName: \"mlx-image\",\n        repoUrl: \"https://github.com/riccardomusmeci/mlx-image\",\n        docsUrl: \"https://huggingface.co/docs/hub/mlx-image\",\n        snippets: snippets.mlxim,\n        filter: false,\n        countDownloads: `path:\"model.safetensors\"`,\n    },\n    \"mlc-llm\": {\n        prettyLabel: \"MLC-LLM\",\n        repoName: \"MLC-LLM\",\n        repoUrl: \"https://github.com/mlc-ai/mlc-llm\",\n        docsUrl: \"https://llm.mlc.ai/docs/\",\n        filter: false,\n        countDownloads: `path:\"mlc-chat-config.json\"`,\n    },\n    model2vec: {\n        prettyLabel: \"Model2Vec\",\n        repoName: \"model2vec\",\n        repoUrl: \"https://github.com/MinishLab/model2vec\",\n        snippets: snippets.model2vec,\n        filter: false,\n    },\n    moshi: {\n        prettyLabel: \"Moshi\",\n        repoName: \"Moshi\",\n        repoUrl: \"https://github.com/kyutai-labs/moshi\",\n        filter: false,\n        countDownloads: `path:\"tokenizer-e351c8d8-checkpoint125.safetensors\"`,\n    },\n    nemo: {\n        prettyLabel: \"NeMo\",\n        repoName: \"NeMo\",\n        repoUrl: \"https://github.com/NVIDIA/NeMo\",\n        snippets: snippets.nemo,\n        filter: true,\n        countDownloads: `path_extension:\"nemo\" OR path:\"model_config.yaml\"`,\n    },\n    \"open-oasis\": {\n        prettyLabel: \"open-oasis\",\n        repoName: \"open-oasis\",\n        repoUrl: \"https://github.com/etched-ai/open-oasis\",\n        countDownloads: `path:\"oasis500m.safetensors\"`,\n    },\n    open_clip: {\n        prettyLabel: \"OpenCLIP\",\n        repoName: \"OpenCLIP\",\n        repoUrl: \"https://github.com/mlfoundations/open_clip\",\n        snippets: snippets.open_clip,\n        filter: true,\n        countDownloads: `path:\"open_clip_model.safetensors\"\n\t\t\tOR path:\"model.safetensors\"\n\t\t\tOR path:\"open_clip_pytorch_model.bin\"\n\t\t\tOR path:\"pytorch_model.bin\"`,\n    },\n    \"open-sora\": {\n        prettyLabel: \"Open-Sora\",\n        repoName: \"Open-Sora\",\n        repoUrl: \"https://github.com/hpcaitech/Open-Sora\",\n        filter: false,\n        countDownloads: `path:\"Open_Sora_v2.safetensors\"`,\n    },\n    paddlenlp: {\n        prettyLabel: \"paddlenlp\",\n        repoName: \"PaddleNLP\",\n        repoUrl: \"https://github.com/PaddlePaddle/PaddleNLP\",\n        docsUrl: \"https://huggingface.co/docs/hub/paddlenlp\",\n        snippets: snippets.paddlenlp,\n        filter: true,\n        countDownloads: `path:\"model_config.json\"`,\n    },\n    peft: {\n        prettyLabel: \"PEFT\",\n        repoName: \"PEFT\",\n        repoUrl: \"https://github.com/huggingface/peft\",\n        snippets: snippets.peft,\n        filter: true,\n        countDownloads: `path:\"adapter_config.json\"`,\n    },\n    pxia: {\n        prettyLabel: \"pxia\",\n        repoName: \"pxia\",\n        repoUrl: \"https://github.com/not-lain/pxia\",\n        snippets: snippets.pxia,\n        filter: false,\n    },\n    \"pyannote-audio\": {\n        prettyLabel: \"pyannote.audio\",\n        repoName: \"pyannote-audio\",\n        repoUrl: \"https://github.com/pyannote/pyannote-audio\",\n        snippets: snippets.pyannote_audio,\n        filter: true,\n    },\n    \"py-feat\": {\n        prettyLabel: \"Py-Feat\",\n        repoName: \"Py-Feat\",\n        repoUrl: \"https://github.com/cosanlab/py-feat\",\n        docsUrl: \"https://py-feat.org/\",\n        filter: false,\n    },\n    pythae: {\n        prettyLabel: \"pythae\",\n        repoName: \"pythae\",\n        repoUrl: \"https://github.com/clementchadebec/benchmark_VAE\",\n        snippets: snippets.pythae,\n        filter: false,\n    },\n    recurrentgemma: {\n        prettyLabel: \"RecurrentGemma\",\n        repoName: \"recurrentgemma\",\n        repoUrl: \"https://github.com/google-deepmind/recurrentgemma\",\n        filter: false,\n        countDownloads: `path:\"tokenizer.model\"`,\n    },\n    relik: {\n        prettyLabel: \"Relik\",\n        repoName: \"Relik\",\n        repoUrl: \"https://github.com/SapienzaNLP/relik\",\n        snippets: snippets.relik,\n        filter: false,\n    },\n    refiners: {\n        prettyLabel: \"Refiners\",\n        repoName: \"Refiners\",\n        repoUrl: \"https://github.com/finegrain-ai/refiners\",\n        docsUrl: \"https://refine.rs/\",\n        filter: false,\n        countDownloads: `path:\"model.safetensors\"`,\n    },\n    reverb: {\n        prettyLabel: \"Reverb\",\n        repoName: \"Reverb\",\n        repoUrl: \"https://github.com/revdotcom/reverb\",\n        filter: false,\n    },\n    saelens: {\n        prettyLabel: \"SAELens\",\n        repoName: \"SAELens\",\n        repoUrl: \"https://github.com/jbloomAus/SAELens\",\n        snippets: snippets.saelens,\n        filter: false,\n    },\n    sam2: {\n        prettyLabel: \"sam2\",\n        repoName: \"sam2\",\n        repoUrl: \"https://github.com/facebookresearch/segment-anything-2\",\n        filter: false,\n        snippets: snippets.sam2,\n        countDownloads: `path_extension:\"pt\"`,\n    },\n    \"sample-factory\": {\n        prettyLabel: \"sample-factory\",\n        repoName: \"sample-factory\",\n        repoUrl: \"https://github.com/alex-petrenko/sample-factory\",\n        docsUrl: \"https://huggingface.co/docs/hub/sample-factory\",\n        snippets: snippets.sampleFactory,\n        filter: true,\n        countDownloads: `path:\"cfg.json\"`,\n    },\n    sapiens: {\n        prettyLabel: \"sapiens\",\n        repoName: \"sapiens\",\n        repoUrl: \"https://github.com/facebookresearch/sapiens\",\n        filter: false,\n        countDownloads: `path_extension:\"pt2\" OR path_extension:\"pth\" OR path_extension:\"onnx\"`,\n    },\n    \"sentence-transformers\": {\n        prettyLabel: \"sentence-transformers\",\n        repoName: \"sentence-transformers\",\n        repoUrl: \"https://github.com/UKPLab/sentence-transformers\",\n        docsUrl: \"https://huggingface.co/docs/hub/sentence-transformers\",\n        snippets: snippets.sentenceTransformers,\n        filter: true,\n    },\n    setfit: {\n        prettyLabel: \"setfit\",\n        repoName: \"setfit\",\n        repoUrl: \"https://github.com/huggingface/setfit\",\n        docsUrl: \"https://huggingface.co/docs/hub/setfit\",\n        snippets: snippets.setfit,\n        filter: true,\n    },\n    sklearn: {\n        prettyLabel: \"Scikit-learn\",\n        repoName: \"Scikit-learn\",\n        repoUrl: \"https://github.com/scikit-learn/scikit-learn\",\n        snippets: snippets.sklearn,\n        filter: true,\n        countDownloads: `path:\"sklearn_model.joblib\"`,\n    },\n    spacy: {\n        prettyLabel: \"spaCy\",\n        repoName: \"spaCy\",\n        repoUrl: \"https://github.com/explosion/spaCy\",\n        docsUrl: \"https://huggingface.co/docs/hub/spacy\",\n        snippets: snippets.spacy,\n        filter: true,\n        countDownloads: `path_extension:\"whl\"`,\n    },\n    \"span-marker\": {\n        prettyLabel: \"SpanMarker\",\n        repoName: \"SpanMarkerNER\",\n        repoUrl: \"https://github.com/tomaarsen/SpanMarkerNER\",\n        docsUrl: \"https://huggingface.co/docs/hub/span_marker\",\n        snippets: snippets.span_marker,\n        filter: true,\n    },\n    speechbrain: {\n        prettyLabel: \"speechbrain\",\n        repoName: \"speechbrain\",\n        repoUrl: \"https://github.com/speechbrain/speechbrain\",\n        docsUrl: \"https://huggingface.co/docs/hub/speechbrain\",\n        snippets: snippets.speechbrain,\n        filter: true,\n        countDownloads: `path:\"hyperparams.yaml\"`,\n    },\n    \"ssr-speech\": {\n        prettyLabel: \"SSR-Speech\",\n        repoName: \"SSR-Speech\",\n        repoUrl: \"https://github.com/WangHelin1997/SSR-Speech\",\n        filter: false,\n        countDownloads: `path_extension:\".pth\"`,\n    },\n    \"stable-audio-tools\": {\n        prettyLabel: \"Stable Audio Tools\",\n        repoName: \"stable-audio-tools\",\n        repoUrl: \"https://github.com/Stability-AI/stable-audio-tools.git\",\n        filter: false,\n        countDownloads: `path:\"model.safetensors\"`,\n        snippets: snippets.stable_audio_tools,\n    },\n    \"diffusion-single-file\": {\n        prettyLabel: \"Diffusion Single File\",\n        repoName: \"diffusion-single-file\",\n        repoUrl: \"https://github.com/comfyanonymous/ComfyUI\",\n        filter: false,\n        countDownloads: `path_extension:\"safetensors\"`,\n    },\n    \"seed-story\": {\n        prettyLabel: \"SEED-Story\",\n        repoName: \"SEED-Story\",\n        repoUrl: \"https://github.com/TencentARC/SEED-Story\",\n        filter: false,\n        countDownloads: `path:\"cvlm_llama2_tokenizer/tokenizer.model\"`,\n        snippets: snippets.seed_story,\n    },\n    soloaudio: {\n        prettyLabel: \"SoloAudio\",\n        repoName: \"SoloAudio\",\n        repoUrl: \"https://github.com/WangHelin1997/SoloAudio\",\n        filter: false,\n        countDownloads: `path:\"soloaudio_v2.pt\"`,\n    },\n    \"stable-baselines3\": {\n        prettyLabel: \"stable-baselines3\",\n        repoName: \"stable-baselines3\",\n        repoUrl: \"https://github.com/huggingface/huggingface_sb3\",\n        docsUrl: \"https://huggingface.co/docs/hub/stable-baselines3\",\n        snippets: snippets.stableBaselines3,\n        filter: true,\n        countDownloads: `path_extension:\"zip\"`,\n    },\n    stanza: {\n        prettyLabel: \"Stanza\",\n        repoName: \"stanza\",\n        repoUrl: \"https://github.com/stanfordnlp/stanza\",\n        docsUrl: \"https://huggingface.co/docs/hub/stanza\",\n        snippets: snippets.stanza,\n        filter: true,\n        countDownloads: `path:\"models/default.zip\"`,\n    },\n    swarmformer: {\n        prettyLabel: \"SwarmFormer\",\n        repoName: \"SwarmFormer\",\n        repoUrl: \"https://github.com/takara-ai/SwarmFormer\",\n        snippets: snippets.swarmformer,\n        filter: false,\n    },\n    \"f5-tts\": {\n        prettyLabel: \"F5-TTS\",\n        repoName: \"F5-TTS\",\n        repoUrl: \"https://github.com/SWivid/F5-TTS\",\n        filter: false,\n        countDownloads: `path_extension:\"safetensors\" OR path_extension:\"pt\"`,\n    },\n    genmo: {\n        prettyLabel: \"Genmo\",\n        repoName: \"Genmo\",\n        repoUrl: \"https://github.com/genmoai/models\",\n        filter: false,\n        countDownloads: `path:\"vae_stats.json\"`,\n    },\n    tensorflowtts: {\n        prettyLabel: \"TensorFlowTTS\",\n        repoName: \"TensorFlowTTS\",\n        repoUrl: \"https://github.com/TensorSpeech/TensorFlowTTS\",\n        snippets: snippets.tensorflowtts,\n    },\n    tabpfn: {\n        prettyLabel: \"TabPFN\",\n        repoName: \"TabPFN\",\n        repoUrl: \"https://github.com/PriorLabs/TabPFN\",\n    },\n    terratorch: {\n        prettyLabel: \"TerraTorch\",\n        repoName: \"TerraTorch\",\n        repoUrl: \"https://github.com/IBM/terratorch\",\n        docsUrl: \"https://ibm.github.io/terratorch/\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: snippets.terratorch,\n    },\n    \"tic-clip\": {\n        prettyLabel: \"TiC-CLIP\",\n        repoName: \"TiC-CLIP\",\n        repoUrl: \"https://github.com/apple/ml-tic-clip\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\" AND path_prefix:\"checkpoints/\"`,\n    },\n    timesfm: {\n        prettyLabel: \"TimesFM\",\n        repoName: \"timesfm\",\n        repoUrl: \"https://github.com/google-research/timesfm\",\n        filter: false,\n        countDownloads: `path:\"checkpoints/checkpoint_1100000/state/checkpoint\"`,\n    },\n    timm: {\n        prettyLabel: \"timm\",\n        repoName: \"pytorch-image-models\",\n        repoUrl: \"https://github.com/rwightman/pytorch-image-models\",\n        docsUrl: \"https://huggingface.co/docs/hub/timm\",\n        snippets: snippets.timm,\n        filter: true,\n        countDownloads: `path:\"pytorch_model.bin\" OR path:\"model.safetensors\"`,\n    },\n    transformers: {\n        prettyLabel: \"Transformers\",\n        repoName: \"🤗/transformers\",\n        repoUrl: \"https://github.com/huggingface/transformers\",\n        docsUrl: \"https://huggingface.co/docs/hub/transformers\",\n        snippets: snippets.transformers,\n        filter: true,\n    },\n    \"transformers.js\": {\n        prettyLabel: \"Transformers.js\",\n        repoName: \"transformers.js\",\n        repoUrl: \"https://github.com/huggingface/transformers.js\",\n        docsUrl: \"https://huggingface.co/docs/hub/transformers-js\",\n        snippets: snippets.transformersJS,\n        filter: true,\n    },\n    trellis: {\n        prettyLabel: \"Trellis\",\n        repoName: \"Trellis\",\n        repoUrl: \"https://github.com/microsoft/TRELLIS\",\n        countDownloads: `path_extension:\"safetensors\"`,\n    },\n    ultralytics: {\n        prettyLabel: \"ultralytics\",\n        repoName: \"ultralytics\",\n        repoUrl: \"https://github.com/ultralytics/ultralytics\",\n        docsUrl: \"https://github.com/ultralytics/ultralytics\",\n        filter: false,\n        countDownloads: `path_extension:\"pt\"`,\n        snippets: snippets.ultralytics,\n    },\n    \"uni-3dar\": {\n        prettyLabel: \"Uni-3DAR\",\n        repoName: \"Uni-3DAR\",\n        repoUrl: \"https://github.com/dptech-corp/Uni-3DAR\",\n        docsUrl: \"https://github.com/dptech-corp/Uni-3DAR\",\n        countDownloads: `path_extension:\"pt\"`,\n    },\n    \"unity-sentis\": {\n        prettyLabel: \"unity-sentis\",\n        repoName: \"unity-sentis\",\n        repoUrl: \"https://github.com/Unity-Technologies/sentis-samples\",\n        snippets: snippets.sentis,\n        filter: true,\n        countDownloads: `path_extension:\"sentis\"`,\n    },\n    sana: {\n        prettyLabel: \"Sana\",\n        repoName: \"Sana\",\n        repoUrl: \"https://github.com/NVlabs/Sana\",\n        countDownloads: `path_extension:\"pth\"`,\n        snippets: snippets.sana,\n    },\n    \"vfi-mamba\": {\n        prettyLabel: \"VFIMamba\",\n        repoName: \"VFIMamba\",\n        repoUrl: \"https://github.com/MCG-NJU/VFIMamba\",\n        countDownloads: `path_extension:\"pkl\"`,\n        snippets: snippets.vfimamba,\n    },\n    voicecraft: {\n        prettyLabel: \"VoiceCraft\",\n        repoName: \"VoiceCraft\",\n        repoUrl: \"https://github.com/jasonppy/VoiceCraft\",\n        docsUrl: \"https://github.com/jasonppy/VoiceCraft\",\n        snippets: snippets.voicecraft,\n    },\n    wham: {\n        prettyLabel: \"WHAM\",\n        repoName: \"wham\",\n        repoUrl: \"https://huggingface.co/microsoft/wham\",\n        docsUrl: \"https://huggingface.co/microsoft/wham/blob/main/README.md\",\n        countDownloads: `path_extension:\"ckpt\"`,\n    },\n    whisperkit: {\n        prettyLabel: \"WhisperKit\",\n        repoName: \"WhisperKit\",\n        repoUrl: \"https://github.com/argmaxinc/WhisperKit\",\n        docsUrl: \"https://github.com/argmaxinc/WhisperKit?tab=readme-ov-file#homebrew\",\n        snippets: snippets.whisperkit,\n        countDownloads: `path_filename:\"model\" AND path_extension:\"mil\" AND _exists_:\"path_prefix\"`,\n    },\n    yolov10: {\n        // YOLOv10 is a fork of ultraLytics. Code snippets and download count are the same but the repo is different.\n        prettyLabel: \"YOLOv10\",\n        repoName: \"YOLOv10\",\n        repoUrl: \"https://github.com/THU-MIG/yolov10\",\n        docsUrl: \"https://github.com/THU-MIG/yolov10\",\n        countDownloads: `path_extension:\"pt\" OR path_extension:\"safetensors\"`,\n        snippets: snippets.ultralytics,\n    },\n    \"3dtopia-xl\": {\n        prettyLabel: \"3DTopia-XL\",\n        repoName: \"3DTopia-XL\",\n        repoUrl: \"https://github.com/3DTopia/3DTopia-XL\",\n        filter: false,\n        countDownloads: `path:\"model_vae_fp16.pt\"`,\n        snippets: snippets.threedtopia_xl,\n    },\n};\nexport const ALL_MODEL_LIBRARY_KEYS = Object.keys(MODEL_LIBRARIES_UI_ELEMENTS);\nexport const ALL_DISPLAY_MODEL_LIBRARY_KEYS = Object.entries(MODEL_LIBRARIES_UI_ELEMENTS)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .filter(([_, v]) => v.filter)\n    .map(([k]) => k);\n", "export var GGMLQuantizationType;\n(function (GGMLQuantizationType) {\n    GGMLQuantizationType[GGMLQuantizationType[\"F32\"] = 0] = \"F32\";\n    GGMLQuantizationType[GGMLQuantizationType[\"F16\"] = 1] = \"F16\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q4_0\"] = 2] = \"Q4_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q4_1\"] = 3] = \"Q4_1\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q5_0\"] = 6] = \"Q5_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q5_1\"] = 7] = \"Q5_1\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q8_0\"] = 8] = \"Q8_0\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q8_1\"] = 9] = \"Q8_1\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q2_K\"] = 10] = \"Q2_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q3_K\"] = 11] = \"Q3_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q4_K\"] = 12] = \"Q4_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q5_K\"] = 13] = \"Q5_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q6_K\"] = 14] = \"Q6_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"Q8_K\"] = 15] = \"Q8_K\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ2_XXS\"] = 16] = \"IQ2_XXS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ2_XS\"] = 17] = \"IQ2_XS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ3_XXS\"] = 18] = \"IQ3_XXS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ1_S\"] = 19] = \"IQ1_S\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ4_NL\"] = 20] = \"IQ4_NL\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ3_S\"] = 21] = \"IQ3_S\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ2_S\"] = 22] = \"IQ2_S\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ4_XS\"] = 23] = \"IQ4_XS\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I8\"] = 24] = \"I8\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I16\"] = 25] = \"I16\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I32\"] = 26] = \"I32\";\n    GGMLQuantizationType[GGMLQuantizationType[\"I64\"] = 27] = \"I64\";\n    GGMLQuantizationType[GGMLQuantizationType[\"F64\"] = 28] = \"F64\";\n    GGMLQuantizationType[GGMLQuantizationType[\"IQ1_M\"] = 29] = \"IQ1_M\";\n    GGMLQuantizationType[GGMLQuantizationType[\"BF16\"] = 30] = \"BF16\";\n})(GGMLQuantizationType || (GGMLQuantizationType = {}));\nconst ggufQuants = Object.values(GGMLQuantizationType).filter((v) => typeof v === \"string\");\nexport const GGUF_QUANT_RE = new RegExp(`(?<quant>${ggufQuants.join(\"|\")})` + \"(_(?<sizeVariation>[A-Z]+))?\");\nexport const GGUF_QUANT_RE_GLOBAL = new RegExp(GGUF_QUANT_RE, \"g\");\nexport function parseGGUFQuantLabel(fname) {\n    const quantLabel = fname.toUpperCase().match(GGUF_QUANT_RE_GLOBAL)?.at(-1); // if there is multiple quant substrings in a name, we prefer the last one\n    return quantLabel;\n}\n", "// Order of the elements in InferenceModal.svelte is determined by this const\nexport const inferenceSnippetLanguages = [\"python\", \"js\", \"sh\"];\n", "/**\n * Biden AI Executive Order (since revoked by President Trump):\n * https://web.archive.org/web/20250105222429/https://www.whitehouse.gov/briefing-room/presidential-actions/2023/10/30/executive-order-on-the-safe-secure-and-trustworthy-development-and-use-of-artificial-intelligence/\n */\nexport const TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL = 10 ** 14;\nexport const TFLOPS_THRESHOLD_WHITE_HOUSE_MODEL_TRAINING_TOTAL_BIOLOGY = 10 ** 11;\nexport const TFLOPS_THRESHOLD_WHITE_HOUSE_CLUSTER = 10 ** 8;\n/**\n * EU AI Act\n * https://ec.europa.eu/commission/presscorner/detail/en/qanda_21_1683\n */\nexport const TFLOPS_THRESHOLD_EU_AI_ACT_MODEL_TRAINING_TOTAL = 10 ** 13;\nexport const DEFAULT_MEMORY_OPTIONS = [8, 16, 24, 32, 40, 48, 64, 80, 96, 128, 256, 512];\nexport const SKUS = {\n    GPU: {\n        NVIDIA: {\n            H200: {\n                tflops: 241.3,\n                memory: [141],\n            },\n            H100: {\n                tflops: 267.6,\n                memory: [80],\n            },\n            L40s: {\n                tflops: 91.61,\n                memory: [48],\n            },\n            L40: {\n                tflops: 90.52,\n                memory: [48],\n            },\n            L20: {\n                tflops: 59.35,\n                memory: [48],\n            },\n            L4: {\n                tflops: 30.29,\n                memory: [24],\n            },\n            \"RTX 6000 Ada\": {\n                tflops: 91.1,\n                memory: [48],\n            },\n            \"RTX 5880 Ada\": {\n                tflops: 69.3,\n                memory: [48],\n            },\n            \"RTX 5000 Ada\": {\n                tflops: 65.3,\n                memory: [32],\n            },\n            \"RTX 4500 Ada\": {\n                tflops: 39.6,\n                memory: [24],\n            },\n            \"RTX 4000 Ada\": {\n                tflops: 26.7,\n                memory: [20],\n            },\n            \"RTX 4000 SFF Ada\": {\n                tflops: 19.2,\n                memory: [20],\n            },\n            \"RTX 2000 Ada\": {\n                tflops: 12.0,\n                memory: [16],\n            },\n            \"RTX A6000\": {\n                tflops: 38.7,\n                memory: [48],\n            },\n            \"RTX A4000\": {\n                tflops: 19.2,\n                memory: [16],\n            },\n            \"RTX A2000\": {\n                tflops: 7.987,\n                memory: [8, 12],\n            },\n            A100: {\n                tflops: 77.97,\n                memory: [80, 40],\n            },\n            A40: {\n                tflops: 37.42,\n                memory: [48],\n            },\n            A10: {\n                tflops: 31.24,\n                memory: [24],\n            },\n            A2: {\n                tflops: 4.531, // source: https://www.techpowerup.com/gpu-specs/a2.c3848\n                memory: [16],\n            },\n            \"RTX 5090\": {\n                tflops: 104.8,\n                memory: [32],\n            },\n            \"RTX 5090 D\": {\n                tflops: 104.8,\n                memory: [32],\n            },\n            \"RTX 5080\": {\n                tflops: 56.28,\n                memory: [16],\n            },\n            \"RTX 5080 Mobile\": {\n                tflops: 24.58,\n                memory: [16],\n            },\n            \"RTX 5070\": {\n                tflops: 30.84,\n                memory: [12],\n            },\n            \"RTX 5070 Mobile\": {\n                tflops: 23.22,\n                memory: [8],\n            },\n            \"RTX 4090\": {\n                tflops: 82.58,\n                memory: [24],\n            },\n            \"RTX 4090D\": {\n                tflops: 79.49,\n                memory: [24],\n            },\n            \"RTX 4090 Mobile\": {\n                tflops: 32.98,\n                memory: [16],\n            },\n            \"RTX 4080 SUPER\": {\n                tflops: 52.2,\n                memory: [16],\n            },\n            \"RTX 4080\": {\n                tflops: 48.7,\n                memory: [16],\n            },\n            \"RTX 4080 Mobile\": {\n                tflops: 24.72,\n                memory: [12],\n            },\n            \"RTX 4070\": {\n                tflops: 29.15,\n                memory: [12],\n            },\n            \"RTX 4070 Mobile\": {\n                tflops: 15.62,\n                memory: [8],\n            },\n            \"RTX 4070 Ti\": {\n                tflops: 40.09,\n                memory: [12],\n            },\n            \"RTX 4070 Super\": {\n                tflops: 35.48,\n                memory: [12],\n            },\n            \"RTX 4070 Ti Super\": {\n                tflops: 44.1,\n                memory: [16],\n            },\n            \"RTX 4060\": {\n                tflops: 15.11,\n                memory: [8],\n            },\n            \"RTX 4060 Ti\": {\n                tflops: 22.06,\n                memory: [8, 16],\n            },\n            \"RTX 4060 Mobile\": {\n                tflops: 11.61,\n                memory: [8],\n            },\n            \"RTX 3090\": {\n                tflops: 35.58,\n                memory: [24],\n            },\n            \"RTX 3090 Ti\": {\n                tflops: 40,\n                memory: [24],\n            },\n            \"RTX 3080\": {\n                tflops: 30.6,\n                memory: [12, 10],\n            },\n            \"RTX 3080 Ti\": {\n                tflops: 34.1,\n                memory: [12],\n            },\n            \"RTX 3080 Mobile\": {\n                tflops: 18.98,\n                memory: [8],\n            },\n            \"RTX 3070\": {\n                tflops: 20.31,\n                memory: [8],\n            },\n            \"RTX 3070 Ti\": {\n                tflops: 21.75,\n                memory: [8],\n            },\n            \"RTX 3070 Ti Mobile\": {\n                tflops: 16.6,\n                memory: [8],\n            },\n            \"RTX 3060 Ti\": {\n                tflops: 16.2,\n                memory: [8],\n            },\n            \"RTX 3060\": {\n                tflops: 12.74,\n                memory: [12, 8],\n            },\n            \"RTX 2080 Ti\": {\n                tflops: 26.9,\n                memory: [11],\n            },\n            \"RTX 2080\": {\n                tflops: 20.14,\n                memory: [8],\n            },\n            \"RTX 2070\": {\n                tflops: 14.93,\n                memory: [8],\n            },\n            \"RTX 2070 SUPER Mobile\": {\n                tflops: 14.13,\n                memory: [8],\n            },\n            \"RTX 2070 SUPER\": {\n                tflops: 18.12,\n                memory: [8],\n            },\n            \"RTX 3060 Mobile\": {\n                tflops: 10.94,\n                memory: [6],\n            },\n            \"RTX 3050 Mobile\": {\n                tflops: 7.639,\n                memory: [6],\n            },\n            \"RTX 2060 Mobile\": {\n                tflops: 9.22,\n                memory: [6],\n            },\n            \"GTX 1080 Ti\": {\n                tflops: 11.34, // float32 (GPU does not support native float16)\n                memory: [11],\n            },\n            \"GTX 1070 Ti\": {\n                tflops: 8.2, // float32 (GPU does not support native float16)\n                memory: [8],\n            },\n            \"GTX 1060\": {\n                tflops: 3.9, // float32 (GPU does not support native float16)\n                memory: [3, 6],\n            },\n            \"GTX 1050 Ti\": {\n                tflops: 2.1, // float32 (GPU does not support native float16)\n                memory: [4],\n            },\n            \"RTX Titan\": {\n                tflops: 32.62,\n                memory: [24],\n            },\n            \"GTX 1660\": {\n                tflops: 10.05,\n                memory: [6],\n            },\n            \"GTX 1650 Mobile\": {\n                tflops: 6.39,\n                memory: [4],\n            },\n            T4: {\n                tflops: 65.13,\n                memory: [16],\n            },\n            V100: {\n                tflops: 28.26,\n                memory: [32, 16],\n            },\n            \"Quadro P6000\": {\n                tflops: 12.63, // float32 (GPU does not support native float16)\n                memory: [24],\n            },\n            P40: {\n                tflops: 11.76, // float32 (GPU does not support native float16)\n                memory: [24],\n            },\n            P100: {\n                tflops: 19.05,\n                memory: [16],\n            },\n        },\n        AMD: {\n            MI300: {\n                tflops: 383.0,\n                memory: [192],\n            },\n            MI250: {\n                tflops: 362.1,\n                memory: [128],\n            },\n            MI210: {\n                tflops: 181.0,\n                memory: [64],\n            },\n            MI100: {\n                tflops: 184.6,\n                memory: [32],\n            },\n            MI60: {\n                tflops: 29.5,\n                memory: [32],\n            },\n            MI50: {\n                tflops: 26.5,\n                memory: [16],\n            },\n            \"RX 7900 XTX\": {\n                tflops: 122.8,\n                memory: [24],\n            },\n            \"RX 7900 XT\": {\n                tflops: 103.0,\n                memory: [20],\n            },\n            \"RX 7900 GRE\": {\n                tflops: 91.96,\n                memory: [16],\n            },\n            \"RX 7800 XT\": {\n                tflops: 74.65,\n                memory: [16],\n            },\n            \"RX 7700 XT\": {\n                tflops: 70.34,\n                memory: [12],\n            },\n            \"RX 7600 XT\": {\n                tflops: 45.14,\n                memory: [16, 8],\n            },\n            \"RX 6950 XT\": {\n                tflops: 47.31,\n                memory: [16],\n            },\n            \"RX 6800\": {\n                tflops: 32.33,\n                memory: [16],\n            },\n            \"RX 6700 XT\": {\n                tflops: 26.43,\n                memory: [12],\n            },\n            \"RX 6700\": {\n                tflops: 22.58,\n                memory: [10],\n            },\n            \"Radeon Pro VII\": {\n                tflops: 26.11,\n                memory: [16],\n            },\n        },\n        INTEL: {\n            \"Arc A750\": {\n                tflops: 34.41,\n                memory: [8],\n            },\n            \"Arc A770\": {\n                tflops: 39.32,\n                memory: [8, 16],\n            },\n            \"Arc B570\": {\n                tflops: 23.04,\n                memory: [10],\n            },\n            \"Arc B580\": {\n                tflops: 27.34,\n                memory: [12],\n            },\n        },\n        QUALCOMM: {\n            \"Snapdragon X Elite X1E-00-1DE\": {\n                tflops: 4.6,\n            },\n            \"Snapdragon X Elite X1E-84-100\": {\n                tflops: 4.6,\n            },\n            \"Snapdragon X Elite X1E-80-100\": {\n                tflops: 3.8,\n            },\n            \"Snapdragon X Elite X1E-78-100\": {\n                tflops: 3.8,\n            },\n            \"Snapdragon X Plus X1P-64-100\": {\n                tflops: 3.8,\n            },\n        },\n    },\n    CPU: {\n        Intel: {\n            \"Xeon 4th Generation (Sapphire Rapids)\": {\n                tflops: 1.3,\n            },\n            \"Xeon 3th Generation (Ice Lake)\": {\n                tflops: 0.8,\n            },\n            \"Xeon 2th Generation (Cascade Lake)\": {\n                tflops: 0.55,\n            },\n            \"Intel Core 13th Generation (i9)\": {\n                tflops: 0.85,\n            },\n            \"Intel Core 13th Generation (i7)\": {\n                tflops: 0.82,\n            },\n            \"Intel Core 13th Generation (i5)\": {\n                tflops: 0.68,\n            },\n            \"Intel Core 13th Generation (i3)\": {\n                tflops: 0.57,\n            },\n            \"Intel Core 12th Generation (i9)\": {\n                tflops: 0.79,\n            },\n            \"Intel Core 12th Generation (i7)\": {\n                tflops: 0.77,\n            },\n            \"Intel Core 12th Generation (i5)\": {\n                tflops: 0.65,\n            },\n            \"Intel Core 12th Generation (i3)\": {\n                tflops: 0.53,\n            },\n            \"Intel Core 11th Generation (i9)\": {\n                tflops: 0.7,\n            },\n            \"Intel Core 11th Generation (i7)\": {\n                tflops: 0.6,\n            },\n            \"Intel Core 11th Generation (i5)\": {\n                tflops: 0.5,\n            },\n            \"Intel Core 11th Generation (i3)\": {\n                tflops: 0.35,\n            },\n            \"Intel Core 10th Generation (i9)\": {\n                tflops: 0.46,\n            },\n            \"Intel Core 10th Generation (i7)\": {\n                tflops: 0.46,\n            },\n            \"Intel Core 10th Generation (i5)\": {\n                tflops: 0.46,\n            },\n            \"Intel Core 10th Generation (i3)\": {\n                tflops: 0.44,\n            },\n        },\n        AMD: {\n            \"EPYC 4th Generation (Genoa)\": {\n                tflops: 5,\n            },\n            \"EPYC 3th Generation (Milan)\": {\n                tflops: 2.4,\n            },\n            \"EPYC 2th Generation (Rome)\": {\n                tflops: 0.6,\n            },\n            \"EPYC 1st Generation (Naples)\": {\n                tflops: 0.6,\n            },\n            \"Ryzen Zen 4 7000 (Threadripper)\": {\n                tflops: 10.0,\n            },\n            \"Ryzen Zen4 7000 (Ryzen 9)\": {\n                tflops: 0.56,\n            },\n            \"Ryzen Zen4 7000 (Ryzen 7)\": {\n                tflops: 0.56,\n            },\n            \"Ryzen Zen4 7000 (Ryzen 5)\": {\n                tflops: 0.56,\n            },\n            \"Ryzen Zen3 5000 (Ryzen 9)\": {\n                tflops: 1.33,\n            },\n            \"Ryzen Zen3 5000 (Ryzen 7)\": {\n                tflops: 1.33,\n            },\n            \"Ryzen Zen3 5000 (Ryzen 5)\": {\n                tflops: 0.72,\n            },\n            \"Ryzen Zen 2  3000 (Threadripper)\": {\n                tflops: 0.72,\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 9)\": {\n                tflops: 0.72,\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 7)\": {\n                tflops: 0.72,\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 5)\": {\n                tflops: 0.72,\n            },\n            \"Ryzen Zen 2  3000 (Ryzen 3)\": {\n                tflops: 0.72,\n            },\n        },\n    },\n    \"Apple Silicon\": {\n        \"-\": {\n            \"Apple M1\": {\n                tflops: 2.6,\n                memory: [8, 16],\n            },\n            \"Apple M1 Pro\": {\n                tflops: 5.2,\n                memory: [16, 24, 32],\n            },\n            \"Apple M1 Max\": {\n                tflops: 10.4,\n                memory: [16, 24, 32, 64],\n            },\n            \"Apple M1 Ultra\": {\n                tflops: 21,\n                memory: [16, 24, 32, 64, 96, 128],\n            },\n            \"Apple M2\": {\n                tflops: 3.6,\n                memory: [8, 16, 24],\n            },\n            \"Apple M2 Pro\": {\n                tflops: 6.8,\n                memory: [16, 24, 32],\n            },\n            \"Apple M2 Max\": {\n                tflops: 13.49,\n                memory: [32, 64, 96],\n            },\n            \"Apple M2 Ultra\": {\n                tflops: 27.2,\n                memory: [64, 96, 128, 192],\n            },\n            \"Apple M3\": {\n                tflops: 4.1,\n                memory: [8, 16, 24],\n            },\n            \"Apple M3 Pro\": {\n                tflops: 7.4,\n                memory: [18, 36],\n            },\n            \"Apple M3 Max\": {\n                tflops: 14.2,\n                memory: [36, 48, 64, 96, 128],\n            },\n            \"Apple M4\": {\n                tflops: 4.6,\n                memory: [16, 24, 32],\n            },\n            \"Apple M4 Pro\": {\n                tflops: 9.2,\n                memory: [24, 48, 64],\n            },\n            \"Apple M4 Max\": {\n                tflops: 18.4,\n                memory: [36, 48, 64, 128],\n            },\n        },\n    },\n};\n", "// src/lexer.ts\nvar TOKEN_TYPES = Object.freeze({\n  Text: \"Text\",\n  // The text between Jinja statements or expressions\n  NumericLiteral: \"NumericLiteral\",\n  // e.g., 123\n  BooleanLiteral: \"BooleanLiteral\",\n  // true or false\n  NullLiteral: \"NullLiteral\",\n  // none\n  StringLiteral: \"StringLiteral\",\n  // 'string'\n  Identifier: \"Identifier\",\n  // Variables, functions, etc.\n  Equals: \"Equals\",\n  // =\n  OpenParen: \"OpenParen\",\n  // (\n  CloseParen: \"CloseParen\",\n  // )\n  OpenStatement: \"OpenStatement\",\n  // {%\n  CloseStatement: \"CloseStatement\",\n  // %}\n  OpenExpression: \"OpenExpression\",\n  // {{\n  CloseExpression: \"CloseExpression\",\n  // }}\n  OpenSquareBracket: \"OpenSquareBracket\",\n  // [\n  CloseSquareBracket: \"CloseSquareBracket\",\n  // ]\n  OpenCurlyBracket: \"OpenCurlyBracket\",\n  // {\n  CloseCurlyBracket: \"CloseCurlyBracket\",\n  // }\n  Comma: \"Comma\",\n  // ,\n  Dot: \"Dot\",\n  // .\n  Colon: \"Colon\",\n  // :\n  Pipe: \"Pipe\",\n  // |\n  CallOperator: \"CallOperator\",\n  // ()\n  AdditiveBinaryOperator: \"AdditiveBinaryOperator\",\n  // + -\n  MultiplicativeBinaryOperator: \"MultiplicativeBinaryOperator\",\n  // * / %\n  ComparisonBinaryOperator: \"ComparisonBinaryOperator\",\n  // < > <= >= == !=\n  UnaryOperator: \"UnaryOperator\",\n  // ! - +\n  // Keywords\n  Set: \"Set\",\n  If: \"If\",\n  For: \"For\",\n  In: \"In\",\n  Is: \"Is\",\n  NotIn: \"NotIn\",\n  Else: \"Else\",\n  EndIf: \"EndIf\",\n  ElseIf: \"ElseIf\",\n  EndFor: \"EndFor\",\n  And: \"And\",\n  Or: \"Or\",\n  Not: \"UnaryOperator\",\n  Macro: \"Macro\",\n  EndMacro: \"EndMacro\"\n});\nvar KEYWORDS = Object.freeze({\n  set: TOKEN_TYPES.Set,\n  for: TOKEN_TYPES.For,\n  in: TOKEN_TYPES.In,\n  is: TOKEN_TYPES.Is,\n  if: TOKEN_TYPES.If,\n  else: TOKEN_TYPES.Else,\n  endif: TOKEN_TYPES.EndIf,\n  elif: TOKEN_TYPES.ElseIf,\n  endfor: TOKEN_TYPES.EndFor,\n  and: TOKEN_TYPES.And,\n  or: TOKEN_TYPES.Or,\n  not: TOKEN_TYPES.Not,\n  \"not in\": TOKEN_TYPES.NotIn,\n  macro: TOKEN_TYPES.Macro,\n  endmacro: TOKEN_TYPES.EndMacro,\n  // Literals\n  true: TOKEN_TYPES.BooleanLiteral,\n  false: TOKEN_TYPES.BooleanLiteral,\n  none: TOKEN_TYPES.NullLiteral,\n  // NOTE: According to the Jinja docs: The special constants true, false, and none are indeed lowercase.\n  // Because that caused confusion in the past, (True used to expand to an undefined variable that was considered false),\n  // all three can now also be written in title case (True, False, and None). However, for consistency, (all Jinja identifiers are lowercase)\n  // you should use the lowercase versions.\n  True: TOKEN_TYPES.BooleanLiteral,\n  False: TOKEN_TYPES.BooleanLiteral,\n  None: TOKEN_TYPES.NullLiteral\n});\nvar Token = class {\n  /**\n   * Constructs a new Token.\n   * @param {string} value The raw value as seen inside the source code.\n   * @param {TokenType} type The type of token.\n   */\n  constructor(value, type) {\n    this.value = value;\n    this.type = type;\n  }\n};\nfunction isWord(char) {\n  return /\\w/.test(char);\n}\nfunction isInteger(char) {\n  return /[0-9]/.test(char);\n}\nvar ORDERED_MAPPING_TABLE = [\n  // Control sequences\n  [\"{%\", TOKEN_TYPES.OpenStatement],\n  [\"%}\", TOKEN_TYPES.CloseStatement],\n  [\"{{\", TOKEN_TYPES.OpenExpression],\n  [\"}}\", TOKEN_TYPES.CloseExpression],\n  // Single character tokens\n  [\"(\", TOKEN_TYPES.OpenParen],\n  [\")\", TOKEN_TYPES.CloseParen],\n  [\"{\", TOKEN_TYPES.OpenCurlyBracket],\n  [\"}\", TOKEN_TYPES.CloseCurlyBracket],\n  [\"[\", TOKEN_TYPES.OpenSquareBracket],\n  [\"]\", TOKEN_TYPES.CloseSquareBracket],\n  [\",\", TOKEN_TYPES.Comma],\n  [\".\", TOKEN_TYPES.Dot],\n  [\":\", TOKEN_TYPES.Colon],\n  [\"|\", TOKEN_TYPES.Pipe],\n  // Comparison operators\n  [\"<=\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\">=\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\"==\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\"!=\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\"<\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\">\", TOKEN_TYPES.ComparisonBinaryOperator],\n  // Arithmetic operators\n  [\"+\", TOKEN_TYPES.AdditiveBinaryOperator],\n  [\"-\", TOKEN_TYPES.AdditiveBinaryOperator],\n  [\"*\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n  [\"/\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n  [\"%\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n  // Assignment operator\n  [\"=\", TOKEN_TYPES.Equals]\n];\nvar ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([\n  [\"n\", \"\\n\"],\n  // New line\n  [\"t\", \"\t\"],\n  // Horizontal tab\n  [\"r\", \"\\r\"],\n  // Carriage return\n  [\"b\", \"\\b\"],\n  // Backspace\n  [\"f\", \"\\f\"],\n  // Form feed\n  [\"v\", \"\\v\"],\n  // Vertical tab\n  [\"'\", \"'\"],\n  // Single quote\n  ['\"', '\"'],\n  // Double quote\n  [\"\\\\\", \"\\\\\"]\n  // Backslash\n]);\nfunction preprocess(template, options = {}) {\n  if (template.endsWith(\"\\n\")) {\n    template = template.slice(0, -1);\n  }\n  template = template.replace(/{#.*?#}/gs, \"{##}\");\n  if (options.lstrip_blocks) {\n    template = template.replace(/^[ \\t]*({[#%])/gm, \"$1\");\n  }\n  if (options.trim_blocks) {\n    template = template.replace(/([#%]})\\n/g, \"$1\");\n  }\n  return template.replace(/{##}/g, \"\").replace(/-%}\\s*/g, \"%}\").replace(/\\s*{%-/g, \"{%\").replace(/-}}\\s*/g, \"}}\").replace(/\\s*{{-/g, \"{{\");\n}\nfunction tokenize(source, options = {}) {\n  const tokens = [];\n  const src = preprocess(source, options);\n  let cursorPosition = 0;\n  const consumeWhile = (predicate) => {\n    let str = \"\";\n    while (predicate(src[cursorPosition])) {\n      if (src[cursorPosition] === \"\\\\\") {\n        ++cursorPosition;\n        if (cursorPosition >= src.length)\n          throw new SyntaxError(\"Unexpected end of input\");\n        const escaped = src[cursorPosition++];\n        const unescaped = ESCAPE_CHARACTERS.get(escaped);\n        if (unescaped === void 0) {\n          throw new SyntaxError(`Unexpected escaped character: ${escaped}`);\n        }\n        str += unescaped;\n        continue;\n      }\n      str += src[cursorPosition++];\n      if (cursorPosition >= src.length)\n        throw new SyntaxError(\"Unexpected end of input\");\n    }\n    return str;\n  };\n  main:\n    while (cursorPosition < src.length) {\n      const lastTokenType = tokens.at(-1)?.type;\n      if (lastTokenType === void 0 || lastTokenType === TOKEN_TYPES.CloseStatement || lastTokenType === TOKEN_TYPES.CloseExpression) {\n        let text = \"\";\n        while (cursorPosition < src.length && // Keep going until we hit the next Jinja statement or expression\n        !(src[cursorPosition] === \"{\" && (src[cursorPosition + 1] === \"%\" || src[cursorPosition + 1] === \"{\"))) {\n          text += src[cursorPosition++];\n        }\n        if (text.length > 0) {\n          tokens.push(new Token(text, TOKEN_TYPES.Text));\n          continue;\n        }\n      }\n      consumeWhile((char2) => /\\s/.test(char2));\n      const char = src[cursorPosition];\n      if (char === \"-\" || char === \"+\") {\n        const lastTokenType2 = tokens.at(-1)?.type;\n        if (lastTokenType2 === TOKEN_TYPES.Text || lastTokenType2 === void 0) {\n          throw new SyntaxError(`Unexpected character: ${char}`);\n        }\n        switch (lastTokenType2) {\n          case TOKEN_TYPES.Identifier:\n          case TOKEN_TYPES.NumericLiteral:\n          case TOKEN_TYPES.BooleanLiteral:\n          case TOKEN_TYPES.NullLiteral:\n          case TOKEN_TYPES.StringLiteral:\n          case TOKEN_TYPES.CloseParen:\n          case TOKEN_TYPES.CloseSquareBracket:\n            break;\n          default: {\n            ++cursorPosition;\n            const num = consumeWhile(isInteger);\n            tokens.push(\n              new Token(`${char}${num}`, num.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator)\n            );\n            continue;\n          }\n        }\n      }\n      for (const [char2, token] of ORDERED_MAPPING_TABLE) {\n        const slice2 = src.slice(cursorPosition, cursorPosition + char2.length);\n        if (slice2 === char2) {\n          tokens.push(new Token(char2, token));\n          cursorPosition += char2.length;\n          continue main;\n        }\n      }\n      if (char === \"'\" || char === '\"') {\n        ++cursorPosition;\n        const str = consumeWhile((c) => c !== char);\n        tokens.push(new Token(str, TOKEN_TYPES.StringLiteral));\n        ++cursorPosition;\n        continue;\n      }\n      if (isInteger(char)) {\n        const num = consumeWhile(isInteger);\n        tokens.push(new Token(num, TOKEN_TYPES.NumericLiteral));\n        continue;\n      }\n      if (isWord(char)) {\n        const word = consumeWhile(isWord);\n        const type = Object.hasOwn(KEYWORDS, word) ? KEYWORDS[word] : TOKEN_TYPES.Identifier;\n        if (type === TOKEN_TYPES.In && tokens.at(-1)?.type === TOKEN_TYPES.Not) {\n          tokens.pop();\n          tokens.push(new Token(\"not in\", TOKEN_TYPES.NotIn));\n        } else {\n          tokens.push(new Token(word, type));\n        }\n        continue;\n      }\n      throw new SyntaxError(`Unexpected character: ${char}`);\n    }\n  return tokens;\n}\n\n// src/ast.ts\nvar Statement = class {\n  type = \"Statement\";\n};\nvar Program = class extends Statement {\n  constructor(body) {\n    super();\n    this.body = body;\n  }\n  type = \"Program\";\n};\nvar If = class extends Statement {\n  constructor(test, body, alternate) {\n    super();\n    this.test = test;\n    this.body = body;\n    this.alternate = alternate;\n  }\n  type = \"If\";\n};\nvar For = class extends Statement {\n  constructor(loopvar, iterable, body, defaultBlock) {\n    super();\n    this.loopvar = loopvar;\n    this.iterable = iterable;\n    this.body = body;\n    this.defaultBlock = defaultBlock;\n  }\n  type = \"For\";\n};\nvar SetStatement = class extends Statement {\n  constructor(assignee, value) {\n    super();\n    this.assignee = assignee;\n    this.value = value;\n  }\n  type = \"Set\";\n};\nvar Macro = class extends Statement {\n  constructor(name, args, body) {\n    super();\n    this.name = name;\n    this.args = args;\n    this.body = body;\n  }\n  type = \"Macro\";\n};\nvar Expression = class extends Statement {\n  type = \"Expression\";\n};\nvar MemberExpression = class extends Expression {\n  constructor(object, property, computed) {\n    super();\n    this.object = object;\n    this.property = property;\n    this.computed = computed;\n  }\n  type = \"MemberExpression\";\n};\nvar CallExpression = class extends Expression {\n  constructor(callee, args) {\n    super();\n    this.callee = callee;\n    this.args = args;\n  }\n  type = \"CallExpression\";\n};\nvar Identifier = class extends Expression {\n  /**\n   * @param {string} value The name of the identifier\n   */\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  type = \"Identifier\";\n};\nvar Literal = class extends Expression {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  type = \"Literal\";\n};\nvar NumericLiteral = class extends Literal {\n  type = \"NumericLiteral\";\n};\nvar StringLiteral = class extends Literal {\n  type = \"StringLiteral\";\n};\nvar BooleanLiteral = class extends Literal {\n  type = \"BooleanLiteral\";\n};\nvar NullLiteral = class extends Literal {\n  type = \"NullLiteral\";\n};\nvar ArrayLiteral = class extends Literal {\n  type = \"ArrayLiteral\";\n};\nvar TupleLiteral = class extends Literal {\n  type = \"TupleLiteral\";\n};\nvar ObjectLiteral = class extends Literal {\n  type = \"ObjectLiteral\";\n};\nvar BinaryExpression = class extends Expression {\n  constructor(operator, left, right) {\n    super();\n    this.operator = operator;\n    this.left = left;\n    this.right = right;\n  }\n  type = \"BinaryExpression\";\n};\nvar FilterExpression = class extends Expression {\n  constructor(operand, filter) {\n    super();\n    this.operand = operand;\n    this.filter = filter;\n  }\n  type = \"FilterExpression\";\n};\nvar SelectExpression = class extends Expression {\n  constructor(iterable, test) {\n    super();\n    this.iterable = iterable;\n    this.test = test;\n  }\n  type = \"SelectExpression\";\n};\nvar TestExpression = class extends Expression {\n  constructor(operand, negate, test) {\n    super();\n    this.operand = operand;\n    this.negate = negate;\n    this.test = test;\n  }\n  type = \"TestExpression\";\n};\nvar UnaryExpression = class extends Expression {\n  constructor(operator, argument) {\n    super();\n    this.operator = operator;\n    this.argument = argument;\n  }\n  type = \"UnaryExpression\";\n};\nvar SliceExpression = class extends Expression {\n  constructor(start = void 0, stop = void 0, step = void 0) {\n    super();\n    this.start = start;\n    this.stop = stop;\n    this.step = step;\n  }\n  type = \"SliceExpression\";\n};\nvar KeywordArgumentExpression = class extends Expression {\n  constructor(key, value) {\n    super();\n    this.key = key;\n    this.value = value;\n  }\n  type = \"KeywordArgumentExpression\";\n};\n\n// src/parser.ts\nfunction parse(tokens) {\n  const program = new Program([]);\n  let current = 0;\n  function expect(type, error) {\n    const prev = tokens[current++];\n    if (!prev || prev.type !== type) {\n      throw new Error(`Parser Error: ${error}. ${prev.type} !== ${type}.`);\n    }\n    return prev;\n  }\n  function parseAny() {\n    switch (tokens[current].type) {\n      case TOKEN_TYPES.Text:\n        return parseText();\n      case TOKEN_TYPES.OpenStatement:\n        return parseJinjaStatement();\n      case TOKEN_TYPES.OpenExpression:\n        return parseJinjaExpression();\n      default:\n        throw new SyntaxError(`Unexpected token type: ${tokens[current].type}`);\n    }\n  }\n  function not(...types) {\n    return current + types.length <= tokens.length && types.some((type, i) => type !== tokens[current + i].type);\n  }\n  function is(...types) {\n    return current + types.length <= tokens.length && types.every((type, i) => type === tokens[current + i].type);\n  }\n  function parseText() {\n    return new StringLiteral(expect(TOKEN_TYPES.Text, \"Expected text token\").value);\n  }\n  function parseJinjaStatement() {\n    expect(TOKEN_TYPES.OpenStatement, \"Expected opening statement token\");\n    let result;\n    switch (tokens[current].type) {\n      case TOKEN_TYPES.Set:\n        ++current;\n        result = parseSetStatement();\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        break;\n      case TOKEN_TYPES.If:\n        ++current;\n        result = parseIfStatement();\n        expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n        expect(TOKEN_TYPES.EndIf, \"Expected endif token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n        break;\n      case TOKEN_TYPES.Macro:\n        ++current;\n        result = parseMacroStatement();\n        expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n        expect(TOKEN_TYPES.EndMacro, \"Expected endmacro token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n        break;\n      case TOKEN_TYPES.For:\n        ++current;\n        result = parseForStatement();\n        expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n        expect(TOKEN_TYPES.EndFor, \"Expected endfor token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n        break;\n      default:\n        throw new SyntaxError(`Unknown statement type: ${tokens[current].type}`);\n    }\n    return result;\n  }\n  function parseJinjaExpression() {\n    expect(TOKEN_TYPES.OpenExpression, \"Expected opening expression token\");\n    const result = parseExpression();\n    expect(TOKEN_TYPES.CloseExpression, \"Expected closing expression token\");\n    return result;\n  }\n  function parseSetStatement() {\n    const left = parseExpression();\n    if (is(TOKEN_TYPES.Equals)) {\n      ++current;\n      const value = parseSetStatement();\n      return new SetStatement(left, value);\n    }\n    return left;\n  }\n  function parseIfStatement() {\n    const test = parseExpression();\n    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n    const body = [];\n    const alternate = [];\n    while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && (tokens[current + 1]?.type === TOKEN_TYPES.ElseIf || tokens[current + 1]?.type === TOKEN_TYPES.Else || tokens[current + 1]?.type === TOKEN_TYPES.EndIf))) {\n      body.push(parseAny());\n    }\n    if (tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type !== TOKEN_TYPES.EndIf) {\n      ++current;\n      if (is(TOKEN_TYPES.ElseIf)) {\n        expect(TOKEN_TYPES.ElseIf, \"Expected elseif token\");\n        alternate.push(parseIfStatement());\n      } else {\n        expect(TOKEN_TYPES.Else, \"Expected else token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndIf)) {\n          alternate.push(parseAny());\n        }\n      }\n    }\n    return new If(test, body, alternate);\n  }\n  function parseMacroStatement() {\n    const name = parsePrimaryExpression();\n    if (name.type !== \"Identifier\") {\n      throw new SyntaxError(`Expected identifier following macro statement`);\n    }\n    const args = parseArgs();\n    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n    const body = [];\n    while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndMacro)) {\n      body.push(parseAny());\n    }\n    return new Macro(name, args, body);\n  }\n  function parseExpressionSequence(primary = false) {\n    const fn = primary ? parsePrimaryExpression : parseExpression;\n    const expressions = [fn()];\n    const isTuple = is(TOKEN_TYPES.Comma);\n    while (isTuple) {\n      ++current;\n      expressions.push(fn());\n      if (!is(TOKEN_TYPES.Comma)) {\n        break;\n      }\n    }\n    return isTuple ? new TupleLiteral(expressions) : expressions[0];\n  }\n  function parseForStatement() {\n    const loopVariable = parseExpressionSequence(true);\n    if (!(loopVariable instanceof Identifier || loopVariable instanceof TupleLiteral)) {\n      throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${loopVariable.type} instead`);\n    }\n    expect(TOKEN_TYPES.In, \"Expected `in` keyword following loop variable\");\n    const iterable = parseExpression();\n    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n    const body = [];\n    while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor) && not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {\n      body.push(parseAny());\n    }\n    const alternative = [];\n    if (is(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {\n      ++current;\n      ++current;\n      expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n      while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor)) {\n        alternative.push(parseAny());\n      }\n    }\n    return new For(loopVariable, iterable, body, alternative);\n  }\n  function parseExpression() {\n    return parseIfExpression();\n  }\n  function parseIfExpression() {\n    const a = parseLogicalOrExpression();\n    if (is(TOKEN_TYPES.If)) {\n      ++current;\n      const predicate = parseLogicalOrExpression();\n      if (is(TOKEN_TYPES.Else)) {\n        ++current;\n        const b = parseLogicalOrExpression();\n        return new If(predicate, [a], [b]);\n      } else {\n        return new SelectExpression(a, predicate);\n      }\n    }\n    return a;\n  }\n  function parseLogicalOrExpression() {\n    let left = parseLogicalAndExpression();\n    while (is(TOKEN_TYPES.Or)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseLogicalAndExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseLogicalAndExpression() {\n    let left = parseLogicalNegationExpression();\n    while (is(TOKEN_TYPES.And)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseLogicalNegationExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseLogicalNegationExpression() {\n    let right;\n    while (is(TOKEN_TYPES.Not)) {\n      const operator = tokens[current];\n      ++current;\n      const arg = parseLogicalNegationExpression();\n      right = new UnaryExpression(operator, arg);\n    }\n    return right ?? parseComparisonExpression();\n  }\n  function parseComparisonExpression() {\n    let left = parseAdditiveExpression();\n    while (is(TOKEN_TYPES.ComparisonBinaryOperator) || is(TOKEN_TYPES.In) || is(TOKEN_TYPES.NotIn)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseAdditiveExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseAdditiveExpression() {\n    let left = parseMultiplicativeExpression();\n    while (is(TOKEN_TYPES.AdditiveBinaryOperator)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseMultiplicativeExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseCallMemberExpression() {\n    const member = parseMemberExpression(parsePrimaryExpression());\n    if (is(TOKEN_TYPES.OpenParen)) {\n      return parseCallExpression(member);\n    }\n    return member;\n  }\n  function parseCallExpression(callee) {\n    let expression = new CallExpression(callee, parseArgs());\n    expression = parseMemberExpression(expression);\n    if (is(TOKEN_TYPES.OpenParen)) {\n      expression = parseCallExpression(expression);\n    }\n    return expression;\n  }\n  function parseArgs() {\n    expect(TOKEN_TYPES.OpenParen, \"Expected opening parenthesis for arguments list\");\n    const args = parseArgumentsList();\n    expect(TOKEN_TYPES.CloseParen, \"Expected closing parenthesis for arguments list\");\n    return args;\n  }\n  function parseArgumentsList() {\n    const args = [];\n    while (!is(TOKEN_TYPES.CloseParen)) {\n      let argument = parseExpression();\n      if (is(TOKEN_TYPES.Equals)) {\n        ++current;\n        if (!(argument instanceof Identifier)) {\n          throw new SyntaxError(`Expected identifier for keyword argument`);\n        }\n        const value = parseExpression();\n        argument = new KeywordArgumentExpression(argument, value);\n      }\n      args.push(argument);\n      if (is(TOKEN_TYPES.Comma)) {\n        ++current;\n      }\n    }\n    return args;\n  }\n  function parseMemberExpressionArgumentsList() {\n    const slices = [];\n    let isSlice = false;\n    while (!is(TOKEN_TYPES.CloseSquareBracket)) {\n      if (is(TOKEN_TYPES.Colon)) {\n        slices.push(void 0);\n        ++current;\n        isSlice = true;\n      } else {\n        slices.push(parseExpression());\n        if (is(TOKEN_TYPES.Colon)) {\n          ++current;\n          isSlice = true;\n        }\n      }\n    }\n    if (slices.length === 0) {\n      throw new SyntaxError(`Expected at least one argument for member/slice expression`);\n    }\n    if (isSlice) {\n      if (slices.length > 3) {\n        throw new SyntaxError(`Expected 0-3 arguments for slice expression`);\n      }\n      return new SliceExpression(...slices);\n    }\n    return slices[0];\n  }\n  function parseMemberExpression(object) {\n    while (is(TOKEN_TYPES.Dot) || is(TOKEN_TYPES.OpenSquareBracket)) {\n      const operator = tokens[current];\n      ++current;\n      let property;\n      const computed = operator.type !== TOKEN_TYPES.Dot;\n      if (computed) {\n        property = parseMemberExpressionArgumentsList();\n        expect(TOKEN_TYPES.CloseSquareBracket, \"Expected closing square bracket\");\n      } else {\n        property = parsePrimaryExpression();\n        if (property.type !== \"Identifier\") {\n          throw new SyntaxError(`Expected identifier following dot operator`);\n        }\n      }\n      object = new MemberExpression(object, property, computed);\n    }\n    return object;\n  }\n  function parseMultiplicativeExpression() {\n    let left = parseTestExpression();\n    while (is(TOKEN_TYPES.MultiplicativeBinaryOperator)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseTestExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseTestExpression() {\n    let operand = parseFilterExpression();\n    while (is(TOKEN_TYPES.Is)) {\n      ++current;\n      const negate = is(TOKEN_TYPES.Not);\n      if (negate) {\n        ++current;\n      }\n      let filter = parsePrimaryExpression();\n      if (filter instanceof BooleanLiteral) {\n        filter = new Identifier(filter.value.toString());\n      } else if (filter instanceof NullLiteral) {\n        filter = new Identifier(\"none\");\n      }\n      if (!(filter instanceof Identifier)) {\n        throw new SyntaxError(`Expected identifier for the test`);\n      }\n      operand = new TestExpression(operand, negate, filter);\n    }\n    return operand;\n  }\n  function parseFilterExpression() {\n    let operand = parseCallMemberExpression();\n    while (is(TOKEN_TYPES.Pipe)) {\n      ++current;\n      let filter = parsePrimaryExpression();\n      if (!(filter instanceof Identifier)) {\n        throw new SyntaxError(`Expected identifier for the filter`);\n      }\n      if (is(TOKEN_TYPES.OpenParen)) {\n        filter = parseCallExpression(filter);\n      }\n      operand = new FilterExpression(operand, filter);\n    }\n    return operand;\n  }\n  function parsePrimaryExpression() {\n    const token = tokens[current];\n    switch (token.type) {\n      case TOKEN_TYPES.NumericLiteral:\n        ++current;\n        return new NumericLiteral(Number(token.value));\n      case TOKEN_TYPES.StringLiteral:\n        ++current;\n        return new StringLiteral(token.value);\n      case TOKEN_TYPES.BooleanLiteral:\n        ++current;\n        return new BooleanLiteral(token.value.toLowerCase() === \"true\");\n      case TOKEN_TYPES.NullLiteral:\n        ++current;\n        return new NullLiteral(null);\n      case TOKEN_TYPES.Identifier:\n        ++current;\n        return new Identifier(token.value);\n      case TOKEN_TYPES.OpenParen: {\n        ++current;\n        const expression = parseExpressionSequence();\n        if (tokens[current].type !== TOKEN_TYPES.CloseParen) {\n          throw new SyntaxError(`Expected closing parenthesis, got ${tokens[current].type} instead`);\n        }\n        ++current;\n        return expression;\n      }\n      case TOKEN_TYPES.OpenSquareBracket: {\n        ++current;\n        const values = [];\n        while (!is(TOKEN_TYPES.CloseSquareBracket)) {\n          values.push(parseExpression());\n          if (is(TOKEN_TYPES.Comma)) {\n            ++current;\n          }\n        }\n        ++current;\n        return new ArrayLiteral(values);\n      }\n      case TOKEN_TYPES.OpenCurlyBracket: {\n        ++current;\n        const values = /* @__PURE__ */ new Map();\n        while (!is(TOKEN_TYPES.CloseCurlyBracket)) {\n          const key = parseExpression();\n          expect(TOKEN_TYPES.Colon, \"Expected colon between key and value in object literal\");\n          const value = parseExpression();\n          values.set(key, value);\n          if (is(TOKEN_TYPES.Comma)) {\n            ++current;\n          }\n        }\n        ++current;\n        return new ObjectLiteral(values);\n      }\n      default:\n        throw new SyntaxError(`Unexpected token: ${token.type}`);\n    }\n  }\n  while (current < tokens.length) {\n    program.body.push(parseAny());\n  }\n  return program;\n}\n\n// src/utils.ts\nfunction range(start, stop, step = 1) {\n  if (stop === void 0) {\n    stop = start;\n    start = 0;\n  }\n  const result = [];\n  for (let i = start; i < stop; i += step) {\n    result.push(i);\n  }\n  return result;\n}\nfunction slice(array, start, stop, step = 1) {\n  const direction = Math.sign(step);\n  if (direction >= 0) {\n    start = (start ??= 0) < 0 ? Math.max(array.length + start, 0) : Math.min(start, array.length);\n    stop = (stop ??= array.length) < 0 ? Math.max(array.length + stop, 0) : Math.min(stop, array.length);\n  } else {\n    start = (start ??= array.length - 1) < 0 ? Math.max(array.length + start, -1) : Math.min(start, array.length - 1);\n    stop = (stop ??= -1) < -1 ? Math.max(array.length + stop, -1) : Math.min(stop, array.length - 1);\n  }\n  const result = [];\n  for (let i = start; direction * i < direction * stop; i += step) {\n    result.push(array[i]);\n  }\n  return result;\n}\nfunction titleCase(value) {\n  return value.replace(/\\b\\w/g, (c) => c.toUpperCase());\n}\n\n// src/runtime.ts\nvar RuntimeValue = class {\n  type = \"RuntimeValue\";\n  value;\n  /**\n   * A collection of built-in functions for this type.\n   */\n  builtins = /* @__PURE__ */ new Map();\n  /**\n   * Creates a new RuntimeValue.\n   */\n  constructor(value = void 0) {\n    this.value = value;\n  }\n  /**\n   * Determines truthiness or falsiness of the runtime value.\n   * This function should be overridden by subclasses if it has custom truthiness criteria.\n   * @returns {BooleanValue} BooleanValue(true) if the value is truthy, BooleanValue(false) otherwise.\n   */\n  __bool__() {\n    return new BooleanValue(!!this.value);\n  }\n};\nvar NumericValue = class extends RuntimeValue {\n  type = \"NumericValue\";\n};\nvar StringValue = class extends RuntimeValue {\n  type = \"StringValue\";\n  builtins = /* @__PURE__ */ new Map([\n    [\n      \"upper\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.toUpperCase());\n      })\n    ],\n    [\n      \"lower\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.toLowerCase());\n      })\n    ],\n    [\n      \"strip\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.trim());\n      })\n    ],\n    [\n      \"title\",\n      new FunctionValue(() => {\n        return new StringValue(titleCase(this.value));\n      })\n    ],\n    [\"length\", new NumericValue(this.value.length)],\n    [\n      \"rstrip\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.trimEnd());\n      })\n    ],\n    [\n      \"lstrip\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.trimStart());\n      })\n    ],\n    [\n      \"split\",\n      // follows Python's `str.split(sep=None, maxsplit=-1)` function behavior\n      // https://docs.python.org/3.13/library/stdtypes.html#str.split\n      new FunctionValue((args) => {\n        const sep = args[0] ?? new NullValue();\n        if (!(sep instanceof StringValue || sep instanceof NullValue)) {\n          throw new Error(\"sep argument must be a string or null\");\n        }\n        const maxsplit = args[1] ?? new NumericValue(-1);\n        if (!(maxsplit instanceof NumericValue)) {\n          throw new Error(\"maxsplit argument must be a number\");\n        }\n        let result = [];\n        if (sep instanceof NullValue) {\n          const text = this.value.trimStart();\n          for (const { 0: match, index } of text.matchAll(/\\S+/g)) {\n            if (maxsplit.value !== -1 && result.length >= maxsplit.value && index !== void 0) {\n              result.push(match + text.slice(index + match.length));\n              break;\n            }\n            result.push(match);\n          }\n        } else {\n          if (sep.value === \"\") {\n            throw new Error(\"empty separator\");\n          }\n          result = this.value.split(sep.value);\n          if (maxsplit.value !== -1 && result.length > maxsplit.value) {\n            result.push(result.splice(maxsplit.value).join(sep.value));\n          }\n        }\n        return new ArrayValue(result.map((part) => new StringValue(part)));\n      })\n    ]\n  ]);\n};\nvar BooleanValue = class extends RuntimeValue {\n  type = \"BooleanValue\";\n};\nvar ObjectValue = class extends RuntimeValue {\n  type = \"ObjectValue\";\n  /**\n   * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n   * while only non-empty Python arrays are consider truthy.\n   *\n   * e.g.,\n   *  - JavaScript:  {} && 5 -> 5\n   *  - Python:      {} and 5 -> {}\n   */\n  __bool__() {\n    return new BooleanValue(this.value.size > 0);\n  }\n  builtins = /* @__PURE__ */ new Map([\n    [\n      \"get\",\n      new FunctionValue(([key, defaultValue]) => {\n        if (!(key instanceof StringValue)) {\n          throw new Error(`Object key must be a string: got ${key.type}`);\n        }\n        return this.value.get(key.value) ?? defaultValue ?? new NullValue();\n      })\n    ],\n    [\n      \"items\",\n      new FunctionValue(() => {\n        return new ArrayValue(\n          Array.from(this.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))\n        );\n      })\n    ]\n  ]);\n};\nvar KeywordArgumentsValue = class extends ObjectValue {\n  type = \"KeywordArgumentsValue\";\n};\nvar ArrayValue = class extends RuntimeValue {\n  type = \"ArrayValue\";\n  builtins = /* @__PURE__ */ new Map([[\"length\", new NumericValue(this.value.length)]]);\n  /**\n   * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n   * while only non-empty Python arrays are consider truthy.\n   *\n   * e.g.,\n   *  - JavaScript:  [] && 5 -> 5\n   *  - Python:      [] and 5 -> []\n   */\n  __bool__() {\n    return new BooleanValue(this.value.length > 0);\n  }\n};\nvar TupleValue = class extends ArrayValue {\n  type = \"TupleValue\";\n};\nvar FunctionValue = class extends RuntimeValue {\n  type = \"FunctionValue\";\n};\nvar NullValue = class extends RuntimeValue {\n  type = \"NullValue\";\n};\nvar UndefinedValue = class extends RuntimeValue {\n  type = \"UndefinedValue\";\n};\nvar Environment = class {\n  constructor(parent) {\n    this.parent = parent;\n  }\n  /**\n   * The variables declared in this environment.\n   */\n  variables = /* @__PURE__ */ new Map([\n    [\n      \"namespace\",\n      new FunctionValue((args) => {\n        if (args.length === 0) {\n          return new ObjectValue(/* @__PURE__ */ new Map());\n        }\n        if (args.length !== 1 || !(args[0] instanceof ObjectValue)) {\n          throw new Error(\"`namespace` expects either zero arguments or a single object argument\");\n        }\n        return args[0];\n      })\n    ]\n  ]);\n  /**\n   * The tests available in this environment.\n   */\n  tests = /* @__PURE__ */ new Map([\n    [\"boolean\", (operand) => operand.type === \"BooleanValue\"],\n    [\"callable\", (operand) => operand instanceof FunctionValue],\n    [\n      \"odd\",\n      (operand) => {\n        if (operand.type !== \"NumericValue\") {\n          throw new Error(`Cannot apply test \"odd\" to type: ${operand.type}`);\n        }\n        return operand.value % 2 !== 0;\n      }\n    ],\n    [\n      \"even\",\n      (operand) => {\n        if (operand.type !== \"NumericValue\") {\n          throw new Error(`Cannot apply test \"even\" to type: ${operand.type}`);\n        }\n        return operand.value % 2 === 0;\n      }\n    ],\n    [\"false\", (operand) => operand.type === \"BooleanValue\" && !operand.value],\n    [\"true\", (operand) => operand.type === \"BooleanValue\" && operand.value],\n    [\"none\", (operand) => operand.type === \"NullValue\"],\n    [\"string\", (operand) => operand.type === \"StringValue\"],\n    [\"number\", (operand) => operand.type === \"NumericValue\"],\n    [\"integer\", (operand) => operand.type === \"NumericValue\" && Number.isInteger(operand.value)],\n    [\"iterable\", (operand) => operand.type === \"ArrayValue\" || operand.type === \"StringValue\"],\n    [\"mapping\", (operand) => operand.type === \"ObjectValue\"],\n    [\n      \"lower\",\n      (operand) => {\n        const str = operand.value;\n        return operand.type === \"StringValue\" && str === str.toLowerCase();\n      }\n    ],\n    [\n      \"upper\",\n      (operand) => {\n        const str = operand.value;\n        return operand.type === \"StringValue\" && str === str.toUpperCase();\n      }\n    ],\n    [\"none\", (operand) => operand.type === \"NullValue\"],\n    [\"defined\", (operand) => operand.type !== \"UndefinedValue\"],\n    [\"undefined\", (operand) => operand.type === \"UndefinedValue\"],\n    [\"equalto\", (a, b) => a.value === b.value],\n    [\"eq\", (a, b) => a.value === b.value]\n  ]);\n  /**\n   * Set the value of a variable in the current environment.\n   */\n  set(name, value) {\n    return this.declareVariable(name, convertToRuntimeValues(value));\n  }\n  declareVariable(name, value) {\n    if (this.variables.has(name)) {\n      throw new SyntaxError(`Variable already declared: ${name}`);\n    }\n    this.variables.set(name, value);\n    return value;\n  }\n  // private assignVariable(name: string, value: AnyRuntimeValue): AnyRuntimeValue {\n  // \tconst env = this.resolve(name);\n  // \tenv.variables.set(name, value);\n  // \treturn value;\n  // }\n  /**\n   * Set variable in the current scope.\n   * See https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments for more information.\n   */\n  setVariable(name, value) {\n    this.variables.set(name, value);\n    return value;\n  }\n  /**\n   * Resolve the environment in which the variable is declared.\n   * @param {string} name The name of the variable.\n   * @returns {Environment} The environment in which the variable is declared.\n   */\n  resolve(name) {\n    if (this.variables.has(name)) {\n      return this;\n    }\n    if (this.parent) {\n      return this.parent.resolve(name);\n    }\n    throw new Error(`Unknown variable: ${name}`);\n  }\n  lookupVariable(name) {\n    try {\n      return this.resolve(name).variables.get(name) ?? new UndefinedValue();\n    } catch {\n      return new UndefinedValue();\n    }\n  }\n};\nvar Interpreter = class {\n  global;\n  constructor(env) {\n    this.global = env ?? new Environment();\n  }\n  /**\n   * Run the program.\n   */\n  run(program) {\n    return this.evaluate(program, this.global);\n  }\n  /**\n   * Evaluates expressions following the binary operation type.\n   */\n  evaluateBinaryExpression(node, environment) {\n    const left = this.evaluate(node.left, environment);\n    switch (node.operator.value) {\n      case \"and\":\n        return left.__bool__().value ? this.evaluate(node.right, environment) : left;\n      case \"or\":\n        return left.__bool__().value ? left : this.evaluate(node.right, environment);\n    }\n    const right = this.evaluate(node.right, environment);\n    switch (node.operator.value) {\n      case \"==\":\n        return new BooleanValue(left.value == right.value);\n      case \"!=\":\n        return new BooleanValue(left.value != right.value);\n    }\n    if (left instanceof UndefinedValue || right instanceof UndefinedValue) {\n      throw new Error(\"Cannot perform operation on undefined values\");\n    } else if (left instanceof NullValue || right instanceof NullValue) {\n      throw new Error(\"Cannot perform operation on null values\");\n    } else if (left instanceof NumericValue && right instanceof NumericValue) {\n      switch (node.operator.value) {\n        case \"+\":\n          return new NumericValue(left.value + right.value);\n        case \"-\":\n          return new NumericValue(left.value - right.value);\n        case \"*\":\n          return new NumericValue(left.value * right.value);\n        case \"/\":\n          return new NumericValue(left.value / right.value);\n        case \"%\":\n          return new NumericValue(left.value % right.value);\n        case \"<\":\n          return new BooleanValue(left.value < right.value);\n        case \">\":\n          return new BooleanValue(left.value > right.value);\n        case \">=\":\n          return new BooleanValue(left.value >= right.value);\n        case \"<=\":\n          return new BooleanValue(left.value <= right.value);\n      }\n    } else if (left instanceof ArrayValue && right instanceof ArrayValue) {\n      switch (node.operator.value) {\n        case \"+\":\n          return new ArrayValue(left.value.concat(right.value));\n      }\n    } else if (right instanceof ArrayValue) {\n      const member = right.value.find((x) => x.value === left.value) !== void 0;\n      switch (node.operator.value) {\n        case \"in\":\n          return new BooleanValue(member);\n        case \"not in\":\n          return new BooleanValue(!member);\n      }\n    }\n    if (left instanceof StringValue || right instanceof StringValue) {\n      switch (node.operator.value) {\n        case \"+\":\n          return new StringValue(left.value.toString() + right.value.toString());\n      }\n    }\n    if (left instanceof StringValue && right instanceof StringValue) {\n      switch (node.operator.value) {\n        case \"in\":\n          return new BooleanValue(right.value.includes(left.value));\n        case \"not in\":\n          return new BooleanValue(!right.value.includes(left.value));\n      }\n    }\n    if (left instanceof StringValue && right instanceof ObjectValue) {\n      switch (node.operator.value) {\n        case \"in\":\n          return new BooleanValue(right.value.has(left.value));\n        case \"not in\":\n          return new BooleanValue(!right.value.has(left.value));\n      }\n    }\n    throw new SyntaxError(`Unknown operator \"${node.operator.value}\" between ${left.type} and ${right.type}`);\n  }\n  evaluateArguments(args, environment) {\n    const positionalArguments = [];\n    const keywordArguments = /* @__PURE__ */ new Map();\n    for (const argument of args) {\n      if (argument.type === \"KeywordArgumentExpression\") {\n        const kwarg = argument;\n        keywordArguments.set(kwarg.key.value, this.evaluate(kwarg.value, environment));\n      } else {\n        if (keywordArguments.size > 0) {\n          throw new Error(\"Positional arguments must come before keyword arguments\");\n        }\n        positionalArguments.push(this.evaluate(argument, environment));\n      }\n    }\n    return [positionalArguments, keywordArguments];\n  }\n  /**\n   * Evaluates expressions following the filter operation type.\n   */\n  evaluateFilterExpression(node, environment) {\n    const operand = this.evaluate(node.operand, environment);\n    if (node.filter.type === \"Identifier\") {\n      const filter = node.filter;\n      if (filter.value === \"tojson\") {\n        return new StringValue(toJSON(operand));\n      }\n      if (operand instanceof ArrayValue) {\n        switch (filter.value) {\n          case \"list\":\n            return operand;\n          case \"first\":\n            return operand.value[0];\n          case \"last\":\n            return operand.value[operand.value.length - 1];\n          case \"length\":\n            return new NumericValue(operand.value.length);\n          case \"reverse\":\n            return new ArrayValue(operand.value.reverse());\n          case \"sort\":\n            return new ArrayValue(\n              operand.value.sort((a, b) => {\n                if (a.type !== b.type) {\n                  throw new Error(`Cannot compare different types: ${a.type} and ${b.type}`);\n                }\n                switch (a.type) {\n                  case \"NumericValue\":\n                    return a.value - b.value;\n                  case \"StringValue\":\n                    return a.value.localeCompare(b.value);\n                  default:\n                    throw new Error(`Cannot compare type: ${a.type}`);\n                }\n              })\n            );\n          case \"join\":\n            return new StringValue(operand.value.map((x) => x.value).join(\"\"));\n          default:\n            throw new Error(`Unknown ArrayValue filter: ${filter.value}`);\n        }\n      } else if (operand instanceof StringValue) {\n        switch (filter.value) {\n          case \"length\":\n            return new NumericValue(operand.value.length);\n          case \"upper\":\n            return new StringValue(operand.value.toUpperCase());\n          case \"lower\":\n            return new StringValue(operand.value.toLowerCase());\n          case \"title\":\n            return new StringValue(titleCase(operand.value));\n          case \"capitalize\":\n            return new StringValue(operand.value.charAt(0).toUpperCase() + operand.value.slice(1));\n          case \"trim\":\n            return new StringValue(operand.value.trim());\n          case \"indent\":\n            return new StringValue(\n              operand.value.split(\"\\n\").map(\n                (x, i) => (\n                  // By default, don't indent the first line or empty lines\n                  i === 0 || x.length === 0 ? x : \"    \" + x\n                )\n              ).join(\"\\n\")\n            );\n          case \"join\":\n          case \"string\":\n            return operand;\n          default:\n            throw new Error(`Unknown StringValue filter: ${filter.value}`);\n        }\n      } else if (operand instanceof NumericValue) {\n        switch (filter.value) {\n          case \"abs\":\n            return new NumericValue(Math.abs(operand.value));\n          default:\n            throw new Error(`Unknown NumericValue filter: ${filter.value}`);\n        }\n      } else if (operand instanceof ObjectValue) {\n        switch (filter.value) {\n          case \"items\":\n            return new ArrayValue(\n              Array.from(operand.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))\n            );\n          case \"length\":\n            return new NumericValue(operand.value.size);\n          default:\n            throw new Error(`Unknown ObjectValue filter: ${filter.value}`);\n        }\n      }\n      throw new Error(`Cannot apply filter \"${filter.value}\" to type: ${operand.type}`);\n    } else if (node.filter.type === \"CallExpression\") {\n      const filter = node.filter;\n      if (filter.callee.type !== \"Identifier\") {\n        throw new Error(`Unknown filter: ${filter.callee.type}`);\n      }\n      const filterName = filter.callee.value;\n      if (filterName === \"tojson\") {\n        const [, kwargs] = this.evaluateArguments(filter.args, environment);\n        const indent = kwargs.get(\"indent\") ?? new NullValue();\n        if (!(indent instanceof NumericValue || indent instanceof NullValue)) {\n          throw new Error(\"If set, indent must be a number\");\n        }\n        return new StringValue(toJSON(operand, indent.value));\n      } else if (filterName === \"join\") {\n        let value;\n        if (operand instanceof StringValue) {\n          value = Array.from(operand.value);\n        } else if (operand instanceof ArrayValue) {\n          value = operand.value.map((x) => x.value);\n        } else {\n          throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n        }\n        const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n        const separator = args.at(0) ?? kwargs.get(\"separator\") ?? new StringValue(\"\");\n        if (!(separator instanceof StringValue)) {\n          throw new Error(\"separator must be a string\");\n        }\n        return new StringValue(value.join(separator.value));\n      }\n      if (operand instanceof ArrayValue) {\n        switch (filterName) {\n          case \"selectattr\":\n          case \"rejectattr\": {\n            const select = filterName === \"selectattr\";\n            if (operand.value.some((x) => !(x instanceof ObjectValue))) {\n              throw new Error(`\\`${filterName}\\` can only be applied to array of objects`);\n            }\n            if (filter.args.some((x) => x.type !== \"StringLiteral\")) {\n              throw new Error(`arguments of \\`${filterName}\\` must be strings`);\n            }\n            const [attr, testName, value] = filter.args.map((x) => this.evaluate(x, environment));\n            let testFunction;\n            if (testName) {\n              const test = environment.tests.get(testName.value);\n              if (!test) {\n                throw new Error(`Unknown test: ${testName.value}`);\n              }\n              testFunction = test;\n            } else {\n              testFunction = (...x) => x[0].__bool__().value;\n            }\n            const filtered = operand.value.filter((item) => {\n              const a = item.value.get(attr.value);\n              const result = a ? testFunction(a, value) : false;\n              return select ? result : !result;\n            });\n            return new ArrayValue(filtered);\n          }\n          case \"map\": {\n            const [, kwargs] = this.evaluateArguments(filter.args, environment);\n            if (kwargs.has(\"attribute\")) {\n              const attr = kwargs.get(\"attribute\");\n              if (!(attr instanceof StringValue)) {\n                throw new Error(\"attribute must be a string\");\n              }\n              const defaultValue = kwargs.get(\"default\");\n              const mapped = operand.value.map((item) => {\n                if (!(item instanceof ObjectValue)) {\n                  throw new Error(\"items in map must be an object\");\n                }\n                return item.value.get(attr.value) ?? defaultValue ?? new UndefinedValue();\n              });\n              return new ArrayValue(mapped);\n            } else {\n              throw new Error(\"`map` expressions without `attribute` set are not currently supported.\");\n            }\n          }\n        }\n        throw new Error(`Unknown ArrayValue filter: ${filterName}`);\n      } else if (operand instanceof StringValue) {\n        switch (filterName) {\n          case \"indent\": {\n            const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n            const width = args.at(0) ?? kwargs.get(\"width\") ?? new NumericValue(4);\n            if (!(width instanceof NumericValue)) {\n              throw new Error(\"width must be a number\");\n            }\n            const first = args.at(1) ?? kwargs.get(\"first\") ?? new BooleanValue(false);\n            const blank = args.at(2) ?? kwargs.get(\"blank\") ?? new BooleanValue(false);\n            const lines = operand.value.split(\"\\n\");\n            const indent = \" \".repeat(width.value);\n            const indented = lines.map(\n              (x, i) => !first.value && i === 0 || !blank.value && x.length === 0 ? x : indent + x\n            );\n            return new StringValue(indented.join(\"\\n\"));\n          }\n        }\n        throw new Error(`Unknown StringValue filter: ${filterName}`);\n      } else {\n        throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n      }\n    }\n    throw new Error(`Unknown filter: ${node.filter.type}`);\n  }\n  /**\n   * Evaluates expressions following the test operation type.\n   */\n  evaluateTestExpression(node, environment) {\n    const operand = this.evaluate(node.operand, environment);\n    const test = environment.tests.get(node.test.value);\n    if (!test) {\n      throw new Error(`Unknown test: ${node.test.value}`);\n    }\n    const result = test(operand);\n    return new BooleanValue(node.negate ? !result : result);\n  }\n  /**\n   * Evaluates expressions following the unary operation type.\n   */\n  evaluateUnaryExpression(node, environment) {\n    const argument = this.evaluate(node.argument, environment);\n    switch (node.operator.value) {\n      case \"not\":\n        return new BooleanValue(!argument.value);\n      default:\n        throw new SyntaxError(`Unknown operator: ${node.operator.value}`);\n    }\n  }\n  evalProgram(program, environment) {\n    return this.evaluateBlock(program.body, environment);\n  }\n  evaluateBlock(statements, environment) {\n    let result = \"\";\n    for (const statement of statements) {\n      const lastEvaluated = this.evaluate(statement, environment);\n      if (lastEvaluated.type !== \"NullValue\" && lastEvaluated.type !== \"UndefinedValue\") {\n        result += lastEvaluated.value;\n      }\n    }\n    return new StringValue(result);\n  }\n  evaluateIdentifier(node, environment) {\n    return environment.lookupVariable(node.value);\n  }\n  evaluateCallExpression(expr, environment) {\n    const [args, kwargs] = this.evaluateArguments(expr.args, environment);\n    if (kwargs.size > 0) {\n      args.push(new KeywordArgumentsValue(kwargs));\n    }\n    const fn = this.evaluate(expr.callee, environment);\n    if (fn.type !== \"FunctionValue\") {\n      throw new Error(`Cannot call something that is not a function: got ${fn.type}`);\n    }\n    return fn.value(args, environment);\n  }\n  evaluateSliceExpression(object, expr, environment) {\n    if (!(object instanceof ArrayValue || object instanceof StringValue)) {\n      throw new Error(\"Slice object must be an array or string\");\n    }\n    const start = this.evaluate(expr.start, environment);\n    const stop = this.evaluate(expr.stop, environment);\n    const step = this.evaluate(expr.step, environment);\n    if (!(start instanceof NumericValue || start instanceof UndefinedValue)) {\n      throw new Error(\"Slice start must be numeric or undefined\");\n    }\n    if (!(stop instanceof NumericValue || stop instanceof UndefinedValue)) {\n      throw new Error(\"Slice stop must be numeric or undefined\");\n    }\n    if (!(step instanceof NumericValue || step instanceof UndefinedValue)) {\n      throw new Error(\"Slice step must be numeric or undefined\");\n    }\n    if (object instanceof ArrayValue) {\n      return new ArrayValue(slice(object.value, start.value, stop.value, step.value));\n    } else {\n      return new StringValue(slice(Array.from(object.value), start.value, stop.value, step.value).join(\"\"));\n    }\n  }\n  evaluateMemberExpression(expr, environment) {\n    const object = this.evaluate(expr.object, environment);\n    let property;\n    if (expr.computed) {\n      if (expr.property.type === \"SliceExpression\") {\n        return this.evaluateSliceExpression(object, expr.property, environment);\n      } else {\n        property = this.evaluate(expr.property, environment);\n      }\n    } else {\n      property = new StringValue(expr.property.value);\n    }\n    let value;\n    if (object instanceof ObjectValue) {\n      if (!(property instanceof StringValue)) {\n        throw new Error(`Cannot access property with non-string: got ${property.type}`);\n      }\n      value = object.value.get(property.value) ?? object.builtins.get(property.value);\n    } else if (object instanceof ArrayValue || object instanceof StringValue) {\n      if (property instanceof NumericValue) {\n        value = object.value.at(property.value);\n        if (object instanceof StringValue) {\n          value = new StringValue(object.value.at(property.value));\n        }\n      } else if (property instanceof StringValue) {\n        value = object.builtins.get(property.value);\n      } else {\n        throw new Error(`Cannot access property with non-string/non-number: got ${property.type}`);\n      }\n    } else {\n      if (!(property instanceof StringValue)) {\n        throw new Error(`Cannot access property with non-string: got ${property.type}`);\n      }\n      value = object.builtins.get(property.value);\n    }\n    return value instanceof RuntimeValue ? value : new UndefinedValue();\n  }\n  evaluateSet(node, environment) {\n    const rhs = this.evaluate(node.value, environment);\n    if (node.assignee.type === \"Identifier\") {\n      const variableName = node.assignee.value;\n      environment.setVariable(variableName, rhs);\n    } else if (node.assignee.type === \"MemberExpression\") {\n      const member = node.assignee;\n      const object = this.evaluate(member.object, environment);\n      if (!(object instanceof ObjectValue)) {\n        throw new Error(\"Cannot assign to member of non-object\");\n      }\n      if (member.property.type !== \"Identifier\") {\n        throw new Error(\"Cannot assign to member with non-identifier property\");\n      }\n      object.value.set(member.property.value, rhs);\n    } else {\n      throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(node.assignee)}`);\n    }\n    return new NullValue();\n  }\n  evaluateIf(node, environment) {\n    const test = this.evaluate(node.test, environment);\n    return this.evaluateBlock(test.__bool__().value ? node.body : node.alternate, environment);\n  }\n  evaluateFor(node, environment) {\n    const scope = new Environment(environment);\n    let test, iterable;\n    if (node.iterable.type === \"SelectExpression\") {\n      const select = node.iterable;\n      iterable = this.evaluate(select.iterable, scope);\n      test = select.test;\n    } else {\n      iterable = this.evaluate(node.iterable, scope);\n    }\n    if (!(iterable instanceof ArrayValue)) {\n      throw new Error(`Expected iterable type in for loop: got ${iterable.type}`);\n    }\n    const items = [];\n    const scopeUpdateFunctions = [];\n    for (let i = 0; i < iterable.value.length; ++i) {\n      const loopScope = new Environment(scope);\n      const current = iterable.value[i];\n      let scopeUpdateFunction;\n      if (node.loopvar.type === \"Identifier\") {\n        scopeUpdateFunction = (scope2) => scope2.setVariable(node.loopvar.value, current);\n      } else if (node.loopvar.type === \"TupleLiteral\") {\n        const loopvar = node.loopvar;\n        if (current.type !== \"ArrayValue\") {\n          throw new Error(`Cannot unpack non-iterable type: ${current.type}`);\n        }\n        const c = current;\n        if (loopvar.value.length !== c.value.length) {\n          throw new Error(`Too ${loopvar.value.length > c.value.length ? \"few\" : \"many\"} items to unpack`);\n        }\n        scopeUpdateFunction = (scope2) => {\n          for (let j = 0; j < loopvar.value.length; ++j) {\n            if (loopvar.value[j].type !== \"Identifier\") {\n              throw new Error(`Cannot unpack non-identifier type: ${loopvar.value[j].type}`);\n            }\n            scope2.setVariable(loopvar.value[j].value, c.value[j]);\n          }\n        };\n      } else {\n        throw new Error(`Invalid loop variable(s): ${node.loopvar.type}`);\n      }\n      if (test) {\n        scopeUpdateFunction(loopScope);\n        const testValue = this.evaluate(test, loopScope);\n        if (!testValue.__bool__().value) {\n          continue;\n        }\n      }\n      items.push(current);\n      scopeUpdateFunctions.push(scopeUpdateFunction);\n    }\n    let result = \"\";\n    let noIteration = true;\n    for (let i = 0; i < items.length; ++i) {\n      const loop = /* @__PURE__ */ new Map([\n        [\"index\", new NumericValue(i + 1)],\n        [\"index0\", new NumericValue(i)],\n        [\"revindex\", new NumericValue(items.length - i)],\n        [\"revindex0\", new NumericValue(items.length - i - 1)],\n        [\"first\", new BooleanValue(i === 0)],\n        [\"last\", new BooleanValue(i === items.length - 1)],\n        [\"length\", new NumericValue(items.length)],\n        [\"previtem\", i > 0 ? items[i - 1] : new UndefinedValue()],\n        [\"nextitem\", i < items.length - 1 ? items[i + 1] : new UndefinedValue()]\n      ]);\n      scope.setVariable(\"loop\", new ObjectValue(loop));\n      scopeUpdateFunctions[i](scope);\n      const evaluated = this.evaluateBlock(node.body, scope);\n      result += evaluated.value;\n      noIteration = false;\n    }\n    if (noIteration) {\n      const defaultEvaluated = this.evaluateBlock(node.defaultBlock, scope);\n      result += defaultEvaluated.value;\n    }\n    return new StringValue(result);\n  }\n  /**\n   * See https://jinja.palletsprojects.com/en/3.1.x/templates/#macros for more information.\n   */\n  evaluateMacro(node, environment) {\n    environment.setVariable(\n      node.name.value,\n      new FunctionValue((args, scope) => {\n        const macroScope = new Environment(scope);\n        args = args.slice();\n        let kwargs;\n        if (args.at(-1)?.type === \"KeywordArgumentsValue\") {\n          kwargs = args.pop();\n        }\n        for (let i = 0; i < node.args.length; ++i) {\n          const nodeArg = node.args[i];\n          const passedArg = args[i];\n          if (nodeArg.type === \"Identifier\") {\n            const identifier = nodeArg;\n            if (!passedArg) {\n              throw new Error(`Missing positional argument: ${identifier.value}`);\n            }\n            macroScope.setVariable(identifier.value, passedArg);\n          } else if (nodeArg.type === \"KeywordArgumentExpression\") {\n            const kwarg = nodeArg;\n            const value = passedArg ?? // Try positional arguments first\n            kwargs?.value.get(kwarg.key.value) ?? // Look in user-passed kwargs\n            this.evaluate(kwarg.value, macroScope);\n            macroScope.setVariable(kwarg.key.value, value);\n          } else {\n            throw new Error(`Unknown argument type: ${nodeArg.type}`);\n          }\n        }\n        return this.evaluateBlock(node.body, macroScope);\n      })\n    );\n    return new NullValue();\n  }\n  evaluate(statement, environment) {\n    if (statement === void 0)\n      return new UndefinedValue();\n    switch (statement.type) {\n      case \"Program\":\n        return this.evalProgram(statement, environment);\n      case \"Set\":\n        return this.evaluateSet(statement, environment);\n      case \"If\":\n        return this.evaluateIf(statement, environment);\n      case \"For\":\n        return this.evaluateFor(statement, environment);\n      case \"Macro\":\n        return this.evaluateMacro(statement, environment);\n      case \"NumericLiteral\":\n        return new NumericValue(Number(statement.value));\n      case \"StringLiteral\":\n        return new StringValue(statement.value);\n      case \"BooleanLiteral\":\n        return new BooleanValue(statement.value);\n      case \"NullLiteral\":\n        return new NullValue(statement.value);\n      case \"ArrayLiteral\":\n        return new ArrayValue(statement.value.map((x) => this.evaluate(x, environment)));\n      case \"TupleLiteral\":\n        return new TupleValue(statement.value.map((x) => this.evaluate(x, environment)));\n      case \"ObjectLiteral\": {\n        const mapping = /* @__PURE__ */ new Map();\n        for (const [key, value] of statement.value) {\n          const evaluatedKey = this.evaluate(key, environment);\n          if (!(evaluatedKey instanceof StringValue)) {\n            throw new Error(`Object keys must be strings: got ${evaluatedKey.type}`);\n          }\n          mapping.set(evaluatedKey.value, this.evaluate(value, environment));\n        }\n        return new ObjectValue(mapping);\n      }\n      case \"Identifier\":\n        return this.evaluateIdentifier(statement, environment);\n      case \"CallExpression\":\n        return this.evaluateCallExpression(statement, environment);\n      case \"MemberExpression\":\n        return this.evaluateMemberExpression(statement, environment);\n      case \"UnaryExpression\":\n        return this.evaluateUnaryExpression(statement, environment);\n      case \"BinaryExpression\":\n        return this.evaluateBinaryExpression(statement, environment);\n      case \"FilterExpression\":\n        return this.evaluateFilterExpression(statement, environment);\n      case \"TestExpression\":\n        return this.evaluateTestExpression(statement, environment);\n      default:\n        throw new SyntaxError(`Unknown node type: ${statement.type}`);\n    }\n  }\n};\nfunction convertToRuntimeValues(input) {\n  switch (typeof input) {\n    case \"number\":\n      return new NumericValue(input);\n    case \"string\":\n      return new StringValue(input);\n    case \"boolean\":\n      return new BooleanValue(input);\n    case \"undefined\":\n      return new UndefinedValue();\n    case \"object\":\n      if (input === null) {\n        return new NullValue();\n      } else if (Array.isArray(input)) {\n        return new ArrayValue(input.map(convertToRuntimeValues));\n      } else {\n        return new ObjectValue(\n          new Map(Object.entries(input).map(([key, value]) => [key, convertToRuntimeValues(value)]))\n        );\n      }\n    case \"function\":\n      return new FunctionValue((args, _scope) => {\n        const result = input(...args.map((x) => x.value)) ?? null;\n        return convertToRuntimeValues(result);\n      });\n    default:\n      throw new Error(`Cannot convert to runtime value: ${input}`);\n  }\n}\nfunction toJSON(input, indent, depth) {\n  const currentDepth = depth ?? 0;\n  switch (input.type) {\n    case \"NullValue\":\n    case \"UndefinedValue\":\n      return \"null\";\n    case \"NumericValue\":\n    case \"StringValue\":\n    case \"BooleanValue\":\n      return JSON.stringify(input.value);\n    case \"ArrayValue\":\n    case \"ObjectValue\": {\n      const indentValue = indent ? \" \".repeat(indent) : \"\";\n      const basePadding = \"\\n\" + indentValue.repeat(currentDepth);\n      const childrenPadding = basePadding + indentValue;\n      if (input.type === \"ArrayValue\") {\n        const core = input.value.map((x) => toJSON(x, indent, currentDepth + 1));\n        return indent ? `[${childrenPadding}${core.join(`,${childrenPadding}`)}${basePadding}]` : `[${core.join(\", \")}]`;\n      } else {\n        const core = Array.from(input.value.entries()).map(([key, value]) => {\n          const v = `\"${key}\": ${toJSON(value, indent, currentDepth + 1)}`;\n          return indent ? `${childrenPadding}${v}` : v;\n        });\n        return indent ? `{${core.join(\",\")}${basePadding}}` : `{${core.join(\", \")}}`;\n      }\n    }\n    default:\n      throw new Error(`Cannot convert to JSON: ${input.type}`);\n  }\n}\n\n// src/index.ts\nvar Template = class {\n  parsed;\n  /**\n   * @param {string} template The template string\n   */\n  constructor(template) {\n    const tokens = tokenize(template, {\n      lstrip_blocks: true,\n      trim_blocks: true\n    });\n    this.parsed = parse(tokens);\n  }\n  render(items) {\n    const env = new Environment();\n    env.set(\"false\", false);\n    env.set(\"true\", true);\n    env.set(\"raise_exception\", (args) => {\n      throw new Error(args);\n    });\n    env.set(\"range\", range);\n    if (items) {\n      for (const [key, value] of Object.entries(items)) {\n        env.set(key, value);\n      }\n    }\n    const interpreter = new Interpreter(env);\n    const result = interpreter.run(this.parsed);\n    return result.value;\n  }\n};\nexport {\n  Environment,\n  Interpreter,\n  Template,\n  parse,\n  tokenize\n};\n", "var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name2 in all)\n    __defProp(target, name2, { get: all[name2], enumerable: true });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  audioToAudio: () => audioToAudio,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  chatCompletion: () => chatCompletion,\n  chatCompletionStream: () => chatCompletionStream,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToImage: () => imageToImage,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  tabularClassification: () => tabularClassification,\n  tabularRegression: () => tabularRegression,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  textToVideo: () => textToVideo,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification,\n  zeroShotImageClassification: () => zeroShotImageClassification\n});\n\n// src/config.ts\nvar HF_HUB_URL = \"https://huggingface.co\";\nvar HF_ROUTER_URL = \"https://router.huggingface.co\";\n\n// src/providers/black-forest-labs.ts\nvar BLACK_FOREST_LABS_AI_API_BASE_URL = \"https://api.us1.bfl.ai\";\nvar makeBaseUrl = () => {\n  return BLACK_FOREST_LABS_AI_API_BASE_URL;\n};\nvar makeBody = (params) => {\n  return params.args;\n};\nvar makeHeaders = (params) => {\n  if (params.authMethod === \"provider-key\") {\n    return { \"X-Key\": `${params.accessToken}` };\n  } else {\n    return { Authorization: `Bearer ${params.accessToken}` };\n  }\n};\nvar makeUrl = (params) => {\n  return `${params.baseUrl}/v1/${params.model}`;\n};\nvar BLACK_FOREST_LABS_CONFIG = {\n  makeBaseUrl,\n  makeBody,\n  makeHeaders,\n  makeUrl\n};\n\n// src/providers/cerebras.ts\nvar CEREBRAS_API_BASE_URL = \"https://api.cerebras.ai\";\nvar makeBaseUrl2 = () => {\n  return CEREBRAS_API_BASE_URL;\n};\nvar makeBody2 = (params) => {\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders2 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl2 = (params) => {\n  return `${params.baseUrl}/v1/chat/completions`;\n};\nvar CEREBRAS_CONFIG = {\n  makeBaseUrl: makeBaseUrl2,\n  makeBody: makeBody2,\n  makeHeaders: makeHeaders2,\n  makeUrl: makeUrl2\n};\n\n// src/providers/cohere.ts\nvar COHERE_API_BASE_URL = \"https://api.cohere.com\";\nvar makeBaseUrl3 = () => {\n  return COHERE_API_BASE_URL;\n};\nvar makeBody3 = (params) => {\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders3 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl3 = (params) => {\n  return `${params.baseUrl}/compatibility/v1/chat/completions`;\n};\nvar COHERE_CONFIG = {\n  makeBaseUrl: makeBaseUrl3,\n  makeBody: makeBody3,\n  makeHeaders: makeHeaders3,\n  makeUrl: makeUrl3\n};\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(\n      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`\n    );\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/lib/isUrl.ts\nfunction isUrl(modelOrUrl) {\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n\n// src/utils/delay.ts\nfunction delay(ms) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(), ms);\n  });\n}\n\n// src/providers/fal-ai.ts\nvar FAL_AI_API_BASE_URL = \"https://fal.run\";\nvar FAL_AI_API_BASE_URL_QUEUE = \"https://queue.fal.run\";\nvar makeBaseUrl4 = (task) => {\n  return task === \"text-to-video\" ? FAL_AI_API_BASE_URL_QUEUE : FAL_AI_API_BASE_URL;\n};\nvar makeBody4 = (params) => {\n  return params.args;\n};\nvar makeHeaders4 = (params) => {\n  return {\n    Authorization: params.authMethod === \"provider-key\" ? `Key ${params.accessToken}` : `Bearer ${params.accessToken}`\n  };\n};\nvar makeUrl4 = (params) => {\n  const baseUrl = `${params.baseUrl}/${params.model}`;\n  if (params.authMethod !== \"provider-key\" && params.task === \"text-to-video\") {\n    return `${baseUrl}?_subdomain=queue`;\n  }\n  return baseUrl;\n};\nvar FAL_AI_CONFIG = {\n  makeBaseUrl: makeBaseUrl4,\n  makeBody: makeBody4,\n  makeHeaders: makeHeaders4,\n  makeUrl: makeUrl4\n};\nasync function pollFalResponse(res, url, headers) {\n  const requestId = res.request_id;\n  if (!requestId) {\n    throw new InferenceOutputError(\"No request ID found in the response\");\n  }\n  let status = res.status;\n  const parsedUrl = new URL(url);\n  const baseUrl = `${parsedUrl.protocol}//${parsedUrl.host}${parsedUrl.host === \"router.huggingface.co\" ? \"/fal-ai\" : \"\"}`;\n  const modelId = new URL(res.response_url).pathname;\n  const queryParams = parsedUrl.search;\n  const statusUrl = `${baseUrl}${modelId}/status${queryParams}`;\n  const resultUrl = `${baseUrl}${modelId}${queryParams}`;\n  while (status !== \"COMPLETED\") {\n    await delay(500);\n    const statusResponse = await fetch(statusUrl, { headers });\n    if (!statusResponse.ok) {\n      throw new InferenceOutputError(\"Failed to fetch response status from fal-ai API\");\n    }\n    try {\n      status = (await statusResponse.json()).status;\n    } catch (error) {\n      throw new InferenceOutputError(\"Failed to parse status response from fal-ai API\");\n    }\n  }\n  const resultResponse = await fetch(resultUrl, { headers });\n  let result;\n  try {\n    result = await resultResponse.json();\n  } catch (error) {\n    throw new InferenceOutputError(\"Failed to parse result response from fal-ai API\");\n  }\n  if (typeof result === \"object\" && !!result && \"video\" in result && typeof result.video === \"object\" && !!result.video && \"url\" in result.video && typeof result.video.url === \"string\" && isUrl(result.video.url)) {\n    const urlResponse = await fetch(result.video.url);\n    return await urlResponse.blob();\n  } else {\n    throw new InferenceOutputError(\n      \"Expected { video: { url: string } } result format, got instead: \" + JSON.stringify(result)\n    );\n  }\n}\n\n// src/providers/fireworks-ai.ts\nvar FIREWORKS_AI_API_BASE_URL = \"https://api.fireworks.ai\";\nvar makeBaseUrl5 = () => {\n  return FIREWORKS_AI_API_BASE_URL;\n};\nvar makeBody5 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders5 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl5 = (params) => {\n  if (params.chatCompletion) {\n    return `${params.baseUrl}/inference/v1/chat/completions`;\n  }\n  return `${params.baseUrl}/inference`;\n};\nvar FIREWORKS_AI_CONFIG = {\n  makeBaseUrl: makeBaseUrl5,\n  makeBody: makeBody5,\n  makeHeaders: makeHeaders5,\n  makeUrl: makeUrl5\n};\n\n// src/providers/hf-inference.ts\nvar makeBaseUrl6 = () => {\n  return `${HF_ROUTER_URL}/hf-inference`;\n};\nvar makeBody6 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders6 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl6 = (params) => {\n  if (params.task && [\"feature-extraction\", \"sentence-similarity\"].includes(params.task)) {\n    return `${params.baseUrl}/pipeline/${params.task}/${params.model}`;\n  }\n  if (params.chatCompletion) {\n    return `${params.baseUrl}/models/${params.model}/v1/chat/completions`;\n  }\n  return `${params.baseUrl}/models/${params.model}`;\n};\nvar HF_INFERENCE_CONFIG = {\n  makeBaseUrl: makeBaseUrl6,\n  makeBody: makeBody6,\n  makeHeaders: makeHeaders6,\n  makeUrl: makeUrl6\n};\n\n// src/providers/hyperbolic.ts\nvar HYPERBOLIC_API_BASE_URL = \"https://api.hyperbolic.xyz\";\nvar makeBaseUrl7 = () => {\n  return HYPERBOLIC_API_BASE_URL;\n};\nvar makeBody7 = (params) => {\n  return {\n    ...params.args,\n    ...params.task === \"text-to-image\" ? { model_name: params.model } : { model: params.model }\n  };\n};\nvar makeHeaders7 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl7 = (params) => {\n  if (params.task === \"text-to-image\") {\n    return `${params.baseUrl}/v1/images/generations`;\n  }\n  return `${params.baseUrl}/v1/chat/completions`;\n};\nvar HYPERBOLIC_CONFIG = {\n  makeBaseUrl: makeBaseUrl7,\n  makeBody: makeBody7,\n  makeHeaders: makeHeaders7,\n  makeUrl: makeUrl7\n};\n\n// src/providers/nebius.ts\nvar NEBIUS_API_BASE_URL = \"https://api.studio.nebius.ai\";\nvar makeBaseUrl8 = () => {\n  return NEBIUS_API_BASE_URL;\n};\nvar makeBody8 = (params) => {\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders8 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl8 = (params) => {\n  if (params.task === \"text-to-image\") {\n    return `${params.baseUrl}/v1/images/generations`;\n  }\n  if (params.chatCompletion) {\n    return `${params.baseUrl}/v1/chat/completions`;\n  }\n  if (params.task === \"text-generation\") {\n    return `${params.baseUrl}/v1/completions`;\n  }\n  return params.baseUrl;\n};\nvar NEBIUS_CONFIG = {\n  makeBaseUrl: makeBaseUrl8,\n  makeBody: makeBody8,\n  makeHeaders: makeHeaders8,\n  makeUrl: makeUrl8\n};\n\n// src/providers/novita.ts\nvar NOVITA_API_BASE_URL = \"https://api.novita.ai\";\nvar makeBaseUrl9 = () => {\n  return NOVITA_API_BASE_URL;\n};\nvar makeBody9 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders9 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl9 = (params) => {\n  if (params.chatCompletion) {\n    return `${params.baseUrl}/v3/openai/chat/completions`;\n  } else if (params.task === \"text-generation\") {\n    return `${params.baseUrl}/v3/openai/completions`;\n  } else if (params.task === \"text-to-video\") {\n    return `${params.baseUrl}/v3/hf/${params.model}`;\n  }\n  return params.baseUrl;\n};\nvar NOVITA_CONFIG = {\n  makeBaseUrl: makeBaseUrl9,\n  makeBody: makeBody9,\n  makeHeaders: makeHeaders9,\n  makeUrl: makeUrl9\n};\n\n// src/providers/replicate.ts\nvar REPLICATE_API_BASE_URL = \"https://api.replicate.com\";\nvar makeBaseUrl10 = () => {\n  return REPLICATE_API_BASE_URL;\n};\nvar makeBody10 = (params) => {\n  return {\n    input: params.args,\n    version: params.model.includes(\":\") ? params.model.split(\":\")[1] : void 0\n  };\n};\nvar makeHeaders10 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}`, Prefer: \"wait\" };\n};\nvar makeUrl10 = (params) => {\n  if (params.model.includes(\":\")) {\n    return `${params.baseUrl}/v1/predictions`;\n  }\n  return `${params.baseUrl}/v1/models/${params.model}/predictions`;\n};\nvar REPLICATE_CONFIG = {\n  makeBaseUrl: makeBaseUrl10,\n  makeBody: makeBody10,\n  makeHeaders: makeHeaders10,\n  makeUrl: makeUrl10\n};\n\n// src/providers/sambanova.ts\nvar SAMBANOVA_API_BASE_URL = \"https://api.sambanova.ai\";\nvar makeBaseUrl11 = () => {\n  return SAMBANOVA_API_BASE_URL;\n};\nvar makeBody11 = (params) => {\n  return {\n    ...params.args,\n    ...params.chatCompletion ? { model: params.model } : void 0\n  };\n};\nvar makeHeaders11 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl11 = (params) => {\n  if (params.chatCompletion) {\n    return `${params.baseUrl}/v1/chat/completions`;\n  }\n  return params.baseUrl;\n};\nvar SAMBANOVA_CONFIG = {\n  makeBaseUrl: makeBaseUrl11,\n  makeBody: makeBody11,\n  makeHeaders: makeHeaders11,\n  makeUrl: makeUrl11\n};\n\n// src/providers/together.ts\nvar TOGETHER_API_BASE_URL = \"https://api.together.xyz\";\nvar makeBaseUrl12 = () => {\n  return TOGETHER_API_BASE_URL;\n};\nvar makeBody12 = (params) => {\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders12 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl12 = (params) => {\n  if (params.task === \"text-to-image\") {\n    return `${params.baseUrl}/v1/images/generations`;\n  }\n  if (params.chatCompletion) {\n    return `${params.baseUrl}/v1/chat/completions`;\n  }\n  if (params.task === \"text-generation\") {\n    return `${params.baseUrl}/v1/completions`;\n  }\n  return params.baseUrl;\n};\nvar TOGETHER_CONFIG = {\n  makeBaseUrl: makeBaseUrl12,\n  makeBody: makeBody12,\n  makeHeaders: makeHeaders12,\n  makeUrl: makeUrl12\n};\n\n// src/providers/openai.ts\nvar OPENAI_API_BASE_URL = \"https://api.openai.com\";\nvar makeBaseUrl13 = () => {\n  return OPENAI_API_BASE_URL;\n};\nvar makeBody13 = (params) => {\n  if (!params.chatCompletion) {\n    throw new Error(\"OpenAI only supports chat completions.\");\n  }\n  return {\n    ...params.args,\n    model: params.model\n  };\n};\nvar makeHeaders13 = (params) => {\n  return { Authorization: `Bearer ${params.accessToken}` };\n};\nvar makeUrl13 = (params) => {\n  if (!params.chatCompletion) {\n    throw new Error(\"OpenAI only supports chat completions.\");\n  }\n  return `${params.baseUrl}/v1/chat/completions`;\n};\nvar OPENAI_CONFIG = {\n  makeBaseUrl: makeBaseUrl13,\n  makeBody: makeBody13,\n  makeHeaders: makeHeaders13,\n  makeUrl: makeUrl13,\n  clientSideRoutingOnly: true\n};\n\n// package.json\nvar name = \"@huggingface/inference\";\nvar version = \"3.6.2\";\n\n// src/providers/consts.ts\nvar HARDCODED_MODEL_ID_MAPPING = {\n  /**\n   * \"HF model ID\" => \"Model ID on Inference Provider's side\"\n   *\n   * Example:\n   * \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Qwen2.5-Coder-32B-Instruct\",\n   */\n  \"black-forest-labs\": {},\n  cerebras: {},\n  cohere: {},\n  \"fal-ai\": {},\n  \"fireworks-ai\": {},\n  \"hf-inference\": {},\n  hyperbolic: {},\n  nebius: {},\n  novita: {},\n  openai: {},\n  replicate: {},\n  sambanova: {},\n  together: {}\n};\n\n// src/lib/getProviderModelId.ts\nvar inferenceProviderMappingCache = /* @__PURE__ */ new Map();\nasync function getProviderModelId(params, args, options = {}) {\n  if (params.provider === \"hf-inference\") {\n    return params.model;\n  }\n  if (!options.task) {\n    throw new Error(\"task must be specified when using a third-party provider\");\n  }\n  const task = options.task === \"text-generation\" && options.chatCompletion ? \"conversational\" : options.task;\n  if (HARDCODED_MODEL_ID_MAPPING[params.provider]?.[params.model]) {\n    return HARDCODED_MODEL_ID_MAPPING[params.provider][params.model];\n  }\n  let inferenceProviderMapping;\n  if (inferenceProviderMappingCache.has(params.model)) {\n    inferenceProviderMapping = inferenceProviderMappingCache.get(params.model);\n  } else {\n    inferenceProviderMapping = await (options?.fetch ?? fetch)(\n      `${HF_HUB_URL}/api/models/${params.model}?expand[]=inferenceProviderMapping`,\n      {\n        headers: args.accessToken?.startsWith(\"hf_\") ? { Authorization: `Bearer ${args.accessToken}` } : {}\n      }\n    ).then((resp) => resp.json()).then((json) => json.inferenceProviderMapping).catch(() => null);\n  }\n  if (!inferenceProviderMapping) {\n    throw new Error(`We have not been able to find inference provider information for model ${params.model}.`);\n  }\n  const providerMapping = inferenceProviderMapping[params.provider];\n  if (providerMapping) {\n    if (providerMapping.task !== task) {\n      throw new Error(\n        `Model ${params.model} is not supported for task ${task} and provider ${params.provider}. Supported task: ${providerMapping.task}.`\n      );\n    }\n    if (providerMapping.status === \"staging\") {\n      console.warn(\n        `Model ${params.model} is in staging mode for provider ${params.provider}. Meant for test purposes only.`\n      );\n    }\n    return providerMapping.providerId;\n  }\n  throw new Error(`Model ${params.model} is not supported provider ${params.provider}.`);\n}\n\n// src/lib/makeRequestOptions.ts\nvar HF_HUB_INFERENCE_PROXY_TEMPLATE = `${HF_ROUTER_URL}/{{PROVIDER}}`;\nvar tasks = null;\nvar providerConfigs = {\n  \"black-forest-labs\": BLACK_FOREST_LABS_CONFIG,\n  cerebras: CEREBRAS_CONFIG,\n  cohere: COHERE_CONFIG,\n  \"fal-ai\": FAL_AI_CONFIG,\n  \"fireworks-ai\": FIREWORKS_AI_CONFIG,\n  \"hf-inference\": HF_INFERENCE_CONFIG,\n  hyperbolic: HYPERBOLIC_CONFIG,\n  openai: OPENAI_CONFIG,\n  nebius: NEBIUS_CONFIG,\n  novita: NOVITA_CONFIG,\n  replicate: REPLICATE_CONFIG,\n  sambanova: SAMBANOVA_CONFIG,\n  together: TOGETHER_CONFIG\n};\nasync function makeRequestOptions(args, options) {\n  const { provider: maybeProvider, model: maybeModel } = args;\n  const provider = maybeProvider ?? \"hf-inference\";\n  const providerConfig = providerConfigs[provider];\n  const { task, chatCompletion: chatCompletion2 } = options ?? {};\n  if (args.endpointUrl && provider !== \"hf-inference\") {\n    throw new Error(`Cannot use endpointUrl with a third-party provider.`);\n  }\n  if (maybeModel && isUrl(maybeModel)) {\n    throw new Error(`Model URLs are no longer supported. Use endpointUrl instead.`);\n  }\n  if (!maybeModel && !task) {\n    throw new Error(\"No model provided, and no task has been specified.\");\n  }\n  if (!providerConfig) {\n    throw new Error(`No provider config found for provider ${provider}`);\n  }\n  if (providerConfig.clientSideRoutingOnly && !maybeModel) {\n    throw new Error(`Provider ${provider} requires a model ID to be passed directly.`);\n  }\n  const hfModel = maybeModel ?? await loadDefaultModel(task);\n  const resolvedModel = providerConfig.clientSideRoutingOnly ? (\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    removeProviderPrefix(maybeModel, provider)\n  ) : await getProviderModelId({ model: hfModel, provider }, args, {\n    task,\n    chatCompletion: chatCompletion2,\n    fetch: options?.fetch\n  });\n  return makeRequestOptionsFromResolvedModel(resolvedModel, args, options);\n}\nfunction makeRequestOptionsFromResolvedModel(resolvedModel, args, options) {\n  const { accessToken, endpointUrl, provider: maybeProvider, model, ...remainingArgs } = args;\n  const provider = maybeProvider ?? \"hf-inference\";\n  const providerConfig = providerConfigs[provider];\n  const { includeCredentials, task, chatCompletion: chatCompletion2, signal } = options ?? {};\n  const authMethod = (() => {\n    if (providerConfig.clientSideRoutingOnly) {\n      if (accessToken && accessToken.startsWith(\"hf_\")) {\n        throw new Error(`Provider ${provider} is closed-source and does not support HF tokens.`);\n      }\n      return \"provider-key\";\n    }\n    if (accessToken) {\n      return accessToken.startsWith(\"hf_\") ? \"hf-token\" : \"provider-key\";\n    }\n    if (includeCredentials === \"include\") {\n      return \"credentials-include\";\n    }\n    return \"none\";\n  })();\n  const url = endpointUrl ? chatCompletion2 ? endpointUrl + `/v1/chat/completions` : endpointUrl : providerConfig.makeUrl({\n    authMethod,\n    baseUrl: authMethod !== \"provider-key\" ? HF_HUB_INFERENCE_PROXY_TEMPLATE.replace(\"{{PROVIDER}}\", provider) : providerConfig.makeBaseUrl(task),\n    model: resolvedModel,\n    chatCompletion: chatCompletion2,\n    task\n  });\n  const binary = \"data\" in args && !!args.data;\n  const headers = providerConfig.makeHeaders({\n    accessToken,\n    authMethod\n  });\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  const ownUserAgent = `${name}/${version}`;\n  const userAgent = [ownUserAgent, typeof navigator !== \"undefined\" ? navigator.userAgent : void 0].filter((x) => x !== void 0).join(\" \");\n  headers[\"User-Agent\"] = userAgent;\n  const body = binary ? args.data : JSON.stringify(\n    providerConfig.makeBody({\n      args: remainingArgs,\n      model: resolvedModel,\n      task,\n      chatCompletion: chatCompletion2\n    })\n  );\n  let credentials;\n  if (typeof includeCredentials === \"string\") {\n    credentials = includeCredentials;\n  } else if (includeCredentials === true) {\n    credentials = \"include\";\n  }\n  const info = {\n    headers,\n    method: \"POST\",\n    body,\n    ...credentials ? { credentials } : void 0,\n    signal\n  };\n  return { url, info };\n}\nasync function loadDefaultModel(task) {\n  if (!tasks) {\n    tasks = await loadTaskInfo();\n  }\n  const taskInfo = tasks[task];\n  if ((taskInfo?.models.length ?? 0) <= 0) {\n    throw new Error(`No default model defined for task ${task}, please define the model explicitly.`);\n  }\n  return taskInfo.models[0].id;\n}\nasync function loadTaskInfo() {\n  const res = await fetch(`${HF_HUB_URL}/api/tasks`);\n  if (!res.ok) {\n    throw new Error(\"Failed to load tasks definitions from Hugging Face Hub.\");\n  }\n  return await res.json();\n}\nfunction removeProviderPrefix(model, provider) {\n  if (!model.startsWith(`${provider}/`)) {\n    throw new Error(`Models from ${provider} must be prefixed by \"${provider}/\". Got \"${model}\".`);\n  }\n  return model.slice(provider.length + 1);\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const { url, info } = await makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503) {\n    return request(args, options);\n  }\n  if (!response.ok) {\n    const contentType = response.headers.get(\"Content-Type\");\n    if ([\"application/json\", \"application/problem+json\"].some((ct) => contentType?.startsWith(ct))) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(\n          `Server ${args.model} does not seem to support chat completion. Error: ${JSON.stringify(output.error)}`\n        );\n      }\n      if (output.error || output.detail) {\n        throw new Error(JSON.stringify(output.error ?? output.detail));\n      } else {\n        throw new Error(output);\n      }\n    }\n    const message = contentType?.startsWith(\"text/plain;\") ? await response.text() : void 0;\n    throw new Error(message ?? \"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const { url, info } = await makeRequestOptions({ ...args, stream: true }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503) {\n    return yield* streamingRequest(args, options);\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if ([400, 422, 404, 500].includes(response.status) && options?.chatCompletion) {\n        throw new Error(`Server ${args.model} does not seem to support chat completion. Error: ${output.error}`);\n      }\n      if (typeof output.error === \"string\") {\n        throw new Error(output.error);\n      }\n      if (output.error && \"message\" in output.error && typeof output.error.message === \"string\") {\n        throw new Error(output.error.message);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n    throw new Error(\n      `Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\")\n    );\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = (event) => {\n    events.push(event);\n  };\n  const onChunk = getLines(\n    getMessages(\n      () => {\n      },\n      () => {\n      },\n      onEvent\n    )\n  );\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          if (event.data === \"[DONE]\") {\n            return;\n          }\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            const errorStr = typeof data.error === \"string\" ? data.error : typeof data.error === \"object\" && data.error && \"message\" in data.error && typeof data.error.message === \"string\" ? data.error.message : JSON.stringify(data.error);\n            throw new Error(`Error forwarded from backend: ` + errorStr);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/utils/pick.ts\nfunction pick(o, props) {\n  return Object.assign(\n    {},\n    ...props.map((prop) => {\n      if (o[prop] !== void 0) {\n        return { [prop]: o[prop] };\n      }\n    })\n  );\n}\n\n// src/utils/typedInclude.ts\nfunction typedInclude(arr, v) {\n  return arr.includes(v);\n}\n\n// src/utils/omit.ts\nfunction omit(o, props) {\n  const propsArr = Array.isArray(props) ? props : [props];\n  const letsKeep = Object.keys(o).filter((prop) => !typedInclude(propsArr, prop));\n  return pick(o, letsKeep);\n}\n\n// src/tasks/audio/utils.ts\nfunction preparePayload(args) {\n  return \"data\" in args ? args : {\n    ...omit(args, \"inputs\"),\n    data: args.inputs\n  };\n}\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"audio-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach((byte) => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const payload = await buildPayload(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"automatic-speech-recognition\"\n  });\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\nvar FAL_AI_SUPPORTED_BLOB_TYPES = [\"audio/mpeg\", \"audio/mp4\", \"audio/wav\", \"audio/x-wav\"];\nasync function buildPayload(args) {\n  if (args.provider === \"fal-ai\") {\n    const blob = \"data\" in args && args.data instanceof Blob ? args.data : \"inputs\" in args ? args.inputs : void 0;\n    const contentType = blob?.type;\n    if (!contentType) {\n      throw new Error(\n        `Unable to determine the input's content-type. Make sure your are passing a Blob when using provider fal-ai.`\n      );\n    }\n    if (!FAL_AI_SUPPORTED_BLOB_TYPES.includes(contentType)) {\n      throw new Error(\n        `Provider fal-ai does not support blob type ${contentType} - supported content types are: ${FAL_AI_SUPPORTED_BLOB_TYPES.join(\n          \", \"\n        )}`\n      );\n    }\n    const base64audio = base64FromBytes(new Uint8Array(await blob.arrayBuffer()));\n    return {\n      ...\"data\" in args ? omit(args, \"data\") : omit(args, \"inputs\"),\n      audio_url: `data:${contentType};base64,${base64audio}`\n    };\n  } else {\n    return preparePayload(args);\n  }\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const payload = args.provider === \"replicate\" ? {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    text: args.inputs\n  } : args;\n  const res = await request(payload, {\n    ...options,\n    task: \"text-to-speech\"\n  });\n  if (res instanceof Blob) {\n    return res;\n  }\n  if (res && typeof res === \"object\") {\n    if (\"output\" in res) {\n      if (typeof res.output === \"string\") {\n        const urlResponse = await fetch(res.output);\n        const blob = await urlResponse.blob();\n        return blob;\n      } else if (Array.isArray(res.output)) {\n        const urlResponse = await fetch(res.output[0]);\n        const blob = await urlResponse.blob();\n        return blob;\n      }\n    }\n  }\n  throw new InferenceOutputError(\"Expected Blob or object with output\");\n}\n\n// src/tasks/audio/audioToAudio.ts\nasync function audioToAudio(args, options) {\n  const payload = preparePayload(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"audio-to-audio\"\n  });\n  return validateOutput(res);\n}\nfunction validateOutput(output) {\n  if (!Array.isArray(output)) {\n    throw new InferenceOutputError(\"Expected Array\");\n  }\n  if (!output.every((elem) => {\n    return typeof elem === \"object\" && elem && \"label\" in elem && typeof elem.label === \"string\" && \"content-type\" in elem && typeof elem[\"content-type\"] === \"string\" && \"blob\" in elem && typeof elem.blob === \"string\";\n  })) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, audio: Blob}>\");\n  }\n  return output;\n}\n\n// src/tasks/cv/utils.ts\nfunction preparePayload2(args) {\n  return \"data\" in args ? args : { ...omit(args, \"inputs\"), data: args.inputs };\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"image-segmentation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const payload = preparePayload2(args);\n  const res = (await request(payload, {\n    ...options,\n    task: \"image-to-text\"\n  }))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const payload = preparePayload2(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"object-detection\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/cv/textToImage.ts\nfunction getResponseFormatArg(provider) {\n  switch (provider) {\n    case \"fal-ai\":\n      return { sync_mode: true };\n    case \"nebius\":\n      return { response_format: \"b64_json\" };\n    case \"replicate\":\n      return void 0;\n    case \"together\":\n      return { response_format: \"base64\" };\n    default:\n      return void 0;\n  }\n}\nasync function textToImage(args, options) {\n  const payload = !args.provider || args.provider === \"hf-inference\" || args.provider === \"sambanova\" ? args : {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    ...args.parameters,\n    ...getResponseFormatArg(args.provider),\n    prompt: args.inputs\n  };\n  const res = await request(payload, {\n    ...options,\n    task: \"text-to-image\"\n  });\n  if (res && typeof res === \"object\") {\n    if (args.provider === \"black-forest-labs\" && \"polling_url\" in res && typeof res.polling_url === \"string\") {\n      return await pollBflResponse(res.polling_url, options?.outputType);\n    }\n    if (args.provider === \"fal-ai\" && \"images\" in res && Array.isArray(res.images) && res.images[0].url) {\n      if (options?.outputType === \"url\") {\n        return res.images[0].url;\n      } else {\n        const image = await fetch(res.images[0].url);\n        return await image.blob();\n      }\n    }\n    if (args.provider === \"hyperbolic\" && \"images\" in res && Array.isArray(res.images) && res.images[0] && typeof res.images[0].image === \"string\") {\n      if (options?.outputType === \"url\") {\n        return `data:image/jpeg;base64,${res.images[0].image}`;\n      }\n      const base64Response = await fetch(`data:image/jpeg;base64,${res.images[0].image}`);\n      return await base64Response.blob();\n    }\n    if (\"data\" in res && Array.isArray(res.data) && res.data[0].b64_json) {\n      const base64Data = res.data[0].b64_json;\n      if (options?.outputType === \"url\") {\n        return `data:image/jpeg;base64,${base64Data}`;\n      }\n      const base64Response = await fetch(`data:image/jpeg;base64,${base64Data}`);\n      return await base64Response.blob();\n    }\n    if (\"output\" in res && Array.isArray(res.output)) {\n      if (options?.outputType === \"url\") {\n        return res.output[0];\n      }\n      const urlResponse = await fetch(res.output[0]);\n      const blob = await urlResponse.blob();\n      return blob;\n    }\n  }\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  if (options?.outputType === \"url\") {\n    const b64 = await res.arrayBuffer().then((buf) => Buffer.from(buf).toString(\"base64\"));\n    return `data:image/jpeg;base64,${b64}`;\n  }\n  return res;\n}\nasync function pollBflResponse(url, outputType) {\n  const urlObj = new URL(url);\n  for (let step = 0; step < 5; step++) {\n    await delay(1e3);\n    console.debug(`Polling Black Forest Labs API for the result... ${step + 1}/5`);\n    urlObj.searchParams.set(\"attempt\", step.toString(10));\n    const resp = await fetch(urlObj, { headers: { \"Content-Type\": \"application/json\" } });\n    if (!resp.ok) {\n      throw new InferenceOutputError(\"Failed to fetch result from black forest labs API\");\n    }\n    const payload = await resp.json();\n    if (typeof payload === \"object\" && payload && \"status\" in payload && typeof payload.status === \"string\" && payload.status === \"Ready\" && \"result\" in payload && typeof payload.result === \"object\" && payload.result && \"sample\" in payload.result && typeof payload.result.sample === \"string\") {\n      if (outputType === \"url\") {\n        return payload.result.sample;\n      }\n      const image = await fetch(payload.result.sample);\n      return await image.blob();\n    }\n  }\n  throw new InferenceOutputError(\"Failed to fetch result from black forest labs API\");\n}\n\n// src/tasks/cv/imageToImage.ts\nasync function imageToImage(args, options) {\n  let reqArgs;\n  if (!args.parameters) {\n    reqArgs = {\n      accessToken: args.accessToken,\n      model: args.model,\n      data: args.inputs\n    };\n  } else {\n    reqArgs = {\n      ...args,\n      inputs: base64FromBytes(\n        new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer())\n      )\n    };\n  }\n  const res = await request(reqArgs, {\n    ...options,\n    task: \"image-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function preparePayload3(args) {\n  if (args.inputs instanceof Blob) {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(new Uint8Array(await args.inputs.arrayBuffer()))\n      }\n    };\n  } else {\n    return {\n      ...args,\n      inputs: {\n        image: base64FromBytes(\n          new Uint8Array(\n            args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n          )\n        )\n      }\n    };\n  }\n}\nasync function zeroShotImageClassification(args, options) {\n  const payload = await preparePayload3(args);\n  const res = await request(payload, {\n    ...options,\n    task: \"zero-shot-image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/textToVideo.ts\nvar SUPPORTED_PROVIDERS = [\"fal-ai\", \"novita\", \"replicate\"];\nasync function textToVideo(args, options) {\n  if (!args.provider || !typedInclude(SUPPORTED_PROVIDERS, args.provider)) {\n    throw new Error(\n      `textToVideo inference is only supported for the following providers: ${SUPPORTED_PROVIDERS.join(\", \")}`\n    );\n  }\n  const payload = args.provider === \"fal-ai\" || args.provider === \"replicate\" || args.provider === \"novita\" ? { ...omit(args, [\"inputs\", \"parameters\"]), ...args.parameters, prompt: args.inputs } : args;\n  const res = await request(payload, {\n    ...options,\n    task: \"text-to-video\"\n  });\n  if (args.provider === \"fal-ai\") {\n    const { url, info } = await makeRequestOptions(args, { ...options, task: \"text-to-video\" });\n    return await pollFalResponse(res, url, info.headers);\n  } else if (args.provider === \"novita\") {\n    const isValidOutput = typeof res === \"object\" && !!res && \"video\" in res && typeof res.video === \"object\" && !!res.video && \"video_url\" in res.video && typeof res.video.video_url === \"string\" && isUrl(res.video.video_url);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { video: { video_url: string } }\");\n    }\n    const urlResponse = await fetch(res.video.video_url);\n    return await urlResponse.blob();\n  } else {\n    const isValidOutput = typeof res === \"object\" && !!res && \"output\" in res && typeof res.output === \"string\" && isUrl(res.output);\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected { output: string }\");\n    }\n    const urlResponse = await fetch(res.output);\n    return await urlResponse.blob();\n  }\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"feature-extraction\"\n  });\n  let isValidOutput = true;\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\n    if (curDepth > maxDepth)\n      return false;\n    if (arr.every((x) => Array.isArray(x))) {\n      return arr.every((x) => isNumArrayRec(x, maxDepth, curDepth + 1));\n    } else {\n      return arr.every((x) => typeof x === \"number\");\n    }\n  };\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"fill-mask\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem.answer === \"string\" && typeof elem.end === \"number\" && typeof elem.score === \"number\" && typeof elem.start === \"number\"\n  ) : typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end: number, score: number, start: number}>\");\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const res = await request(prepareInput(args), {\n    ...options,\n    task: \"sentence-similarity\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\nfunction prepareInput(args) {\n  return {\n    ...omit(args, [\"inputs\", \"parameters\"]),\n    inputs: { ...omit(args.inputs, \"sourceSentence\") },\n    parameters: { source_sentence: args.inputs.sourceSentence, ...args.parameters }\n  };\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"summarization\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"table-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) ? res.every((elem) => validate(elem)) : validate(res);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\"\n    );\n  }\n  return Array.isArray(res) ? res[0] : res;\n}\nfunction validate(elem) {\n  return typeof elem === \"object\" && !!elem && \"aggregator\" in elem && typeof elem.aggregator === \"string\" && \"answer\" in elem && typeof elem.answer === \"string\" && \"cells\" in elem && Array.isArray(elem.cells) && elem.cells.every((x) => typeof x === \"string\") && \"coordinates\" in elem && Array.isArray(elem.coordinates) && elem.coordinates.every(\n    (coord) => Array.isArray(coord) && coord.every((x) => typeof x === \"number\")\n  );\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, {\n    ...options,\n    task: \"text-classification\"\n  }))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  if (args.provider === \"together\") {\n    args.prompt = args.inputs;\n    const raw = await request(args, {\n      ...options,\n      task: \"text-generation\"\n    });\n    const isValidOutput = typeof raw === \"object\" && \"choices\" in raw && Array.isArray(raw?.choices) && typeof raw?.model === \"string\";\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n    }\n    const completion = raw.choices[0];\n    return {\n      generated_text: completion.text\n    };\n  } else if (args.provider === \"hyperbolic\") {\n    const payload = {\n      messages: [{ content: args.inputs, role: \"user\" }],\n      ...args.parameters ? {\n        max_tokens: args.parameters.max_new_tokens,\n        ...omit(args.parameters, \"max_new_tokens\")\n      } : void 0,\n      ...omit(args, [\"inputs\", \"parameters\"])\n    };\n    const raw = await request(payload, {\n      ...options,\n      task: \"text-generation\"\n    });\n    const isValidOutput = typeof raw === \"object\" && \"choices\" in raw && Array.isArray(raw?.choices) && typeof raw?.model === \"string\";\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n    }\n    const completion = raw.choices[0];\n    return {\n      generated_text: completion.message.content\n    };\n  } else {\n    const res = toArray(\n      await request(args, {\n        ...options,\n        task: \"text-generation\"\n      })\n    );\n    const isValidOutput = Array.isArray(res) && res.every((x) => \"generated_text\" in x && typeof x?.generated_text === \"string\");\n    if (!isValidOutput) {\n      throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n    }\n    return res?.[0];\n  }\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    task: \"text-generation\"\n  });\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      task: \"token-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"translation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.length === 1 ? res?.[0] : res;\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      task: \"zero-shot-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === \"number\") && typeof x.sequence === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletion.ts\nasync function chatCompletion(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"text-generation\",\n    chatCompletion: true\n  });\n  const isValidOutput = typeof res === \"object\" && Array.isArray(res?.choices) && typeof res?.created === \"number\" && typeof res?.id === \"string\" && typeof res?.model === \"string\" && /// Together.ai and Nebius do not output a system_fingerprint\n  (res.system_fingerprint === void 0 || res.system_fingerprint === null || typeof res.system_fingerprint === \"string\") && typeof res?.usage === \"object\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected ChatCompletionOutput\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/chatCompletionStream.ts\nasync function* chatCompletionStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    task: \"text-generation\",\n    chatCompletion: true\n  });\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = toArray(\n    await request(reqArgs, {\n      ...options,\n      task: \"document-question-answering\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && (typeof elem.end === \"number\" || typeof elem.end === \"undefined\") && (typeof elem.score === \"number\" || typeof elem.score === \"undefined\") && (typeof elem.start === \"number\" || typeof elem.start === \"undefined\")\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(new Uint8Array(await args.inputs.image.arrayBuffer()))\n    }\n  };\n  const res = await request(reqArgs, {\n    ...options,\n    task: \"visual-question-answering\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (elem) => typeof elem === \"object\" && !!elem && typeof elem?.answer === \"string\" && typeof elem.score === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res[0];\n}\n\n// src/tasks/tabular/tabularRegression.ts\nasync function tabularRegression(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"tabular-regression\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularClassification.ts\nasync function tabularClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    task: \"tabular-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/InferenceClient.ts\nvar InferenceClient = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n  /**\n   * Returns copy of InferenceClient tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new InferenceClientEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar InferenceClientEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name2, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name2, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken, endpointUrl }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n};\nvar HfInference = class extends InferenceClient {\n};\n\n// src/types.ts\nvar INFERENCE_PROVIDERS = [\n  \"black-forest-labs\",\n  \"cerebras\",\n  \"cohere\",\n  \"fal-ai\",\n  \"fireworks-ai\",\n  \"hf-inference\",\n  \"hyperbolic\",\n  \"nebius\",\n  \"novita\",\n  \"openai\",\n  \"replicate\",\n  \"sambanova\",\n  \"together\"\n];\n\n// src/snippets/index.ts\nvar snippets_exports = {};\n__export(snippets_exports, {\n  getInferenceSnippets: () => getInferenceSnippets\n});\n\n// src/snippets/getInferenceSnippets.ts\nimport {\n  inferenceSnippetLanguages,\n  getModelInputSnippet\n} from \"@huggingface/tasks\";\nimport { Template } from \"@huggingface/jinja\";\n\n// src/snippets/templates.exported.ts\nvar templates = {\n  \"js\": {\n    \"fetch\": {\n      \"basic\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n      \"basicAudio\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"audio/flac\"\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n      \"basicImage\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"image/jpeg\"\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.json();\\n\treturn result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});',\n      \"textToAudio\": '{% if model.library_name == \"transformers\" %}\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.blob();\\n    return result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    // Returns a byte object of the Audio wavform. Use it directly!\\n});\\n{% else %}\\nasync function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    console.log(JSON.stringify(response));\\n});\\n{% endif %} ',\n      \"textToImage\": 'async function query(data) {\\n\tconst response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n\t\t{\\n\t\t\theaders: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n\t\t\t\t\"Content-Type\": \"application/json\",\\n\t\t\t},\\n\t\t\tmethod: \"POST\",\\n\t\t\tbody: JSON.stringify(data),\\n\t\t}\\n\t);\\n\tconst result = await response.blob();\\n\treturn result;\\n}\\n\\nquery({ inputs: {{ providerInputs.asObj.inputs }} }).then((response) => {\\n    // Use image\\n});',\n      \"zeroShotClassification\": 'async function query(data) {\\n    const response = await fetch(\\n\t\t\"{{ fullUrl }}\",\\n        {\\n            headers: {\\n\t\t\t\tAuthorization: \"{{ authorizationHeader }}\",\\n                \"Content-Type\": \"application/json\",\\n            },\\n            method: \"POST\",\\n            body: JSON.stringify(data),\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({\\n    inputs: {{ providerInputs.asObj.inputs }},\\n    parameters: { candidate_labels: [\"refund\", \"legal\", \"faq\"] }\\n}).then((response) => {\\n    console.log(JSON.stringify(response));\\n});'\n    },\n    \"huggingface.js\": {\n      \"basic\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst output = await client.{{ methodName }}({\\n\tmodel: \"{{ model.id }}\",\\n\tinputs: {{ inputs.asObj.inputs }},\\n\tprovider: \"{{ provider }}\",\\n});\\n\\nconsole.log(output);',\n      \"basicAudio\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst data = fs.readFileSync({{inputs.asObj.inputs}});\\n\\nconst output = await client.{{ methodName }}({\\n\tdata,\\n\tmodel: \"{{ model.id }}\",\\n\tprovider: \"{{ provider }}\",\\n});\\n\\nconsole.log(output);',\n      \"basicImage\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst data = fs.readFileSync({{inputs.asObj.inputs}});\\n\\nconst output = await client.{{ methodName }}({\\n\tdata,\\n\tmodel: \"{{ model.id }}\",\\n\tprovider: \"{{ provider }}\",\\n});\\n\\nconsole.log(output);',\n      \"conversational\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nconst chatCompletion = await client.chatCompletion({\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n{{ inputs.asTsString }}\\n});\\n\\nconsole.log(chatCompletion.choices[0].message);',\n      \"conversationalStream\": 'import { InferenceClient } from \"@huggingface/inference\";\\n\\nconst client = new InferenceClient(\"{{ accessToken }}\");\\n\\nlet out = \"\";\\n\\nconst stream = await client.chatCompletionStream({\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n{{ inputs.asTsString }}\\n});\\n\\nfor await (const chunk of stream) {\\n\tif (chunk.choices && chunk.choices.length > 0) {\\n\t\tconst newContent = chunk.choices[0].delta.content;\\n\t\tout += newContent;\\n\t\tconsole.log(newContent);\\n\t}  \\n}',\n      \"textToImage\": `import { InferenceClient } from \"@huggingface/inference\";\n\nconst client = new InferenceClient(\"{{ accessToken }}\");\n\nconst image = await client.textToImage({\n    provider: \"{{ provider }}\",\n    model: \"{{ model.id }}\",\n\tinputs: {{ inputs.asObj.inputs }},\n\tparameters: { num_inference_steps: 5 },\n});\n/// Use the generated image (it's a Blob)`,\n      \"textToVideo\": `import { InferenceClient } from \"@huggingface/inference\";\n\nconst client = new InferenceClient(\"{{ accessToken }}\");\n\nconst image = await client.textToVideo({\n    provider: \"{{ provider }}\",\n    model: \"{{ model.id }}\",\n\tinputs: {{ inputs.asObj.inputs }},\n});\n// Use the generated video (it's a Blob)`\n    },\n    \"openai\": {\n      \"conversational\": 'import { OpenAI } from \"openai\";\\n\\nconst client = new OpenAI({\\n\tbaseURL: \"{{ baseUrl }}\",\\n\tapiKey: \"{{ accessToken }}\",\\n});\\n\\nconst chatCompletion = await client.chat.completions.create({\\n\tmodel: \"{{ providerModelId }}\",\\n{{ inputs.asTsString }}\\n});\\n\\nconsole.log(chatCompletion.choices[0].message);',\n      \"conversationalStream\": 'import { OpenAI } from \"openai\";\\n\\nconst client = new OpenAI({\\n\tbaseURL: \"{{ baseUrl }}\",\\n\tapiKey: \"{{ accessToken }}\",\\n});\\n\\nlet out = \"\";\\n\\nconst stream = await client.chat.completions.create({\\n    provider: \"{{ provider }}\",\\n    model: \"{{ model.id }}\",\\n{{ inputs.asTsString }}\\n});\\n\\nfor await (const chunk of stream) {\\n\tif (chunk.choices && chunk.choices.length > 0) {\\n\t\tconst newContent = chunk.choices[0].delta.content;\\n\t\tout += newContent;\\n\t\tconsole.log(newContent);\\n\t}  \\n}'\n    }\n  },\n  \"python\": {\n    \"fal_client\": {\n      \"textToImage\": '{% if provider == \"fal-ai\" %}\\nimport fal_client\\n\\nresult = fal_client.subscribe(\\n    \"{{ providerModelId }}\",\\n    arguments={\\n        \"prompt\": {{ inputs.asObj.inputs }},\\n    },\\n)\\nprint(result)\\n{% endif %} '\n    },\n    \"huggingface_hub\": {\n      \"basic\": 'result = client.{{ methodName }}(\\n    inputs={{ inputs.asObj.inputs }},\\n    model=\"{{ model.id }}\",\\n)',\n      \"basicAudio\": 'output = client.{{ methodName }}({{ inputs.asObj.inputs }}, model=\"{{ model.id }}\")',\n      \"basicImage\": 'output = client.{{ methodName }}({{ inputs.asObj.inputs }}, model=\"{{ model.id }}\")',\n      \"conversational\": 'completion = client.chat.completions.create(\\n    model=\"{{ model.id }}\",\\n{{ inputs.asPythonString }}\\n)\\n\\nprint(completion.choices[0].message) ',\n      \"conversationalStream\": 'stream = client.chat.completions.create(\\n    model=\"{{ model.id }}\",\\n{{ inputs.asPythonString }}\\n    stream=True,\\n)\\n\\nfor chunk in stream:\\n    print(chunk.choices[0].delta.content, end=\"\") ',\n      \"documentQuestionAnswering\": 'output = client.document_question_answering(\\n    \"{{ inputs.asObj.image }}\",\\n    question=\"{{ inputs.asObj.question }}\",\\n    model=\"{{ model.id }}\",\\n) ',\n      \"imageToImage\": '# output is a PIL.Image object\\nimage = client.image_to_image(\\n    \"{{ inputs.asObj.inputs }}\",\\n    prompt=\"{{ inputs.asObj.parameters.prompt }}\",\\n    model=\"{{ model.id }}\",\\n) ',\n      \"importInferenceClient\": 'from huggingface_hub import InferenceClient\\n\\nclient = InferenceClient(\\n    provider=\"{{ provider }}\",\\n    api_key=\"{{ accessToken }}\",\\n)',\n      \"textToImage\": '# output is a PIL.Image object\\nimage = client.text_to_image(\\n    {{ inputs.asObj.inputs }},\\n    model=\"{{ model.id }}\",\\n) ',\n      \"textToVideo\": 'video = client.text_to_video(\\n    {{ inputs.asObj.inputs }},\\n    model=\"{{ model.id }}\",\\n) '\n    },\n    \"openai\": {\n      \"conversational\": 'from openai import OpenAI\\n\\nclient = OpenAI(\\n    base_url=\"{{ baseUrl }}\",\\n    api_key=\"{{ accessToken }}\"\\n)\\n\\ncompletion = client.chat.completions.create(\\n    model=\"{{ providerModelId }}\",\\n{{ inputs.asPythonString }}\\n)\\n\\nprint(completion.choices[0].message) ',\n      \"conversationalStream\": 'from openai import OpenAI\\n\\nclient = OpenAI(\\n    base_url=\"{{ baseUrl }}\",\\n    api_key=\"{{ accessToken }}\"\\n)\\n\\nstream = client.chat.completions.create(\\n    model=\"{{ providerModelId }}\",\\n{{ inputs.asPythonString }}\\n    stream=True,\\n)\\n\\nfor chunk in stream:\\n    print(chunk.choices[0].delta.content, end=\"\")'\n    },\n    \"requests\": {\n      \"basic\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n}) ',\n      \"basicAudio\": 'def query(filename):\\n    with open(filename, \"rb\") as f:\\n        data = f.read()\\n    response = requests.post(API_URL, headers={\"Content-Type\": \"audio/flac\", **headers}, data=data)\\n    return response.json()\\n\\noutput = query({{ providerInputs.asObj.inputs }})',\n      \"basicImage\": 'def query(filename):\\n    with open(filename, \"rb\") as f:\\n        data = f.read()\\n    response = requests.post(API_URL, headers={\"Content-Type\": \"image/jpeg\", **headers}, data=data)\\n    return response.json()\\n\\noutput = query({{ providerInputs.asObj.inputs }})',\n      \"conversational\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\nresponse = query({\\n{{ providerInputs.asJsonString }}\\n})\\n\\nprint(response[\"choices\"][0][\"message\"])',\n      \"conversationalStream\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload, stream=True)\\n    for line in response.iter_lines():\\n        if not line.startswith(b\"data:\"):\\n            continue\\n        if line.strip() == b\"data: [DONE]\":\\n            return\\n        yield json.loads(line.decode(\"utf-8\").lstrip(\"data:\").rstrip(\"/n\"))\\n\\nchunks = query({\\n{{ providerInputs.asJsonString }},\\n    \"stream\": True,\\n})\\n\\nfor chunk in chunks:\\n    print(chunk[\"choices\"][0][\"delta\"][\"content\"], end=\"\")',\n      \"documentQuestionAnswering\": 'def query(payload):\\n    with open(payload[\"image\"], \"rb\") as f:\\n        img = f.read()\\n        payload[\"image\"] = base64.b64encode(img).decode(\"utf-8\")\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"inputs\": {\\n        \"image\": \"{{ inputs.asObj.image }}\",\\n        \"question\": \"{{ inputs.asObj.question }}\",\\n    },\\n}) ',\n      \"imageToImage\": 'def query(payload):\\n    with open(payload[\"inputs\"], \"rb\") as f:\\n        img = f.read()\\n        payload[\"inputs\"] = base64.b64encode(img).decode(\"utf-8\")\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\nimage_bytes = query({\\n{{ providerInputs.asJsonString }}\\n})\\n\\n# You can access the image with PIL.Image for example\\nimport io\\nfrom PIL import Image\\nimage = Image.open(io.BytesIO(image_bytes)) ',\n      \"importRequests\": '{% if importBase64 %}\\nimport base64\\n{% endif %}\\n{% if importJson %}\\nimport json\\n{% endif %}\\nimport requests\\n\\nAPI_URL = \"{{ fullUrl }}\"\\nheaders = {\"Authorization\": \"{{ authorizationHeader }}\"}',\n      \"tabular\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\nresponse = query({\\n    \"inputs\": {\\n        \"data\": {{ providerInputs.asObj.inputs }}\\n    },\\n}) ',\n      \"textToAudio\": '{% if model.library_name == \"transformers\" %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\naudio_bytes = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n})\\n# You can access the audio with IPython.display for example\\nfrom IPython.display import Audio\\nAudio(audio_bytes)\\n{% else %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\naudio, sampling_rate = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n})\\n# You can access the audio with IPython.display for example\\nfrom IPython.display import Audio\\nAudio(audio, rate=sampling_rate)\\n{% endif %} ',\n      \"textToImage\": '{% if provider == \"hf-inference\" %}\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.content\\n\\nimage_bytes = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n})\\n\\n# You can access the image with PIL.Image for example\\nimport io\\nfrom PIL import Image\\nimage = Image.open(io.BytesIO(image_bytes))\\n{% endif %}',\n      \"zeroShotClassification\": 'def query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"inputs\": {{ providerInputs.asObj.inputs }},\\n    \"parameters\": {\"candidate_labels\": [\"refund\", \"legal\", \"faq\"]},\\n}) ',\n      \"zeroShotImageClassification\": 'def query(data):\\n    with open(data[\"image_path\"], \"rb\") as f:\\n        img = f.read()\\n    payload={\\n        \"parameters\": data[\"parameters\"],\\n        \"inputs\": base64.b64encode(img).decode(\"utf-8\")\\n    }\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \"image_path\": {{ providerInputs.asObj.inputs }},\\n    \"parameters\": {\"candidate_labels\": [\"cat\", \"dog\", \"llama\"]},\\n}) '\n    }\n  },\n  \"sh\": {\n    \"curl\": {\n      \"basic\": \"curl {{ fullUrl }} \\\\\\n    -X POST \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: application/json' \\\\\\n    -d '{\\n{{ providerInputs.asCurlString }}\\n    }'\",\n      \"basicAudio\": \"curl {{ fullUrl }} \\\\\\n    -X POST \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: audio/flac' \\\\\\n    --data-binary @{{ providerInputs.asObj.inputs }}\",\n      \"basicImage\": \"curl {{ fullUrl }} \\\\\\n    -X POST \\\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\\n    -H 'Content-Type: image/jpeg' \\\\\\n    --data-binary @{{ providerInputs.asObj.inputs }}\",\n      \"conversational\": `curl {{ fullUrl }} \\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\n    -H 'Content-Type: application/json' \\\\\n    -d '{\n{{ providerInputs.asCurlString }},\n        \"stream\": false\n    }'`,\n      \"conversationalStream\": `curl {{ fullUrl }} \\\\\n    -H 'Authorization: {{ authorizationHeader }}' \\\\\n    -H 'Content-Type: application/json' \\\\\n    -d '{\n{{ providerInputs.asCurlString }},\n        \"stream\": true\n    }'`,\n      \"zeroShotClassification\": `curl {{ fullUrl }} \\\\\n    -X POST \\\\\n    -d '{\"inputs\": {{ providerInputs.asObj.inputs }}, \"parameters\": {\"candidate_labels\": [\"refund\", \"legal\", \"faq\"]}}' \\\\\n    -H 'Content-Type: application/json' \\\\\n    -H 'Authorization: {{ authorizationHeader }}'`\n    }\n  }\n};\n\n// src/snippets/getInferenceSnippets.ts\nvar PYTHON_CLIENTS = [\"huggingface_hub\", \"fal_client\", \"requests\", \"openai\"];\nvar JS_CLIENTS = [\"fetch\", \"huggingface.js\", \"openai\"];\nvar SH_CLIENTS = [\"curl\"];\nvar CLIENTS = {\n  js: [...JS_CLIENTS],\n  python: [...PYTHON_CLIENTS],\n  sh: [...SH_CLIENTS]\n};\nvar hasTemplate = (language, client, templateName) => templates[language]?.[client]?.[templateName] !== void 0;\nvar loadTemplate = (language, client, templateName) => {\n  const template = templates[language]?.[client]?.[templateName];\n  if (!template) {\n    throw new Error(`Template not found: ${language}/${client}/${templateName}`);\n  }\n  return (data) => new Template(template).render({ ...data });\n};\nvar snippetImportPythonInferenceClient = loadTemplate(\"python\", \"huggingface_hub\", \"importInferenceClient\");\nvar snippetImportRequests = loadTemplate(\"python\", \"requests\", \"importRequests\");\nvar HF_PYTHON_METHODS = {\n  \"audio-classification\": \"audio_classification\",\n  \"audio-to-audio\": \"audio_to_audio\",\n  \"automatic-speech-recognition\": \"automatic_speech_recognition\",\n  \"document-question-answering\": \"document_question_answering\",\n  \"feature-extraction\": \"feature_extraction\",\n  \"fill-mask\": \"fill_mask\",\n  \"image-classification\": \"image_classification\",\n  \"image-segmentation\": \"image_segmentation\",\n  \"image-to-image\": \"image_to_image\",\n  \"image-to-text\": \"image_to_text\",\n  \"object-detection\": \"object_detection\",\n  \"question-answering\": \"question_answering\",\n  \"sentence-similarity\": \"sentence_similarity\",\n  summarization: \"summarization\",\n  \"table-question-answering\": \"table_question_answering\",\n  \"tabular-classification\": \"tabular_classification\",\n  \"tabular-regression\": \"tabular_regression\",\n  \"text-classification\": \"text_classification\",\n  \"text-generation\": \"text_generation\",\n  \"text-to-image\": \"text_to_image\",\n  \"text-to-speech\": \"text_to_speech\",\n  \"text-to-video\": \"text_to_video\",\n  \"token-classification\": \"token_classification\",\n  translation: \"translation\",\n  \"visual-question-answering\": \"visual_question_answering\",\n  \"zero-shot-classification\": \"zero_shot_classification\",\n  \"zero-shot-image-classification\": \"zero_shot_image_classification\"\n};\nvar HF_JS_METHODS = {\n  \"automatic-speech-recognition\": \"automaticSpeechRecognition\",\n  \"feature-extraction\": \"featureExtraction\",\n  \"fill-mask\": \"fillMask\",\n  \"image-classification\": \"imageClassification\",\n  \"question-answering\": \"questionAnswering\",\n  \"sentence-similarity\": \"sentenceSimilarity\",\n  summarization: \"summarization\",\n  \"table-question-answering\": \"tableQuestionAnswering\",\n  \"text-classification\": \"textClassification\",\n  \"text-generation\": \"textGeneration\",\n  \"text2text-generation\": \"textGeneration\",\n  \"token-classification\": \"tokenClassification\",\n  translation: \"translation\"\n};\nvar snippetGenerator = (templateName, inputPreparationFn) => {\n  return (model, accessToken, provider, providerModelId, opts) => {\n    if (model.pipeline_tag && [\"text-generation\", \"image-text-to-text\"].includes(model.pipeline_tag) && model.tags.includes(\"conversational\")) {\n      templateName = opts?.streaming ? \"conversationalStream\" : \"conversational\";\n      inputPreparationFn = prepareConversationalInput;\n    }\n    const inputs = inputPreparationFn ? inputPreparationFn(model, opts) : { inputs: getModelInputSnippet(model) };\n    const request2 = makeRequestOptionsFromResolvedModel(\n      providerModelId ?? model.id,\n      { accessToken, provider, ...inputs },\n      { chatCompletion: templateName.includes(\"conversational\"), task: model.pipeline_tag }\n    );\n    let providerInputs = inputs;\n    const bodyAsObj = request2.info.body;\n    if (typeof bodyAsObj === \"string\") {\n      try {\n        providerInputs = JSON.parse(bodyAsObj);\n      } catch (e) {\n        console.error(\"Failed to parse body as JSON\", e);\n      }\n    }\n    const params = {\n      accessToken,\n      authorizationHeader: request2.info.headers?.Authorization,\n      baseUrl: removeSuffix(request2.url, \"/chat/completions\"),\n      fullUrl: request2.url,\n      inputs: {\n        asObj: inputs,\n        asCurlString: formatBody(inputs, \"curl\"),\n        asJsonString: formatBody(inputs, \"json\"),\n        asPythonString: formatBody(inputs, \"python\"),\n        asTsString: formatBody(inputs, \"ts\")\n      },\n      providerInputs: {\n        asObj: providerInputs,\n        asCurlString: formatBody(providerInputs, \"curl\"),\n        asJsonString: formatBody(providerInputs, \"json\"),\n        asPythonString: formatBody(providerInputs, \"python\"),\n        asTsString: formatBody(providerInputs, \"ts\")\n      },\n      model,\n      provider,\n      providerModelId: providerModelId ?? model.id\n    };\n    return inferenceSnippetLanguages.map((language) => {\n      return CLIENTS[language].map((client) => {\n        if (!hasTemplate(language, client, templateName)) {\n          return;\n        }\n        const template = loadTemplate(language, client, templateName);\n        if (client === \"huggingface_hub\" && templateName.includes(\"basic\")) {\n          if (!(model.pipeline_tag && model.pipeline_tag in HF_PYTHON_METHODS)) {\n            return;\n          }\n          params[\"methodName\"] = HF_PYTHON_METHODS[model.pipeline_tag];\n        }\n        if (client === \"huggingface.js\" && templateName.includes(\"basic\")) {\n          if (!(model.pipeline_tag && model.pipeline_tag in HF_JS_METHODS)) {\n            return;\n          }\n          params[\"methodName\"] = HF_JS_METHODS[model.pipeline_tag];\n        }\n        let snippet = template(params).trim();\n        if (!snippet) {\n          return;\n        }\n        if (client === \"huggingface_hub\") {\n          const importSection = snippetImportPythonInferenceClient({ ...params });\n          snippet = `${importSection}\n\n${snippet}`;\n        } else if (client === \"requests\") {\n          const importSection = snippetImportRequests({\n            ...params,\n            importBase64: snippet.includes(\"base64\"),\n            importJson: snippet.includes(\"json.\")\n          });\n          snippet = `${importSection}\n\n${snippet}`;\n        }\n        return { language, client, content: snippet };\n      }).filter((snippet) => snippet !== void 0);\n    }).flat();\n  };\n};\nvar prepareDocumentQuestionAnsweringInput = (model) => {\n  return JSON.parse(getModelInputSnippet(model));\n};\nvar prepareImageToImageInput = (model) => {\n  const data = JSON.parse(getModelInputSnippet(model));\n  return { inputs: data.image, parameters: { prompt: data.prompt } };\n};\nvar prepareConversationalInput = (model, opts) => {\n  return {\n    messages: opts?.messages ?? getModelInputSnippet(model),\n    ...opts?.temperature ? { temperature: opts?.temperature } : void 0,\n    max_tokens: opts?.max_tokens ?? 500,\n    ...opts?.top_p ? { top_p: opts?.top_p } : void 0\n  };\n};\nvar snippets = {\n  \"audio-classification\": snippetGenerator(\"basicAudio\"),\n  \"audio-to-audio\": snippetGenerator(\"basicAudio\"),\n  \"automatic-speech-recognition\": snippetGenerator(\"basicAudio\"),\n  \"document-question-answering\": snippetGenerator(\"documentQuestionAnswering\", prepareDocumentQuestionAnsweringInput),\n  \"feature-extraction\": snippetGenerator(\"basic\"),\n  \"fill-mask\": snippetGenerator(\"basic\"),\n  \"image-classification\": snippetGenerator(\"basicImage\"),\n  \"image-segmentation\": snippetGenerator(\"basicImage\"),\n  \"image-text-to-text\": snippetGenerator(\"conversational\"),\n  \"image-to-image\": snippetGenerator(\"imageToImage\", prepareImageToImageInput),\n  \"image-to-text\": snippetGenerator(\"basicImage\"),\n  \"object-detection\": snippetGenerator(\"basicImage\"),\n  \"question-answering\": snippetGenerator(\"basic\"),\n  \"sentence-similarity\": snippetGenerator(\"basic\"),\n  summarization: snippetGenerator(\"basic\"),\n  \"tabular-classification\": snippetGenerator(\"tabular\"),\n  \"tabular-regression\": snippetGenerator(\"tabular\"),\n  \"table-question-answering\": snippetGenerator(\"basic\"),\n  \"text-classification\": snippetGenerator(\"basic\"),\n  \"text-generation\": snippetGenerator(\"basic\"),\n  \"text-to-audio\": snippetGenerator(\"textToAudio\"),\n  \"text-to-image\": snippetGenerator(\"textToImage\"),\n  \"text-to-speech\": snippetGenerator(\"textToAudio\"),\n  \"text-to-video\": snippetGenerator(\"textToVideo\"),\n  \"text2text-generation\": snippetGenerator(\"basic\"),\n  \"token-classification\": snippetGenerator(\"basic\"),\n  translation: snippetGenerator(\"basic\"),\n  \"zero-shot-classification\": snippetGenerator(\"zeroShotClassification\"),\n  \"zero-shot-image-classification\": snippetGenerator(\"zeroShotImageClassification\")\n};\nfunction getInferenceSnippets(model, accessToken, provider, providerModelId, opts) {\n  return model.pipeline_tag && model.pipeline_tag in snippets ? snippets[model.pipeline_tag]?.(model, accessToken, provider, providerModelId, opts) ?? [] : [];\n}\nfunction formatBody(obj, format) {\n  switch (format) {\n    case \"curl\":\n      return indentString(formatBody(obj, \"json\"));\n    case \"json\":\n      return JSON.stringify(obj, null, 4).split(\"\\n\").slice(1, -1).join(\"\\n\");\n    case \"python\":\n      return indentString(\n        Object.entries(obj).map(([key, value]) => {\n          const formattedValue = JSON.stringify(value, null, 4).replace(/\"/g, '\"');\n          return `${key}=${formattedValue},`;\n        }).join(\"\\n\")\n      );\n    case \"ts\":\n      return formatTsObject(obj).split(\"\\n\").slice(1, -1).join(\"\\n\");\n    default:\n      throw new Error(`Unsupported format: ${format}`);\n  }\n}\nfunction formatTsObject(obj, depth) {\n  depth = depth ?? 0;\n  if (typeof obj !== \"object\" || obj === null) {\n    return JSON.stringify(obj);\n  }\n  if (Array.isArray(obj)) {\n    const items = obj.map((item) => {\n      const formatted = formatTsObject(item, depth + 1);\n      return `${\" \".repeat(4 * (depth + 1))}${formatted},`;\n    }).join(\"\\n\");\n    return `[\n${items}\n${\" \".repeat(4 * depth)}]`;\n  }\n  const entries = Object.entries(obj);\n  const lines = entries.map(([key, value]) => {\n    const formattedValue = formatTsObject(value, depth + 1);\n    const keyStr = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/.test(key) ? key : `\"${key}\"`;\n    return `${\" \".repeat(4 * (depth + 1))}${keyStr}: ${formattedValue},`;\n  }).join(\"\\n\");\n  return `{\n${lines}\n${\" \".repeat(4 * depth)}}`;\n}\nfunction indentString(str) {\n  return str.split(\"\\n\").map((line) => \" \".repeat(4) + line).join(\"\\n\");\n}\nfunction removeSuffix(str, suffix) {\n  return str.endsWith(suffix) ? str.slice(0, -suffix.length) : str;\n}\nexport {\n  HfInference,\n  INFERENCE_PROVIDERS,\n  InferenceClient,\n  InferenceClientEndpoint,\n  InferenceOutputError,\n  audioClassification,\n  audioToAudio,\n  automaticSpeechRecognition,\n  chatCompletion,\n  chatCompletionStream,\n  documentQuestionAnswering,\n  featureExtraction,\n  fillMask,\n  imageClassification,\n  imageSegmentation,\n  imageToImage,\n  imageToText,\n  objectDetection,\n  questionAnswering,\n  request,\n  sentenceSimilarity,\n  snippets_exports as snippets,\n  streamingRequest,\n  summarization,\n  tableQuestionAnswering,\n  tabularClassification,\n  tabularRegression,\n  textClassification,\n  textGeneration,\n  textGenerationStream,\n  textToImage,\n  textToSpeech,\n  textToVideo,\n  tokenClassification,\n  translation,\n  visualQuestionAnswering,\n  zeroShotClassification,\n  zeroShotImageClassification\n};\n"],
  "mappings": "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",
  "names": ["taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "taskData", "data_default", "data_default", "tasks", "snippets", "GGMLQuantizationType", "name"]
}
